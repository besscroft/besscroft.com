<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在VirtualBox上安装Android-X86</title>
    <url>/posts/2019/android-for-virtualbox.html</url>
    <content><![CDATA[<p>对于<code>Android</code>开发来说，尤其是新手(没错，我自己就是<code>noob</code>😥)，有很多种开发调试的方案。比如<code>Genymotion+VirtualBox</code>搭配方案(在我的笔记本上这种方案性能最低，可能因配置而异)、直接用<code>VirtualBox</code>安装<code>Android-X86</code>的<code>iso</code>，或者是直接在<code>Android Studio</code>里面调试等等。本文介绍的是直接用<code>VirtualBox</code>安装<code>Android-X86</code>，虽然是在虚拟机中安装，但是也会有很多不可避免的坑！！！</p>
<a id="more"></a>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox025.png" alt></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，我们要准备<code>VirtualBox</code>：</p>
<p>官网👉：<span class="exturl" data-url="aHR0cHM6Ly93d3cudmlydHVhbGJveC5vcmcvd2lraS9Eb3dubG9hZHM=">https://www.virtualbox.org/wiki/Downloads<i class="fa fa-external-link-alt"></i></span></p>
<p>然后下载<code>Android-X86</code>的<code>iso</code>，这是一个将<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20v">Android开源项目<i class="fa fa-external-link-alt"></i></span>移植到x86平台的项目：</p>
<p>官网👉：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZC14ODYub3JnL2Rvd25sb2Fk">https://www.android-x86.org/download<i class="fa fa-external-link-alt"></i></span></p>
<p><strong>注：本文章同样适用于PhoenixOS系统！</strong></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>准备好之后，我们安装完并打开<code>VirtualBox</code>，找到如图所示的<code>新建</code>按钮(不同版本可能界面稍有不同，但是明白要干什么就行了):</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox001.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox002.png" alt></p>
<p>然后设置相应的信息，注意文件夹就是虚拟机文件存放位置，建议不要用默认的。名称随便取，类型选<code>Linux</code>，版本选<code>Other Linux</code>，至于是<code>32位</code>还是<code>64位</code>，就看你下载的<code>iso</code>是多少位的了。然后点击下一步。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox003.png" alt></p>
<p>然后分配内存，这个看电脑本身的内存多大再酌情配置，然后点击下一步。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox004.png" alt></p>
<p>然后选择<code>现在创建虚拟硬盘</code>。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox005.png" alt></p>
<p>然后选择VDI，点击下一步。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox006.png" alt></p>
<p>选择动态分配，然后点击下一步(当然，硬盘空间大的请随意)。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox007.png" alt></p>
<p>根据实际情况来配置虚拟硬盘的大小，硬盘空间大的请随意，然后点击创建。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox008.png" alt></p>
<p>然后找到我们刚才创建好的<code>Android_test</code>，点击设置。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox009.png" alt></p>
<p>然后点击显示-调整显存大小-启用硬件加速里面的3D加速。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox010.png" alt></p>
<p>选择存储-点击盘片-分配一个光驱，就是把你下载的<code>Android-X86</code>的<code>iso</code>添加进去。然后点击ok。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>当鼠标进入虚拟机窗口移不出来时，按下键盘右边的Ctrl(唱、跳、Rap、篮球😀)即可，vm虚拟机是Ctrl+Alt。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox011.png" alt></p>
<p>双击我们创建好的虚拟机。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox012.png" alt></p>
<p>选择<code>Advanced options...</code>，然后</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox013.png" alt></p>
<p>选择<code>Auto_Installation</code>，这里为什么建议大家选择自动安装呢？因为我们再“这个”虚拟机中只分配了一个虚拟硬盘，而且并不大，所以没必要分区。而且这样也最快，能保证新手在不太了解的情况下不出错。选择这一项之后，按下回车键。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox014.png" alt></p>
<p>选择yes！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox015.png" alt></p>
<p>耐心等待！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox016.png" alt></p>
<p>选择Reboot以重启。</p>
<h2 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a>划重点</h2><p>在重启之后，会回到开始的位置</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox017.png" alt></p>
<p>然后我们将其强制退出！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox018.png" alt></p>
<p>然后在设置里面，把iso的盘片移除，免得开机时加载盘片去了。然后再重新双击启动！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox019.png" alt></p>
<p>然后选择<code>Android-x86 8.1-r2</code>，<strong>千万别手贱按了回车</strong>，通过下面的帮助信息得知，我们要按下<code>E键</code>，进入编辑页面.</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox020.png" alt></p>
<p>然后在<code>kernel</code>哪里，同样的按下<code>E键</code>，进入编辑页面</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox021.png" alt></p>
<p>移动光标，找到图中的<code>quiet</code>这个词。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox022.png" alt></p>
<p>把<code>quiet</code>改为<code>nomodeset xforcevesa</code>，然后按下回车键，再按下键盘上的<code>B键</code>。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox023.png" alt></p>
<p>然后你就会看到Android的字母了，慢慢等待即可！后面的就不说了，等到了“开机”，应该就自己会玩了，跟用手机也区别不大！</p>
<p><strong>注：每次开机都需要这一步操作，如果你不想这么做，请自行Google！</strong></p>
<h2 id="问题详解"><a href="#问题详解" class="headerlink" title="问题详解"></a>问题详解</h2><p>这时候来给大家解释一下，为什么刚才在进入系统之前要修改某些参数！转化成问题，也就是：为什么部分电脑或者虚拟机无法启动Android-x86系统的图形界面？</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="android-for-virtualbox/android-for-virtualbox024.png" alt></p>
<p>先来看一张图，我们知道，它是基于Linux内核的，就跟大多数人安装Linux时需要禁用独显一样，你在安装Android-x86时，需要告诉内核，不要设置图形分辨率。</p>
<p>那么，刚才的三个步骤，分别是在干什么呢？</p>
<ul>
<li>删除<code>quiet</code>，删除之后可以查看内核消息。</li>
<li>添加<code>nomodeset</code>参数，禁用“内核模式设置”(告诉内核不要设置图形分辨率，让X代替)。</li>
<li>添加<code>xforcevesa</code>参数，强制使用X的VESA驱动程序。</li>
</ul>
<p><strong>VESA</strong>是一个支持大部分显卡的通用驱动，但不提供任何2D和3D加速功能。要充分发挥显卡性能，需安装<strong>相应的厂商驱动程序</strong>。</p>
<p>nVidia用户，可以参考ArchLinux的内核模式设置:<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0tlcm5lbF9tb2RlX3NldHRpbmc=">https://wiki.archlinux.org/index.php/Kernel_mode_setting<i class="fa fa-external-link-alt"></i></span></p>
<p>同时，你可以了解HybridGraphics:<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVidW50dS5jb20vY29tbXVuaXR5L0h5YnJpZEdyYXBoaWNz">https://help.ubuntu.com/community/HybridGraphics<i class="fa fa-external-link-alt"></i></span></p>
<p>然后查看项目官方的wiki(必要的):<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZC14ODYub3JnL2RvY3VtZW50YXRpb24vZ3JhcGhpY19jYXJkLmh0bWw=">https://www.android-x86.org/documentation/graphic_card.html<i class="fa fa-external-link-alt"></i></span></p>
<p>以及issues:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW50aG9zL3N5c3RlbS1hbmFseXNpcy9pc3N1ZXMvMjM=">https://github.com/openthos/system-analysis/issues/23<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年终总结</title>
    <url>/posts/2019/2019year-end.html</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="2019year-end/2019year-end_p1.jpg" alt></p>
<blockquote>
<p>美丽的灵魂成就美丽的人生    ——  《美丽人生》豆瓣短评</p>
</blockquote>
<a id="more"></a>

<h3 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h3><p>9102年马上就要结束了，回过头来看这一年，又完成了哪些目标？经历了哪些挫折？在人生的十字路口我做了怎样的选择？又学到了哪些新知识、又看了哪些书？</p>
<p>先看看年初立的flag：</p>
<ul>
<li><input disabled type="checkbox"> 公众号坚持每周都发布原创文章</li>
<li><input checked disabled type="checkbox"> GitHub上完成自己的一些项目(尽管可能并没有什么实际用处，但是需要练手)</li>
<li><input checked disabled type="checkbox"> 少玩游戏少熬夜</li>
<li><input disabled type="checkbox"> 学习或了解一门新的编程语言(这里有歧义，算作没完成吧)</li>
<li><input disabled type="checkbox"> 从入门到精通并不弃坑的学习C++(先把Java搞好，Java真香)</li>
<li><input disabled type="checkbox"> 坚持健身</li>
<li><input disabled type="checkbox"> 拥有自己的小程序</li>
<li><input checked disabled type="checkbox"> 考试不挂科</li>
<li><input disabled type="checkbox"> 学习UE4</li>
<li><input disabled type="checkbox"> 完成以上所有的计划</li>
</ul>
<p>嗯，😥真是不堪入目，今年看起来似乎很失败。了解我的小伙伴，应该知道我在很早之前就接触Java这门语言了。但是在去年写年终总结时，因为对游戏开发很感兴趣，所以当时决定选择游戏开发来作为新一年的目标。但是！！！在我发表之后不久，在一些大佬的劝说下(洗脑)，决定就往Java发展，目前正在学习JavaEE中。</p>
<blockquote>
<p>不能影响你编程观点的语言，不值得你去学！——Alan Perlis</p>
</blockquote>
<p>为什么我最终还是选择了Java？实不相瞒，我最早接触的编程语言，就是Java。后来因为种种原因，对Java的了解越来越多，也越来越喜欢这门语言。它从某种程度上对我的编程思想带来了影响，我也明白，编程语言学的越多，并不代表能力越强，更重要的应该是其中的“Programming paradigm”，即“编程范式”。</p>
<p>所以从明年开始，决定专精Java这门语言，或许等到Java学的很好之后(也需要好几年)，才会再接触其它比较好的语言。某些语言，我也一直想去学，但是先认真地学“好”一门语言，并掌握编程思想才是我应该做的，不能“急功近利”。</p>
<p>在今年，我了解并学习了很多新知识，不知道为什么，学习的速度跟以前比越来越快了，但是发现自己要学的东西越来越多了，不过我不会停止学习的。今年11月份的时候，一直在犹豫怎么选择以后的路(短期的)，最后参考一些前辈的经历，并结合自己的实际情况，决定选择培训。目前在武汉千峰培训JavaEE，每天在学习我喜欢的知识，感觉过的很充实。我也很感谢家人对我的支持，成功路上真的离不开家人的支持(虽然目前还没成功)。</p>
<p>最后，说好的要定期更新文章，但是很多时候真的不知道写啥，我觉得这跟我的知识储备还是有关，毕竟不想太水文章。但是，我这一年来，至少做到了坚持做markdown笔记，并且我决定，将这个好习惯保持下去！</p>
<h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>那么2020年，也应该立新的flag了！</p>
<ul>
<li>学好Java，以及相关的一些技术。</li>
<li>找一份自己喜欢的编程工作！</li>
<li>少玩游戏少熬夜。</li>
<li>坚持健身。</li>
<li>继续坚持做笔记。</li>
<li>精通Linux的日常使用以及掌握Linux平台的开发(以Java为主)</li>
<li>写一款自己的主题或web项目(在培训机构的不算数)</li>
<li>积极的拥抱开源。</li>
<li>学习或了解一项新技术</li>
<li>成立自己的小团队，或者找到一群有共同理想目标的人</li>
<li>完成以上所有的计划，最好能脱单！</li>
</ul>
<p>最后，祝大家在2020能够找到自己的方向或目标，并不断地努力下去！</p>
<center><b>I shall rise oh well rise again and agian.</b></center>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Hello&#123;</span><br><span class="line">	public class void main(String[] args) &#123;</span><br><span class="line">    	System.out.println(&quot;你好，2020!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Playing CSO2 on your computer！</title>
    <url>/posts/2019/cso2.html</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>反恐精英Online2，英文名：Counter-Strike Online2，粉丝们称为蛋拐兔2。世纪天成公司于2013年9月5日正式宣布代理《反恐精英Online2》，国服于2015年2月5日起源首测，3月5号二测，4月22号正式公测。然而不辛的是，在2018年5月18日，国服（世纪天成代理）正式停止运营。</p>
<a id="more"></a>

<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>嗯，反正我是在停服之前的一段时间，就已经没玩了。因为我害怕，害怕前一天还玩了，第二天就进不去游戏了，这并不是我想要的。在我的印象中，每年的圣诞节，是蛋拐兔最好玩的时候，人多，氛围也好。而18年的圣诞节，只能听听bgm艰难度日，到后来，当我得知有私服之后，我便又重新燃起了激情！！！</p>
<h2 id="Gaming"><a href="#Gaming" class="headerlink" title="Gaming"></a>Gaming</h2><h3 id="浅谈"><a href="#浅谈" class="headerlink" title="浅谈"></a>浅谈</h3><p>蛋拐兔2关服了，你是否还在苦恼呢？其实不少小伙伴们都知道有私服的，虽然不是我的，但是我也想借此机<br>会来推广，好让喜欢的朋友玩。我知道的私服都是免费的，都是公益性质的，搭建私服的大佬们完全是为了能<br>让大家接着玩，而且还免费。我录制视频和写教程，不出于任何形式的盈利目的，完全是基于一个热爱的老<br>玩家心态，告知和帮助那些跟我一样，曾经喜欢玩蛋拐兔的玩家，能够重新玩这款游戏。</p>
<center>不管你玩不玩，但是请记得，你的青春里有过它！！！</center>

<h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>首先，让我们感谢Ochii大神写的CSO2的主服务器和客户端启动程序，并且已经开源了！<br>还有“I’m Not MentaL”大神的GUI启动器。<br>同时也感谢国内的几个小团队，自己搭建了国内的私服，并在此基础上优化了服务端和启动端，让大家<br>不仅免费也更容易地van这款游戏，而且是联机的！谢谢你们做出的努力！感谢！</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Microsoft .NET Framework 4.5.2及以上</span><br><span class="line">- NodeJS（如果你玩国内的联机私服，则不需要安装）</span><br><span class="line">- 一些必要的游戏运行环境，如果你是平常玩游戏，那么我相信你的电脑上也已经有了</span><br></pre></td></tr></table></figure>

<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 安装包，版本可选，看你想玩那种的。国内私服的话，也是有它们自己稍做了修改的版本的。</span><br><span class="line">	链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;15qVLo7jrJxG6r-kZBqqEdQ   提取码：1h7v </span><br><span class="line">- 主服务器 </span><br><span class="line">	链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;166igd4lFMR1R776ATMKN5w   提取码：h0ka </span><br><span class="line">- 客户端启动程序</span><br><span class="line">	链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1OeDIVXhbfgvDljVLdYxVfA   提取码：iwso </span><br><span class="line">- GUI启动器</span><br><span class="line">	链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1A8rh44NzJ8MSXU8edJqIwQ   提取码：czup </span><br><span class="line">- node.js（版本10或更高版本）</span><br></pre></td></tr></table></figure>



<h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><p>我们先假设，你已经安装了<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==">Node.js<i class="fa fa-external-link-alt"></i></span>，然后，在你的电脑硬盘里面，随便找一个盘。我放在E盘了，比如我的游戏路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\Counter-Strike Online 2</span><br></pre></td></tr></table></figure>

<p>然后创建<code>Game</code>文件夹和<code>Server</code>文件夹，如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs001.png" alt></p>
<p>然后，将游戏的压缩包解压到<code>Game</code>文件夹，解压完之后，应该是这样：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs002.png" alt></p>
<p>接着将主服务器的压缩包，解压至<code>Server</code>文件夹，解压完之后，应为：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs003.png" alt></p>
<p>然后，将下载的2个客户端启动程序，解压至<code>Counter-Strike Online 2\Game\Bin</code>文件夹。解压完成后，再将GUI启动器压缩包，解压至<code>Counter-Strike Online 2</code>根目录下。然后，基本上就完成一大半了。正常的，这个时候你的游戏根目录下应该为这样：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs004.png" alt></p>
<h2 id="构建游戏"><a href="#构建游戏" class="headerlink" title="构建游戏"></a>构建游戏</h2><p>下一步我们要做的，就是让游戏跑起来！</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这一步是最开始的方法，但是也最复杂，不建议大家使用，请跳至下一步！</p>
<p>要运行服务器，您需要：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==">Node.js<i class="fa fa-external-link-alt"></i></span>（版本10或更高版本）;</li>
<li>搭建服务器，也就是我们下载的主服务器。</li>
</ul>
<p>然后，在服务器目录内的终端实例中，执行以下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --only &#x3D; production ＃安装所需的依赖项（最小依赖项） </span><br><span class="line">npm run start ＃启动预构建服务器</span><br></pre></td></tr></table></figure>

<p>默认情况下，服务器<strong>会询问您要侦听的网络接口</strong>。</p>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>下载源代码后，转到源代码目录中的终端实例，然后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install ＃安装所需的依赖项 </span><br><span class="line">npm run build ＃ builds服务器 </span><br><span class="line">npm run start ＃启动新服务器构建</span><br></pre></td></tr></table></figure>

<h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p>选项：</p>
<ul>
<li><code>-i, --ip-address [ip]</code>（<em>可选</em>）要侦听的IP地址（默认值：自动检测）</li>
<li><code>-p, --port-master [port]</code>（<em>可选</em>）服务器的（TCP）端口（默认值：30001）</li>
<li><code>-P, --port-holepunch [port]</code>（<em>可选</em>）服务器的打孔（UDP）端口（默认值：30002）</li>
<li><code>-l, --log-packets</code>（<em>可选</em>）记录传入和传出的数据包</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在开始之前，你必须允许launcher.exe在防火墙和端口转发端口27015到27020或打开路由器的NAT，以便与其他人一起玩。</p>
<p>如果您举办房间比赛，其他客户将知道您的IP。</p>
<p>如果您加入主持人的房间比赛，主人将知道您的IP。</p>
<p>一旦开发了专用服务器启动器，这可能在将来可以避免。</p>
<h4 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h4><p>基本上就是挂载到一个大服务器，然后玩家们进来。由配置和网络比较好的玩家开启房间当房主，然后其他人加入游戏。同时，房主卡，其他人跟着卡，房主推出房间，其他人也会掉。虽然目前只能这样，但是我觉得有得玩我就很高兴了😂</p>
<h4 id="对于启动器"><a href="#对于启动器" class="headerlink" title="对于启动器"></a>对于启动器</h4><ul>
<li><code>-lang [some language]</code>- 将游戏的语言设置为<em>某种语言</em>（考虑到您拥有语言文件）</li>
<li><code>-masterip [some ip]</code>- 将主服务器的IP地址设置为<em>某个IP</em></li>
<li><code>-masterport [some port]</code>- 将主服务器的端口号设置为<em>某个端口</em></li>
<li><code>-decryptedfiles</code> - 告诉游戏将每个游戏文件视为已解密</li>
<li><code>-enablecustom</code>- 允许在<code>custom</code>游戏文件的根目录中使用自定义目录</li>
<li><code>-username [your username]</code> - 指定登录用户名，以跳过登录屏幕。<strong>必须</strong>使用<code>-password</code></li>
<li><code>-password [your password]</code> - 指定登录密码，以跳过登录屏幕。<strong>必须</strong>使用<code>-username</code></li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>直接运行游戏根目录下的<code>PlayCSO2.exe</code>,如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs005.png" alt></p>
<p>然后点击游戏设定，分别如下面的图片所示，自己视情况设定选项：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs006.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs007.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="cso2/cs008.png" alt></p>
<p>然后点击保存，如果询问你是都要构建服务器之类的，或者是其它的，直接允许即可！然后根据你的网络情况，可以选择本地启动游戏，或者是连接到其它服务器加入游戏！开始游玩吧！</p>
<p>运行成功之后，会有cso2_launcher.ini，这个文件里面有登陆账号和密码，是你不联网的情况下，在本地使用的。</p>
<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p><del>这个其它方法嘛，就是各个搭建私服的工作组，给大家介绍的玩他们的私服的方法，略有不同，具体的自己去看看呢！</del>建议有条件玩外(私)服，国内的私服。。。</p>
<h2 id="再次鸣谢"><a href="#再次鸣谢" class="headerlink" title="再次鸣谢"></a>再次鸣谢</h2><p>感谢Ochii，主服务器GitHub👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL09jaGlpL2NzbzItbWFzdGVyLXNlcnZlcg==">地址<i class="fa fa-external-link-alt"></i></span>，客户端启动程序GitHub👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL09jaGlpL2NzbzItbGF1bmNoZXIv">地址<i class="fa fa-external-link-alt"></i></span>，感谢！均有MIT许可证许可！</p>
<p>感谢“I’m Not MentaL”大神的GUI启动器，他的👉<span class="exturl" data-url="aHR0cHM6Ly93d3cucGF0cmVvbi5jb20vcG9zdHMvY291bnRlci1zdHJpa2UtMi0yNDU5NzQ1Nj9mYmNsaWQ9SXdBUjI1VUJERXltMldoWWlzaFJjYkZVdFVEN1VSbTFaNHBoUU9sOUFzVUdzZTduRVJQMGRGT3kxRHdoZw==">Patreon<i class="fa fa-external-link-alt"></i></span>！感谢！</p>
<p>Counter-Strike Online2的👉<span class="exturl" data-url="aHR0cHM6Ly9jc29ubGluZTIubmV0Lw==">网站<i class="fa fa-external-link-alt"></i></span>，感谢！</p>
<p>Counter-Strike Online2的👉<span class="exturl" data-url="aHR0cHM6Ly9jc29ubGluZTIubmV0L2ZvcnVtLw==">论坛<i class="fa fa-external-link-alt"></i></span>，感谢！</p>
<p>感谢<del>你们</del>国外大神所做出的努力！</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><iframe width="680" height="360" src="https://www.youtube-nocookie.com/embed/4qsRxFNMuL0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>视频链接👉<span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS80cXNSeEZOTXVMMA==">https://youtu.be/4qsRxFNMuL0<i class="fa fa-external-link-alt"></i></span></p>
<p>有什么问题或建议，欢迎留言或者发邮箱。<del>这里没有商业合作，每一个团队需要宣传都欢迎联系我！</del>感谢无私帮助玩家们的开发者们，你们辛苦了！~~感谢国外的几个大神！</p>
]]></content>
      <categories>
        <category>CSO2</category>
      </categories>
      <tags>
        <tag>CSO2</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果教程</title>
    <url>/posts/2019/clover.html</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c001.png" alt></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这可能、应该、也许是我写的最后一篇黑苹果相关文章(至少在我买新电脑之前)，以后精力全部放在学习上，建议后来想要研究黑苹果的同学们早日弃坑，把时间放在更宝贵的事情上吧。经过一些调查，很多同学们装黑苹果的原因无非就是：折腾，当然也有其它的回答。但是，折腾的同时也确实可以学到很多东西。我想说的是，虽然黑苹果非常适合爱折腾的你，但是，折腾明白之后、或者是折腾不来，那么还是劝你早日退坑。。。</p>
<a id="more"></a>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c002.png" alt></p>
<h2 id="配置一览表"><a href="#配置一览表" class="headerlink" title="配置一览表"></a>配置一览表</h2><table>
<thead>
<tr>
<th>OMEN by HP Laptop 15-ce0xx</th>
<th>HP 暗影精灵3</th>
</tr>
</thead>
<tbody><tr>
<td>BIOS版本</td>
<td>F.18-11/09/2018</td>
</tr>
<tr>
<td>CPU</td>
<td>i7-7700HQ</td>
</tr>
<tr>
<td>显卡</td>
<td>nVidia GTX 1050</td>
</tr>
<tr>
<td>声卡</td>
<td>ALC295</td>
</tr>
<tr>
<td>硬盘</td>
<td>HP SSD EX950 512G、HGST 1T</td>
</tr>
</tbody></table>
<p>如果你的电脑和我同配置的话，EFI文件可以直接用我的安装使用，配置相仿的不可以直接使用，自己可以根据我的配置按需调整。但是请注意，我GitHub里的并不是完整的EFI，但是足够跟我同配置的同学安装使用了。</p>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>相关的文件我都在我的GitHub发布了，打不开或者下载不来的，自己多研究研究吧，一切随缘！！！（当然这个项目可能还不太完善，我会慢慢整理的，避免大家走弯路！当然，你有什么好资源，也可以让我上传，毕竟这是个开源项目！仅限于学习研究使用！），没错，为了方便大家下载，我把文件打包了，不打包有的小伙伴下载不来。👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlc3Njcm9mdC9IUC1PTUVOLTMtSGFja2ludG9zaA==">GitHub<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h3><ul>
<li>声卡正常，键盘可以调声音</li>
<li>摄像头正常</li>
<li>触摸板正常</li>
<li>睡眠和唤醒正常，合上盖子再打开也正常，我不知道白苹果是怎样的，但是我试了很多次，没发现问题。</li>
<li>电池正常</li>
<li>有线网卡正常</li>
<li>亮度正常，但是不能用键盘调整，在设置里面可以调整（我得再去爪巴帖子了😓</li>
<li>独显因为不能驱动，所以屏蔽</li>
<li>蓝牙</li>
<li>WiFi :(</li>
</ul>
<h3 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h3><p>HP的BIOS建议：</p>
<ul>
<li>关闭安全模式</li>
</ul>
<p>其它品牌建议还要：设置为AHCI模式</p>
<p>嗯~ o(<em>￣▽￣</em>)o，有空再写，不着急。。。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>在开始前，我们建议你准备一个最好大于8G的U盘、一台电脑(不熟练的人建议2台)、一个具有你Windows系统恢复介质的U盘(因为装黑苹果导致Windows挂掉的人不在少数)，一个用来备份的移动硬盘(如果你没有需要备份的文件请随意)。</p>
<ol>
<li>原版镜像，注意是原版的加工封装的OS镜像，带不带Clover引导无所谓，新手建议带上，那样就不用自己配置了！</li>
<li>U盘烧写工具，有很多，我用的TransMac，所以建议使用TransMac。</li>
<li>硬盘管理工具，这个当然是DG了！</li>
<li>EFI启动引导项管理工具，推荐EasyUEFI或者UEFIBCD。</li>
<li>强制性要求：主板必须支持UEFI，这篇文章是适用于UEFI启动的，如果不是的话，你看这篇文章也没意义。</li>
<li>硬盘为GPT格式。</li>
<li>给黑苹果的EFI分区一定要大于200M！！！</li>
</ol>
<h3 id="安装MacOS"><a href="#安装MacOS" class="headerlink" title="安装MacOS"></a>安装MacOS</h3><p>开机按F9进入<code>Boot Manager</code>引导管理，选择你制作的那个U盘，然后回车！</p>
<p>然后进入Clover主菜单</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c003.png" alt></p>
<p>移动光标到<code>Boot OS X Install from ***</code>回车,如果无法进入安装界面,需要打开啰嗦模式进行排错,不过新手可能看不懂，但是也要拍照，给知道的人帮忙看看。</p>
<h4 id="引导MacOS"><a href="#引导MacOS" class="headerlink" title="引导MacOS"></a>引导MacOS</h4><p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c004.png" alt></p>
<p>基本上就是图中的样子啦！稍等片刻。具体时间决定于你的配置，耐心等待一小会儿进入安装程序界面。</p>
<h4 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h4><p>建议选择简体中文哦！😋</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c005.png" alt></p>
<p>点击下一步，出现<code>macOS实用工具</code>界面,选择磁盘工具</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c006.png" alt></p>
<p>进入磁盘工具之后，选择<code>显示所有设备</code>:</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c007.png" alt></p>
<p>选择<code>你在Windows下事先创建好，准备给macos用的那个分区</code>,点击<code>抹掉</code>按钮,选择默认的<code>Mac OS扩展(日志型)</code>,将名称修改为<code>你自己喜欢的名字即可</code>,点击<code>抹掉</code>按钮。</p>
<p><strong>之前专门强调了备份了的啊！！！千万注意！！！</strong></p>
<p>如果这时候报错，是由于EFI分区尺寸小于200MB而引起的抹盘失败的错误，甚至可能会导致后面的安装失败！！！</p>
<h4 id="安装开始啦！"><a href="#安装开始啦！" class="headerlink" title="安装开始啦！"></a>安装开始啦！</h4><p>这个时候我们选择希望，哦不，是选择安装macOS</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c008.png" alt></p>
<p>进入安装界面</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c009.png" alt></p>
<p>下一步</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c010.png" alt></p>
<p>选择继续，然后选择你才格式化了的硬盘。</p>
<p>在这期间,它会把USB安装盘上的安装文件预复制到要安装的系统分区里,这个过程在HP暗影精灵3上它跑得飞快(我放在固态上了),数据复制完后,它会自动重启</p>
<p>其实我感觉安装，和安装完了的设置，压根没必要写啥教程，因为你能进入这个界面的话，说明你的能力足够你一个人完成。</p>
<h4 id="设置向导"><a href="#设置向导" class="headerlink" title="设置向导"></a>设置向导</h4><p>不多说废话了，也不放图，简单粗暴的列几条建议：</p>
<ul>
<li>首先会让你选择国家，在这一步我选择中国！</li>
<li>设置键盘，根据自己的习惯选择</li>
<li>如果是新安装，建议不传输信息到这台Mac</li>
<li>数据恢复，嗯，跳过吧</li>
<li>Apple ID登录，建议进入系统后再登录</li>
<li>创建用户，这一步很简单</li>
<li>反正有啥要你同步的一律先不干，也不要连接到互联网，建议进入系统后再慢慢设置。</li>
</ul>
<h3 id="安装完成后"><a href="#安装完成后" class="headerlink" title="安装完成后"></a>安装完成后</h3><p>千万别以为这样就完事儿了，Windows安装完之后都还需要联网安装更新呢，后面更艰巨的任务在等着你，小老弟🤣</p>
<h4 id="挂载EFI分区"><a href="#挂载EFI分区" class="headerlink" title="挂载EFI分区"></a>挂载EFI分区</h4><p>首先你肯定得把你U盘里的EFI文件弄到电脑上的EFI分区里去，如果你不愿意干这一步，那么你每次启动MacOS都将插上U盘。虽然我有一段时间这么干过，因为我觉得不插上U盘的时候，感觉MacOS系统就不存在了一样，要用的时候直接插上U盘即可！如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让<code>diskutil</code>登场了。</p>
<p>查看磁盘分区表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure>

<p>挂载磁盘EFI分区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo diskutil mount &lt;这里填你的分区，比如：disk0s1，具体的查看你的磁盘分区表&gt;</span><br></pre></td></tr></table></figure>

<p>挂载U盘EFI分区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo diskutil mount &lt;这里填你的分区，比如：disk0s1，具体的查看你的磁盘分区表&gt;</span><br></pre></td></tr></table></figure>

<p>打开Finder，注意后面有个<code>.</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure>

<p>左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。</p>
<h4 id="合并EFI分区"><a href="#合并EFI分区" class="headerlink" title="合并EFI分区"></a>合并EFI分区</h4><p><strong>这里有一点需要注意</strong>:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是<strong>合并</strong>的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows.</p>
<h4 id="复制EFI分区"><a href="#复制EFI分区" class="headerlink" title="复制EFI分区"></a>复制EFI分区</h4><p>如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里.</p>
<h4 id="Windows下的骚操作"><a href="#Windows下的骚操作" class="headerlink" title="Windows下的骚操作"></a>Windows下的骚操作</h4><h5 id="挂载EFI分区-1"><a href="#挂载EFI分区-1" class="headerlink" title="挂载EFI分区"></a>挂载EFI分区</h5><p>Windows操作系统下面,打开<code>cmd</code>窗口,输入命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk           # 磁盘列表</span><br><span class="line">select disk n       # 选择EFI分区所在的磁盘，n为磁盘号</span><br><span class="line">list partition      # 磁盘分区列表</span><br><span class="line">select partition n  # 选择EFI分区，n为EFI分区号</span><br><span class="line">set id&#x3D;&quot;ebd0a0a2-b9e5-4433-87c0-68b6b72699c7&quot;	# 设置为EFI分区</span><br><span class="line">assign letter&#x3D;X     # x为EFI分区盘符</span><br></pre></td></tr></table></figure>

<p>您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区<br>打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下。</p>
<h5 id="合并EFI分区-1"><a href="#合并EFI分区-1" class="headerlink" title="合并EFI分区"></a>合并EFI分区</h5><p><strong>这里有一点需要注意</strong>:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是<strong>合并</strong>的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows.</p>
<h5 id="复制EFI分区-1"><a href="#复制EFI分区-1" class="headerlink" title="复制EFI分区"></a>复制EFI分区</h5><p>如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里.</p>
<h5 id="利用EasyUEFI来挂载"><a href="#利用EasyUEFI来挂载" class="headerlink" title="利用EasyUEFI来挂载"></a>利用EasyUEFI来挂载</h5><p>什么?看不懂这些指令，怕出错？我懂你！你可以在Windows系统下利用诸如EasyUEFI等工具来操作。</p>
<p>我们打开下载好的diskgenius工具</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c011.png" alt></p>
<p>EFI分区的文件一般是这样的</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c012.png" alt></p>
<p>打开EsayUEFI，点击中间的绿色加号，进入添加引导项的页面，选择”Linux或其它操作系统”，并且在Description这一项写入这个引导项的名字(名字可以随便乱取，但是别忘记！)。然后在下面的硬盘选择区域选择一个你自己新建的ESP分区，然后点击下方的Browse浏览文件。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c013.png" alt></p>
<p>然后选择自己配置好的EFI中的<strong>CLOVERx64.efi</strong>这个文件以完成添加。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c014.png" alt></p>
<p>然后回到工具的首页，将该引导项置顶(置不置顶看你自己选择了，想要开机可以选择双系统就置顶，想要开机直接进入Windows，就放在Windows Boot Manager后面)</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="clover/c015.png" alt></p>
<p>到这里就大功告成啦！</p>
<h5 id="EasyUEFI报错"><a href="#EasyUEFI报错" class="headerlink" title="EasyUEFI报错"></a>EasyUEFI报错</h5><ul>
<li>这个可能是因为BIOS设置问题，如果加了BIOS密码，会报这个错误。还有可能就是EFI分区没有正常挂载的原因。遇到这个问题，有的时候照样能够添加进去引导项，但是无法移动引导项的顺序。这样的话，你可以先添加，再进入BIOS设置引导顺序，或者是直接在BIOS里面添加启动项。如果EasyUEFI完全没有作用，你可以尝试进入PE卸载ESP分区重新启动或是先备份系统的EFI分区，然后使用DG将原本的EFI分区删除，重建以后重启即可。</li>
<li>可能是当前版本的EasyUEFI出现了问题、或者是你下的有问题、或者是当前版本与你的电脑不兼容</li>
</ul>
<h5 id="利用BOOTICE"><a href="#利用BOOTICE" class="headerlink" title="利用BOOTICE"></a>利用BOOTICE</h5><ol>
<li>打开BOOTICE软件,选择<code>物理磁盘</code>,选择欲操作的目标磁盘,点击<code>分区管理</code>,弹出分区管理的窗口,点击<code>分配盘符</code>,为<code>ESP</code>分区分配一个盘符,点击确定</li>
<li>选择<code>UEFI</code>,点击<code>修改启动序列</code>,点击<code>添加</code>按钮,菜单标题填写:<code>CLOVER</code>,选择<code>启动文件</code>,在打开的窗口里选择<code>ESP</code>分区下的目录<code>\EFI\CLOVER\CLOVERX64.EFI</code>,点击<code>保存当前启动项设置</code></li>
</ol>
<h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p>迅雷离线下载：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmR0b3BzLmNjL2lzby9NYWNPUy9kYWxpYW5za3lfbWFjb3MvbWFjT1MlMjBNb2phdmUlMjAxMC4xNC4zJTI4MThENDIlMjklMjBJbnN0YWxsZXIlMjB3aXRoJTIwQ2xvdmVyJTIwNDg1OS5kbWc=">点击下载<i class="fa fa-external-link-alt"></i></span>感谢<code>@难忘情怀</code>提供下载资源</p>
<p>http下载链接：<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmR0b3BzLmNjL2lzby9NYWNPUy9kYWxpYW5za3lfbWFjb3Mv">点击下载<i class="fa fa-external-link-alt"></i></span>感谢<code>@难忘情怀</code>提供下载资源</p>
<p>百度网盘：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW1FcVFLbV9rbGFTT0I1S2hxcG9iUUE=">点击链接<i class="fa fa-external-link-alt"></i></span> 接头暗号：s68r<br>MD5 (macOS Mojave 10.14.3(18D42) Installer with Clover 4859.dmg) = 450c55e5c5d3f4bfae6bb55ff2a33aea</p>
<h3 id="EFI下载-更新"><a href="#EFI下载-更新" class="headerlink" title="EFI下载/更新"></a>EFI下载/更新</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlc3Njcm9mdC9IYWNraW50b3NoQ2xvdmVy">点击这里<i class="fa fa-external-link-alt"></i></span>进入魔法门</p>
<h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p><code>@原味菠萝</code> <code>@黑果小兵</code> 为本教程提供的的大力支持！</p>
<h2 id="暂时先写这么多，学业繁忙！"><a href="#暂时先写这么多，学业繁忙！" class="headerlink" title="暂时先写这么多，学业繁忙！"></a>暂时先写这么多，学业繁忙！</h2>]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>暗影精灵</tag>
      </tags>
  </entry>
  <entry>
    <title>炫酷的主页</title>
    <url>/posts/2019/diy.html</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="diy/diy001.png" alt></p>
<p>周末放假回家，给自己的<code>Hexo</code>博客自定义了一个首页，看起来炫酷多了。实现简单，操作步骤稍微繁琐了一点，因为涉及到要修改的东西太多了。需要一点<code>HTML</code>和<code>css</code>基础，主要就是。。。算了，干啥都要时间，直接进入正题！</p>
<a id="more"></a>

<p><strong>zhuimeng.online域名没有续费，本文基本已作废</strong></p>
<h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><p>首先，我们看到博客名字后面的渐变色块，就是用的最基础的css渐变动画做的效果。其实我本来想用<code>Google</code>的<span class="exturl" data-url="aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24v">Material Design<i class="fa fa-external-link-alt"></i></span>做一个响应式的，奈何水平不够，设计这一块儿，真玩不来。</p>
<p>头像本来是个方块图，用PPT修成圆形的，然后放了上去。下面的四个图标，用的是阿里巴巴矢量图标库—<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v">Iconfont<i class="fa fa-external-link-alt"></i></span>的图标，侵权请联系我删除！然后最下面就是固定的版权信息，最后就是背景动画！</p>
<h2 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h2><p>背景用的是已经造好的轮子，基于<code>JavaScript</code>开发的。原作者在👍<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0plcmVtYm9vL2FuaW1hdGVkLW1lc2gtbGluZXM=">GitHub<i class="fa fa-external-link-alt"></i></span>开源了，大家喜欢可以star支持一下！<strong>这里我就想吐槽一下了，国内很多模板资源站之类的网站，拿人家辛辛苦苦写的代码，假装是自己的卖钱。知道最可耻的是什么吗？这种人还好意思说请尊重劳动成果！！！</strong></p>
<p>我基于现成的轮子，成功的让车驱动起来了，感兴趣的大家可以看看！我也放到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlc3N5amwvYmVzc2Nyb2Z0LmdpdGh1Yi5pbw==">GitHub<i class="fa fa-external-link-alt"></i></span>上去了！你可以直接去下载，或者用一下指令<code>clone</code>到本地。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;bessyjl&#x2F;besscroft.github.io.git</span><br></pre></td></tr></table></figure>

<p>如果你觉得不错的话，可以按照我的模板修改成你自己的并使用它，我没啥要求，给个Star可以吗😘</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>1.先去<code>GitHub</code>创建一个<code>repo</code>，名字就用<code>blog</code>就行。</p>
<p>2.要修改<code>hexo</code>博客的生成目录信息，打开根目录下的配置文件：</p>
<figure class="highlight diff"><figcaption><span>文件位置:\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">-url: http://www.zhuimeng.online</span></span><br><span class="line"><span class="deletion">-root: /</span></span><br><span class="line"><span class="addition">+url: http://www.zhuimeng.online/blog      # url后需要加：/刚才创建的仓库名</span></span><br><span class="line"><span class="addition">+root: /blog/                              # root修改为：/刚才创建的仓库名/</span></span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line"><span class="deletion">- repo: git@github.com:besscroft/besscroft.github.io</span></span><br><span class="line"><span class="addition">+ repo: git@github.com:besscroft/blog.git         # 修改为新建的仓库地址</span></span><br><span class="line">  barnch: master</span><br></pre></td></tr></table></figure>

<p>3.重新部署</p>
<p>这个时候，删掉原来的<code>CNAME</code>文件，不然会解析失败，记得在别的地方备份一份，等会还要用。然后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<p>这时候我们去刚才创建的<code>repo</code>去看，已经好了:</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="diy/diy002.png" alt></p>
<p>4.上传自定义首页</p>
<p>这时候，我们先<code>clone</code>一份原来的<code>repo</code>的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;besscroft&#x2F;besscroft.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后删除所有的文件，只留下<code>CNAME</code>文件，当然<code>README.md</code>文件也可以留下。复制我们已经写好的自定义首页的相关文件到这个本地仓库的文件夹，然后老规矩：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;update index&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>然后再访问我们原来的域名<span class="exturl" data-url="aHR0cDovL3d3dy56aHVpbWVuZy5vbmxpbmU=">http://www.zhuimeng.online<i class="fa fa-external-link-alt"></i></span>，发现已经成功了。然后博客地址变成了<span class="exturl" data-url="aHR0cDovL3d3dy56aHVpbWVuZy5vbmxpbmUvYmxvZw==">http://www.zhuimeng.online/blog<i class="fa fa-external-link-alt"></i></span>。</p>
<h2 id="自定义文件"><a href="#自定义文件" class="headerlink" title="自定义文件"></a>自定义文件</h2><p>在博客自定义首页文件<code>index.html</code>中，我们需要把跳转链接到<span class="exturl" data-url="aHR0cDovL3d3dy56aHVpbWVuZy5vbmxpbmUvYmxvZw==">http://www.zhuimeng.online/blog<i class="fa fa-external-link-alt"></i></span>，不然就没地方访问你的博客了，因为别人并不知道要访问<code>/blog</code>路径。</p>
<p>我用的如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--标题--&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;title_bess&quot;&gt;</span><br><span class="line">		&lt;h1 class&#x3D;&quot;h1_bess&quot;&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.zhuimeng.online&#x2F;blog&quot;&gt;Bess&#39;s Blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;	</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;!--社交图标--&gt;</span><br><span class="line">		&lt;!--博客--&gt;</span><br><span class="line">	&lt;div class&#x3D;&quot;go_bess_blog&quot;&gt;</span><br><span class="line">		&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.zhuimeng.online&#x2F;blog&quot;&gt;&lt;img src&#x3D;&quot;images&#x2F;blogger.png&quot; alt&#x3D;&quot;Blog&quot; &#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="最痛苦的步骤"><a href="#最痛苦的步骤" class="headerlink" title="最痛苦的步骤"></a>最痛苦的步骤</h2><p>你以为这样就结束了？你难道没发现访问自己的博客，一大堆的报错？</p>
<div class="note warning"><p>你需要把hexo调用的每一个资源文件的路径前面加上/blog，否则就会导致无法调用，然后很多效果加载不出来。</p></div>

<p>重点不是这，是你根本不知道是哪些，在哪里。只能跟着报错信息去找，我大部分已经找到了，并改正了路径，但是还是有部分找不到了(懒癌)，反正已经不影响博客体验，我也就不管它了，哈哈哈😂</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的博客Duang</title>
    <url>/posts/2019/duang.html</url>
    <content><![CDATA[<p>来过我博客的小可爱们应该会知道，五一期间我把博客重新弄了一遍。如果大家之前就来过我的博客的话，应该会知道，现在的美观程度和特效，是之前远无法比拟的！那么我们来看看，这些特效是怎么Duang上去的呢😜</p>
<a id="more"></a>

<h3 id="添加结束标记"><a href="#添加结束标记" class="headerlink" title="添加结束标记"></a>添加结束标记</h3><p>在文末添加自定义的结束标记，效果如下：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="duang/duang01.png" alt></p>
<p>新建布局模板文件 post-end-tag.swig，添加如下代码：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\layout\_macro\post-end-tag.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &lt;div style&#x3D;&quot;text-align:center;color:#bfbfbf;font-size:16px;&quot;&gt;</span><br><span class="line">      &lt;span&gt;-------- 本文结束 &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-&#123;&#123; config.post_end_tag.icon &#125;&#125;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span&gt; 感谢阅读 --------&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在文章布局模板中添加如下代码：</p>
<figure class="highlight diff"><figcaption><span>文件位置:themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+&#123;% if config.post_end_tag.enabled and not is_index %&#125;</span></span><br><span class="line"><span class="addition">+	&lt;div&gt;</span></span><br><span class="line"><span class="addition">+		&#123;% include 'post-end-tag.swig' %&#125;</span></span><br><span class="line"><span class="addition">+	&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+&#123;% endif %&#125;</span></span><br><span class="line">	</span><br><span class="line"> &#123;% if theme.wechat_subscriber.enable and not is_index %&#125;</span><br><span class="line">   &#123;% include '../_partials/post/wechat-subscriber.swig' %&#125;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在站点配置文件末尾添加如下代码：</p>
<figure class="highlight plain"><figcaption><span>文件位置:_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">post_end_tag:</span><br><span class="line">  enabled: true  # 是否开启文末的本文结束标记</span><br><span class="line">  icon: paw # 结束标记之间的图标</span><br></pre></td></tr></table></figure>

<p>重新推送后即可在文末看到结束标记。</p>
<h3 id="为标签添加图标"><a href="#为标签添加图标" class="headerlink" title="为标签添加图标"></a>为标签添加图标</h3><p>默认情况下标签前缀是 <code>#</code> 字符，大家其实可以通过修改主题源码，将标签的字符前缀改为图标前缀，更改后效果如下：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="duang/duang02.png" alt></p>
<p>在文章布局模板中找到文末标签相关代码段，将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tags&quot;&gt;&lt;/i&gt;</code> 即可：</p>
<figure class="highlight diff"><figcaption><span>文件位置:themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">  &lt;footer class="post-footer"&gt;</span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">      &lt;div class="post-tags"&gt;</span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line"><span class="deletion">-         &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+         &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tags"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/footer&gt;</span><br></pre></td></tr></table></figure>

<h3 id="侧边栏放左边"><a href="#侧边栏放左边" class="headerlink" title="侧边栏放左边"></a>侧边栏放左边</h3><p>侧边栏默认是在右边的，我怎么都看不习惯，总感觉有点别扭。那么，给整到左边就完事儿啦！</p>
<p>在自定义样式文件中添加如下规则：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;侧边栏放在左边</span><br><span class="line">.sidebar-toggle &#123;</span><br><span class="line">  left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  left: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改动效脚本代码：</p>
<figure class="highlight diff"><figcaption><span>文件位置:themes\next\source\js\motion.js</span></figcaption><table><tr><td class="code"><pre><span class="line">$(document)</span><br><span class="line">  .on('sidebar.isShowing', function() &#123;</span><br><span class="line">    NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(</span><br><span class="line"><span class="deletion">-     &#123;paddingRight: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line"><span class="addition">+     &#123;paddingLeft: SIDEBAR_WIDTH&#125;,</span></span><br><span class="line">      SIDEBAR_DISPLAY_DURATION</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .on('sidebar.isHiding', function() &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  hideSidebar: function() &#123;</span><br><span class="line"><span class="deletion">-   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingRight: 0&#125;);</span></span><br><span class="line"><span class="addition">+   NexT.utils.isDesktop() &amp;&amp; $('body').velocity('stop').velocity(&#123;paddingLeft: 0&#125;);</span></span><br><span class="line">    this.sidebarEl.find('.motion-element').velocity('stop').css('display', 'none');</span><br><span class="line">    this.sidebarEl.velocity('stop').velocity(&#123;width: 0&#125;, &#123;display: 'none'&#125;);</span><br><span class="line"></span><br><span class="line">    sidebarToggleLines.init();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话就可以将侧边栏放置在左边了，但是当窗口宽度缩小到 991px 之后会出现样式错误，侧边栏收缩消失但是页面左侧仍有留白间距，此时修改如下代码即可：</p>
<figure class="highlight diff"><figcaption><span>文件位置:themes\next\source\css\_common\scaffolding\base.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative; // Required by scrollspy</span><br><span class="line">  font-family: $font-family-base;</span><br><span class="line">  font-size: $font-size-base;</span><br><span class="line">  line-height: $line-height-base;</span><br><span class="line">  color: $text-color;</span><br><span class="line">  background: $body-bg-color;</span><br><span class="line"><span class="deletion">- -tablet-mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line"><span class="addition">+ +tablet-mobile() &#123; padding-right: 0 !important; &#125;</span></span><br><span class="line">  +desktop-large() &#123; font-size: $font-size-large; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块边缘摆动效果"><a href="#模块边缘摆动效果" class="headerlink" title="模块边缘摆动效果"></a>模块边缘摆动效果</h3><p>这事就要从<span class="exturl" data-url="aHR0cHM6Ly93d3cub2ZpbmQuY24v">猪猪侠的博客<i class="fa fa-external-link-alt"></i></span>说起了，也要和GitHub扯上关系了！！！也参考了<span class="exturl" data-url="aHR0cDovL3llYXJpdG8uY24v">Yearito’s Blog<i class="fa fa-external-link-alt"></i></span>的博客。当然，完全照搬是行不通的，毕竟主题版本不同，稍有差距，我得按照自己实际的改才行！目前是NexT7.1.0，到我写这篇文章的时候还是最新的(好像)也就是说，这不是挺好的么😀</p>
<p>说白了，只要有了js文件，再你主题怎么变化，万变不离其宗，稍作修改，总是能把特效添加上去的，Duang~</p>
<p>点击下方按钮下载脚本，并放到 themes\next\source\js\ 目录下：</p>
<p><a id="download" href="https://mirrors.52bess.com/blog/js/wobblewindow.js" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p>
<p>在主题自定义布局文件中添加以下代码：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# wobble窗口摆动特效 #&#125;</span><br><span class="line">&#123;% if theme.wobble.enable %&#125;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;js&#x2F;wobblewindow.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;只在桌面版网页启用特效</span><br><span class="line">    if( window.innerWidth &gt; 768  )&#123;</span><br><span class="line">      $(document).ready(function () &#123;</span><br><span class="line">        &#123;% if theme.wobble.header %&#125;</span><br><span class="line">          $(&#39;#header&#39;).wobbleWindow(&#123;</span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line">            movementTop: false,</span><br><span class="line">            movementLeft: false,</span><br><span class="line">            movementRight: false,</span><br><span class="line">            debug: false,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.sidebar %&#125;</span><br><span class="line">          $(&#39;#sidebar&#39;).wobbleWindow(&#123;</span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line">            movementLeft: false,</span><br><span class="line">            movementTop: false,</span><br><span class="line">            movementBottom: false,</span><br><span class="line">            position: &#39;fixed&#39;,</span><br><span class="line">            debug: false,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">        &#123;% if theme.wobble.footer %&#125;</span><br><span class="line">          $(&#39;#footer&#39;).wobbleWindow(&#123;</span><br><span class="line">            radius: &#123;&#123; theme.wobble.radius &#125;&#125;,</span><br><span class="line">            movementBottom: false,</span><br><span class="line">            movementLeft: false,</span><br><span class="line">            movementRight: false,</span><br><span class="line">            position: &#39;absolute&#39;,</span><br><span class="line">            debug: false,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在自定义样式文件中添加以下样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;窗口波动效果相关样式</span><br><span class="line">if hexo-config(&#39;wobble&#39;)  &#123;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    box-shadow: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .wobbleTransparentBK&#123;</span><br><span class="line">    background-color: rgba(0,0,0,0) !important;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .wobbleTransparentLine&#123;</span><br><span class="line">    border-color: rgba(0,0,0,0) !important;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;Next.Muse中为Header和Footer添加背景色</span><br><span class="line">  .header, .footer &#123;</span><br><span class="line">    background-color: rgb(245, 245, 245);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;防止sidebar和footer同时开启动效时堆叠异常</span><br><span class="line">  .sidebar, .header &#123;</span><br><span class="line">    z-index: 1 !important;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;防止挡住页末文章的阅读全文按钮</span><br><span class="line">  .main &#123;</span><br><span class="line">    padding-bottom: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>Next.Muse 主题方案中 Header 和 Footer 是没有背景色的，所以需要添加背景色后才能看出边缘摆动效果。另外，实现边缘摆动效果所需的 z-index 属性可能会导致元素堆叠异常，需要添加以上样式来矫正。</p></div>

<p>在主题配置文件中添加以下代码：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># window woblle</span><br><span class="line">wobble:</span><br><span class="line">  enable: true  # 是否开启边缘波动效果</span><br><span class="line">  radius: 50  # 波动半径</span><br><span class="line">  sidebar: true  # 开启侧边栏边缘摆动</span><br><span class="line">  header: true  # 开启头部边缘摆动</span><br><span class="line">  footer: true  # 开启脚部边缘摆动</span><br></pre></td></tr></table></figure>

<p>如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入。</p>
<h3 id="个性化回到顶部"><a href="#个性化回到顶部" class="headerlink" title="个性化回到顶部"></a>个性化回到顶部</h3><p>参考 <span class="exturl" data-url="aHR0cHM6Ly9kaXlnb2QubWUv">DIYgod 的博客<i class="fa fa-external-link-alt"></i></span> 里的特效，原理很简单：将 back-to-top 按钮添加图片背景，并添加 CSS3 动效即可。</p>
<p>首先，找到自己喜欢的图片素材放到 source\images\ 目录下：</p>
<p>或者：链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUowZEpPYTJvV0Z3TlI4cHZHNnZCRlE=">https://pan.baidu.com/s/1J0dJOa2oWFwNR8pvG6vBFQ<i class="fa fa-external-link-alt"></i></span> 提取码：lstv </p>
<p>然后在自定义样式文件中添加如下代码：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;自定义回到顶部样式</span><br><span class="line">.back-to-top &#123;</span><br><span class="line">  right: 60px;</span><br><span class="line">  width: 70px;  &#x2F;&#x2F;图片素材宽度</span><br><span class="line">  height: 900px;  &#x2F;&#x2F;图片素材高度</span><br><span class="line">  top: -900px;</span><br><span class="line">  bottom: unset;</span><br><span class="line">  transition: all .5s ease-in-out;</span><br><span class="line">  background: url(&quot;&#x2F;images&#x2F;scroll.png&quot;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;隐藏箭头图标</span><br><span class="line">  &gt; i &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.back-to-top-on &#123;</span><br><span class="line">    bottom: unset;</span><br><span class="line">    top: 100vh &lt; (900px + 200px) ? calc( 100vh - 900px - 200px ) : 0px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刷新浏览器即可预览效果。</p>
<h3 id="豆瓣页面"><a href="#豆瓣页面" class="headerlink" title="豆瓣页面"></a>豆瓣页面</h3><p>为站点添加豆瓣阅读 / 电影 / 游戏页面，效果参考博客中的豆瓣页面！</p>
<div class="note primary"><p>具体是怎么实现的，可以参考GitHub上的一个开源项目，这个项目的创意是真的很不错！<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215dGhzbWFuL2hleG8tZG91YmFu">Hexo—Douban<i class="fa fa-external-link-alt"></i></span></p></div>

<p>首先，在根目录下执行以下命令安装相关依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>

<p>然后，在站点配置文件中添加以下内容：</p>
<figure class="highlight plain"><figcaption><span>文件位置:_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user:  # 个人豆瓣ID</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line">    title: &#39;This is my book title&#39;</span><br><span class="line">    quote: &#39;This is my book quote&#39;</span><br><span class="line">  movie:</span><br><span class="line">    title: &#39;This is my movie title&#39;</span><br><span class="line">    quote: &#39;This is my movie quote&#39;</span><br><span class="line">  game:</span><br><span class="line">    title: &#39;This is my game title&#39;</span><br><span class="line">    quote: &#39;This is my game quote&#39;</span><br><span class="line">  timeout: 10000</span><br></pre></td></tr></table></figure>

<div class="note info"><p>user: 填写豆瓣 ID。登陆豆瓣后点击个人主页，此时 url 中最后一段即是用户 ID，一般情况下会是一段数字，如果设置了个人域名的话，则个人域名即为 ID。</p></div>

<ul>
<li>builtin: 是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中。</li>
<li>timeout: 爬取数据的超时时间。<div class="note warning"><p>如果只想生成某一个页面（比如只生成读书页面），把其他的配置项注释掉即可。</p></div>

</li>
</ul>
<p>在主题配置文件中新增菜单入口：</p>
<figure class="highlight plain"><figcaption><span>文件位置:themes\next\_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  books: &#x2F;books&#x2F; || book  </span><br><span class="line">  movies: &#x2F;movies&#x2F; || video-camera  </span><br><span class="line">  games: &#x2F;games&#x2F; || gamepad</span><br></pre></td></tr></table></figure>

<p>在语言包中新增菜单中文：</p>
<figure class="highlight diff"><figcaption><span>文件位置:themes\next\language\zh_CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">  menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line"><span class="addition">+   movies: 电影</span></span><br><span class="line"><span class="addition">+   books: 读书</span></span><br><span class="line"><span class="addition">+   games: 游戏</span></span><br></pre></td></tr></table></figure>

<p>然后在根目录下执行以下命令生成豆瓣阅读 / 电影 / 游戏页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo douban</span><br></pre></td></tr></table></figure>

<p>可选参数:</p>
<ul>
<li>-b | –books: 只生成豆瓣读书页面</li>
<li>-m | –movies: 只生成豆瓣电影页面</li>
<li>-g | –games: 只生成豆瓣游戏页面</li>
</ul>
<p>执行命令后，插件会根据用户提供的 ID 爬取豆瓣中的数据信息并在 <code>public</code> 目录下生成对应的页面，当服务器启动或部署后会将页面显示在对应的菜单路由下。</p>
<div class="note warning"><p>通常大家都喜欢用 hexo d 来作为 hexo deploy 命令的简化，但是当安装了 hexo douban 之后， hexo d 就会有歧义而无法执行，因为 hexo douban 跟 hexo deploy 的 Alias 都是 hexo d。</p></div>

<h2 id="😅今天就先写到这儿吧！"><a href="#😅今天就先写到这儿吧！" class="headerlink" title="😅今天就先写到这儿吧！"></a>😅今天就先写到这儿吧！</h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git本地文件到GitHub仓库</title>
    <url>/posts/2019/gitgo.html</url>
    <content><![CDATA[<p>这是一个简单使用的教程，如果你刚接触<code>git</code>和<code>GitHub</code>，那么，这篇文章再适合你不过了！首先，没有接触过版本控制概念的同学们也可以轻松入门；其次，通过这篇博文，你将学会本地构建仓库、远程克隆仓库、上传本地仓库等魔法操作(语言上可能组织不太好😅)，值得你一看。</p>
<a id="more"></a>

<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>首先，我们得弄清楚工作区和暂存区的是怎么回事，不然当你看到这些文件夹，可能一脸问号。</p>
<h4 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h4><p>工作区（Working Directory）,是一个你在电脑里能够看到的目录，存放的就是你的本地文件，一般指的是你的仓库根目录下。</p>
<h4 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h4><p>版本库（Repository），在你的工作区，细心的小伙伴可能会发现，有一个隐藏的目录，名叫<code>.git</code>,这个就是我们常说的版本库了。版本库里面存放了很多东西，其中最重要的是称为<code>stage</code>的暂存区(或者叫<code>index</code>)和git为我们创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个叫<code>HEAD</code>的指针。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h4><p>首先，我们得将电脑和GitHub账号进行绑定才行，打开GIt Bash，输入以下命令（用户和邮箱为你GitHub注册的账号和邮箱）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;github用户名称&quot;</span><br><span class="line">$ git config --global user.email &quot;github注册时的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>比如我这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;besscroft&quot;</span><br><span class="line">$ git config --global user.email &quot;631908942@qq.com&quot;</span><br></pre></td></tr></table></figure>

<h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><p>首先创建一下自己的SSH Key。如果已经有了请跳过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;github注册时的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后可能要按下几次回车，具体几次我也没数，默认就行了，如果你觉得有必要，可以自己设置密码。如果一切顺利的话，你可以在你的系统用户主目录里找到<code>.ssh</code>目录，一般路径为：<code>C:\Users\这里是你的计算机用户名啦\.ssh</code>，然后里面会有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，你告诉别人也没事儿。</p>
<p>你甚至能自己检查一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;,ssh</span><br><span class="line">$ ls    &#x2F;&#x2F;这个s前面的是lmn的l，不同字体下显示很容易看错成i的大写或者数字1</span><br></pre></td></tr></table></figure>

<h4 id="添加SHH-Key"><a href="#添加SHH-Key" class="headerlink" title="添加SHH Key"></a>添加SHH Key</h4><p>然后我们需要去GitHub添加<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvZ2luP3JldHVybl90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZzZXR0aW5ncyUyRmtleXM=">SSH Key<i class="fa fa-external-link-alt"></i></span>，如果左边的链接挂掉了，直接去你自己的GitHub页面打开设置，找到<code>SSH and GPG keys</code>,然后<code>New SSH key</code>,然后将<code>id_rsa.pub</code>文件的所有内容拷贝到<code>Add key</code>的框框里面。</p>
<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>我们假设你现在要折腾一个新的项目，那么，你可以先去GitHub新建好仓库，或者现在本地把项目做一点、甚至做完，然后再上传都可以。但是，最终我们肯定是要让GitHub上的仓库和本地的仓库进行同步的。这样子你的GitHub即成为了网盘、也可以跟他人一起来协作，真香。</p>
<p>首先要确保远程和本地的仓库名字一样，再GitHub上创建新仓库之后，这个仓库肯定是空的。在下面会有GitHub的提示，然后在本地仓库下运行如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br></pre></td></tr></table></figure>

<p>如果不小心关联了别人的仓库，不要紧，反正你是推送不上去的🤣，因为他人的账户中没有你的<code>SSH key</code>公钥。关联之后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库的啦！</p>
<h4 id="上传README文件"><a href="#上传README文件" class="headerlink" title="上传README文件"></a>上传README文件</h4><p>如果在创建 <code>Github</code> 仓库时没有勾选创建 <code>README.md</code> 文件，则要先创建 <code>README.md</code> 文件，不然上传文件会报错。如果已经勾选，可以跳过此步骤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ touch README.md</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m &#39;first_commit&#39;</span><br><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<h4 id="推送到远程库"><a href="#推送到远程库" class="headerlink" title="推送到远程库"></a>推送到远程库</h4><p>我们输入以下指令，把本地库的所有内容推送到远程库上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">$ git push -u origin master  &#x2F;&#x2F;如果你是第一次，可以用这个</span><br></pre></td></tr></table></figure>

<p>我们知道，把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以不用这样啦！</p>
<p>也就是说，从第二次起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>那么，把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！开始你的创造吧！</p>
<h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>假设我们这时候买了台新电脑，或者是把电脑重置了，那么最好的方式就是从远程库克隆。我们现在本地创建仓库，注意本地仓库的名字要跟远程一样哦。然后再本地仓库根目录下，输入如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>初始化完毕后，我们要跟踪项目文件夹中的所有文件和文件夹，也就是将文件添加到暂存区，输入以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<p>需要注意的是，“ . ”的意思是文件夹下的所有文件。这时候我们本地仓库是没有东西的，那么：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure>

<p>获取远程库与本地同步合并，你可以理解为将远程仓库克隆下来。或者是使用以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br></pre></td></tr></table></figure>

<h4 id="推送到远程库基本步骤"><a href="#推送到远程库基本步骤" class="headerlink" title="推送到远程库基本步骤"></a>推送到远程库基本步骤</h4><p>每次将本地仓库推送到GitHub时，需要先将文件添加到暂存区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure>

<p>然后附上提交说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;引号之间存放提交说明&quot;</span><br></pre></td></tr></table></figure>

<p>这是为了告诉git ，把文件提交到仓库。</p>
<p>关联远程仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br></pre></td></tr></table></figure>

<p>如果这一步你的关联出现错误的话<code>fatal: remote origin already exists</code>，那么可以执行以下语句进行关联：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>

<p>然后再次执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github仓库名称&gt;.git</span><br></pre></td></tr></table></figure>

<p>然后我们再把本地仓库推送上去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>如果在推送时出现错误 <code>error:failed to push som refs to.......</code>，则执行下列语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>

<p>将远程仓库 <code>Github</code> 上的文件拉下来合并之后重新推送上去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="更改username"><a href="#更改username" class="headerlink" title="更改username"></a>更改username</h3><p>如果你更改了当前的username，会带来些麻烦，你可能需要解决一些问题！</p>
<ul>
<li>你的旧的个人资料页面不会被重定向(需要手动更改)</li>
<li>你的Pages网站设置不会被重定向(需要手动更改)</li>
<li>你的远程存储库会自动重定向，无须更改</li>
<li>你的本地存储库需要手动更改！！！</li>
</ul>
<h4 id="更改本地repo的远程repo的URL"><a href="#更改本地repo的远程repo的URL" class="headerlink" title="更改本地repo的远程repo的URL"></a>更改本地repo的远程repo的URL</h4><p>一般的，使用<code>git remote set-url</code>命令更改现有的远程存储卡URL。</p>
<ul>
<li>如果您要更新为使用HTTPS，则URL可能类似于：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git</span><br></pre></td></tr></table></figure></li>
<li>如果您要更新为使用SSH，则您的URL可能如下所示：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git@github.com:USERNAME&#x2F;REPOSITORY.git</span><br></pre></td></tr></table></figure>
<h4 id="将远程URL从SSH切换到HTTPS"><a href="#将远程URL从SSH切换到HTTPS" class="headerlink" title="将远程URL从SSH切换到HTTPS"></a>将远程URL从SSH切换到HTTPS</h4></li>
<li>列出现有的URL:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">&gt; origin  git@github.com:USERNAME&#x2F;REPOSITORY.git (fetch)</span><br><span class="line">&gt; origin  git@github.com:USERNAME&#x2F;REPOSITORY.git (push)</span><br></pre></td></tr></table></figure></li>
<li>使用<code>git remote set-url</code>命令将远程URL从SSH更改为HTTPS</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git</span><br></pre></td></tr></table></figure>
<ul>
<li>验证远程URL是否已更改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"># 下面是新的 URL</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git (fetch)</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git (push)</span><br></pre></td></tr></table></figure>
在你下次使用<code>git fetch</code>，<code>git pull</code>或<code>git push</code>访问远程存储库时，系统将要求你重新提供GitHub用户名和密码<h4 id="将远程URL从HTTPS切换到SSH"><a href="#将远程URL从HTTPS切换到SSH" class="headerlink" title="将远程URL从HTTPS切换到SSH"></a>将远程URL从HTTPS切换到SSH</h4></li>
<li>列出现有的URL:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git (fetch)</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;USERNAME&#x2F;REPOSITORY.git (push)</span><br></pre></td></tr></table></figure></li>
<li>使用<code>git remote set-url</code>命令将远程URL从HTTPS更改为SSH<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote set-url origin git@github.com:USERNAME&#x2F;REPOSITORY.git</span><br></pre></td></tr></table></figure></li>
<li>验证远程URL是否已更改<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"># 下面是新的 URL</span><br><span class="line">&gt; origin  git@github.com:USERNAME&#x2F;REPOSITORY.git (fetch)</span><br><span class="line">&gt; origin  git@github.com:USERNAME&#x2F;REPOSITORY.git (push)</span><br></pre></td></tr></table></figure>
<h4 id="错误排解"><a href="#错误排解" class="headerlink" title="错误排解"></a>错误排解</h4>出现以下错误，表示URL不存在：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote set-url sofake https:&#x2F;&#x2F;github.com&#x2F;octocat&#x2F;Spoon-Knife</span><br><span class="line">&gt; fatal: No such remote &#39;sofake&#39;</span><br></pre></td></tr></table></figure>
更多请访问<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vZ2l0aHViL3VzaW5nLWdpdC9jaGFuZ2luZy1hLXJlbW90ZXMtdXJs">官方Wiki<i class="fa fa-external-link-alt"></i></span>！<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li>
</ul>
<p>每次推送的话，基本上就是下面这么回事儿：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一步</span><br><span class="line">$  git add .</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二步</span><br><span class="line">$ git commit -m &quot;更新日志&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三步</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>Git</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP的搭建和使用</title>
    <url>/posts/2019/ftp.html</url>
    <content><![CDATA[<p>去年再阿里买的学生价的服务器，在使用的过程中用到了FTP，故将使用方法记录下来，也方便自己之后查阅。</p>
<a id="more"></a>

<h2 id="What’s-FTP"><a href="#What’s-FTP" class="headerlink" title="What’s FTP?"></a>What’s FTP?</h2><p>FTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守同一种协议以传输文件。互联网上提供文件存储和访问服务的计算机，他们依照的是FTP协议提供服务！支持FTP协议的服务器就是FTP服务器！FTP协议提供存储和传输服务的一套协议。下载”（Download）和”上传”（Upload）。”下载”文件就是从远程主机拷贝文件至自己的计算机上；”上传”文件就是将文件从自己的计算机中拷贝至远程主机上。用Internet语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</p>
<h2 id="FTP的安装与配置"><a href="#FTP的安装与配置" class="headerlink" title="FTP的安装与配置"></a>FTP的安装与配置</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先我们肯定得安装vsftpd，如果不知道这是啥，Google查一查吧，但是会看这篇文章的人，应该没有不知道的😁在用<span class="exturl" data-url="aHR0cDovL3d3dy5wdXR0eS5vcmcv">putty<i class="fa fa-external-link-alt"></i></span>连上你的服务器之后，直接用<code>yum</code>安装就好了,输入如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp001.png" alt></p>
<p>出现下图表示安装成功：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp002.png" alt></p>
<p>如果你像我的一样，已经安装了的话，会这样显示：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp003.png" alt></p>
<p>它会告诉你已经安装了最新的软件安装包，这时候它无事可做了😂</p>
<h3 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h3><p>输入如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;vsftpd</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>如图所示：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp004.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf 	&#x2F;&#x2F;主配置文件，核心配置文件</span><br><span class="line">&#x2F;etc&#x2F;vsftpd&#x2F;ftpusers 	    &#x2F;&#x2F;黑名单，这个里面的用户不允许访问FTP服务器</span><br><span class="line">&#x2F;etc&#x2F;vsftpd&#x2F;user_list 		&#x2F;&#x2F;白名单，允许访问FTP服务器的用户列表</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>同样的，输入如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable vsftpd.service 	&#x2F;&#x2F;设置开机自启动</span><br><span class="line">systemctl start vsftpd.service 		&#x2F;&#x2F;启动ftp服务</span><br><span class="line">netstat -antup | grep ftp 			&#x2F;&#x2F;查看ftp服务端口</span><br></pre></td></tr></table></figure>

<p>输出情况如图所示：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp005.png" alt></p>
<p>由于我是在阿里云买的服务器，所以去阿里云的控制台添加一条防火墙规则，如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp006.png" alt></p>
<p>登录轻量服务器控制台，单击 <strong>服务器运维</strong> &gt; <strong>防火墙</strong> &gt; <strong>添加规则</strong>。</p>
<p>然后登陆FTP服务器：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ftp/ftp007.png" alt></p>
<h2 id="小建议"><a href="#小建议" class="headerlink" title="小建议"></a>小建议</h2><p>如果你是刚接触ftp，出于安全考虑，不建议你使用匿名FTP上传文件，或者进行创建目录等操作。vsftpd在默认情况下也是不允许用户匿名的，若是执意要这样，可以修改vsftpd.conf配置文件的选项，可以赋予匿名ftp更多的权限。更高的进阶操作，欢迎大家自行Google，若有不足之处，欢迎指出！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>更换为Google Fonts思源宋体！</title>
    <url>/posts/2019/fonts.html</url>
    <content><![CDATA[<p>对于中文书籍来说，宋体一直是正文印刷的标准字体，而不是目前电子显示屏上普遍的黑体，因为<strong>宋体的衬线更适合长时间阅读</strong>。</p>
<p>本文是针对Hexo博客的NexT主题来设置的，不是这个的小伙伴们也可以参照着来看！</p>
<a id="more"></a>

<h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><h4 id="修改配置文件中的参数"><a href="#修改配置文件中的参数" class="headerlink" title="修改配置文件中的参数"></a>修改配置文件中的参数</h4><p>修改配置文件<code>_config.yml</code> ，找到<code>font</code>将下列代码中红色的部分修改成绿色的部分即可。可以根据实际情况稍作修改！</p>
<figure class="highlight diff"><figcaption><span>文件位置:~/blog/themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line"><span class="deletion">- enable: false</span></span><br><span class="line"><span class="addition">+ enable: true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  # Uri字体主机，例如//fonts.googleapis.com（默认）。</span><br><span class="line"><span class="addition">+ host: https://fonts.loli.net</span></span><br><span class="line"></span><br><span class="line">  # Font options:字体选项：</span><br><span class="line">  # `external: true` will load this font family from `host` above.</span><br><span class="line">  # `family: Times New Roman`. Without any quotes.</span><br><span class="line">  # `size: xx`. Use `px` as unit.</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements in &lt;body&gt;.</span><br><span class="line">  # 用于&lt;body&gt;中所有元素的全局字体设置。</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for Headlines (H1, H2, H3, H4, H5, H6).</span><br><span class="line">  # 标题的字体设置（H1，H2，H3，H4，H5，H6）。</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  # 回退到`global`字体设置。</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts.帖子的字体设置</span><br><span class="line">  # Fallback to `global` font settings.回退到`global`字体设置。</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line"></span><br><span class="line">  # Font settings for Logo.LOGO的字体设置。</span><br><span class="line">  # Fallback to `global` font settings.回退到`global`字体设置。</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line"><span class="addition">+   family: Noto Serif SC</span></span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>找到主题的<code>base.styl</code>文件，具体位置为<code>~/blog/themes/next/source/css/_variables/base.styl</code>,然后修改相关数据！</p>
<figure class="highlight diff"><figcaption><span>文件位置:~/blog/themes/next/source/css/_variables/base.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="deletion">-$font-family-monospace    = consolas, Menlo, $font-family-chinese, monospace</span></span><br><span class="line"><span class="addition">+$font-family-monospace    = consolas, Menlo, $font-family-base, monospace</span></span><br><span class="line"><span class="deletion">-$font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-chinese, monospace if get_font_family('codes')</span></span><br><span class="line"><span class="addition">+$font-family-monospace    = get_font_family('codes'), consolas, Menlo, $font-family-base, monospace if get_font_family('codes')</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义项目"><a href="#自定义项目" class="headerlink" title="自定义项目"></a>自定义项目</h3><h4 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h4><p>如果你看不习惯默认(原来)的字体大小的话，你可以尝试修改它！</p>
<figure class="highlight diff"><figcaption><span>文件位置:~/blog/themes/next/source/css/_variables/base.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = 14px	//改成你想要的即可！</span><br></pre></td></tr></table></figure>

<h4 id="设置字体颜色"><a href="#设置字体颜色" class="headerlink" title="设置字体颜色"></a>设置字体颜色</h4><p>没错，你甚至可以设置不同的颜色！</p>
<figure class="highlight diff"><figcaption><span>文件位置:~/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//修改字体颜色</span><br><span class="line">body &#123;</span><br><span class="line">    color: &lt;在这里填上你想要的颜色，如：#000&gt;;	//别漏了分号！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>本文参考自reuixiy的<span class="exturl" data-url="aHR0cHM6Ly9pby1vaS5tZS90ZWNoL25vdG8tc2VyaWYtc2MtYWRkZWQtb24tZ29vZ2xlLWZvbnRzLmh0bWwjbWFpbg==">Google Fonts已支持思源宋体！<i class="fa fa-external-link-alt"></i></span>点击即可访问！</p></div>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Google Fonts</tag>
      </tags>
  </entry>
  <entry>
    <title>Google sitemap不允许的网址解决办法</title>
    <url>/posts/2019/googlesitemap.html</url>
    <content><![CDATA[<p>搭建好自己的博客之后，当然得做收录。要想让别人在Google看到我的文章，就得添加站点地图。但是我在提交到Google的时候就给我报了错，不允许的网址。本文所说的方法只是众多解决方法中的一个，这个问题的原因也是有很多的，可以参考👉<span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vd2VibWFzdGVycy9hbnN3ZXIvNzQ1MTAwMT9obD16aC1IYW5zJnJlZl90b3BpYz03NDQwMDA2">站点地图报告<i class="fa fa-external-link-alt"></i></span></p>
<a id="more"></a>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在我提交之后，是这样显示的：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="googlesitemap/google001.png" alt></p>
<p>所以说，得找到错误。最开始我根本没意识到错误在哪里，也就是选择性眼瞎。。。但是仔细观察图片，发现网址不对，怎么能是http://&lt;yoursite.com&gt;(这里一看就不对)/***.html呢？于是恍然大悟！</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>综上所述，在我的站点文件<code>sitemap.xml</code>里面，也肯定都是错误的网址。可以看到地址都是错的，都是<code>yoursite.com</code>开头，这很明显不是我的网址啊😥所以说肯定是我某个地方没有修改，应该是默认值。然后检查我的<code>_config.yml</code>文件，一看果然是的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p>可以看到<code>url</code>这一项是默认值，压根就没改！因为之前不影响使用，我就没管。然后这时候更正它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: http:&#x2F;&#x2F;www.zhuimeng.online</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>

<p>然后<code>hexo g -d</code>更新网站，再在 Google Search Console 重新提交一次 sitemap 就可以了。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="googlesitemap/google002.png" alt></p>
<p>nice!大功告成啦！😄</p>
]]></content>
      <categories>
        <category>Google Search Console</category>
      </categories>
      <tags>
        <tag>Google Search Console</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/posts/2019/hexo.html</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/h001.png" alt></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>为什么网上这么多教程，我还要在这里写下一篇呢？主要是总结大家的经验和自己的操作过程，一来是方便自己看，二来是给大家提供一些参考。Google一下，你可以找到几乎所有你想看到的，但是能否为你带来实质性的解决方案，可能也是需要花时间的。而且，跟别人做一样的操作，可能就刚好是你出了问题。。。没错，说的就是我自己。写这篇文章，仅此以纪念从WordPress转到Hexo。</p>
<a id="more"></a>
<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="适合哪些人呢？"><a href="#适合哪些人呢？" class="headerlink" title="适合哪些人呢？"></a>适合哪些人呢？</h3><ul>
<li>平常喜欢写作，尤其是Blog的人。有不少人通过Hexo发表文学类作品呢。</li>
<li>不害怕编程，且爱折腾的人</li>
<li>了解和能够使用版本控制Git和GitHub的人</li>
<li>熟悉基本的MarkDown语法，能够利用MarkDown和Typora写作的人</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==">Node.js<i class="fa fa-external-link-alt"></i></span>下载，并安装到您的计算机上。</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">Git<i class="fa fa-external-link-alt"></i></span>下载，并安装到您的计算机上。</p>
<p>不会下载安装？没关系，点击链接去它们的官网，有非常详细的安装教程。或者，我也可以抽时间写，但是感觉这样的文章质量并不高啊！</p>
</li>
</ol>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>这时候我们需要利用npm来安装了。(直接打开Git Bash，或者任意位置鼠标右键选择打开)</p>
<p>运行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>如果报错，出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm ERR! registry error parsing json</span><br></pre></td></tr></table></figure>

<p>的话，可能需要设置npm代理，执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.cnpmjs.org</span><br></pre></td></tr></table></figure>

<p>然后删除刚才安装的npm目录，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo:command not found</span><br></pre></td></tr></table></figure>

<p>重新执行第一条命令安装Hexo，不过，这第一步都能报错，脸是有多黑啊！！！</p>
<h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><p>在命令行接着运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;    &#x2F;&#x2F;初始化hexo文件夹,hexo会在目标文件夹建立网站所需要的所有文件</span><br><span class="line">$ cd &lt;folder&gt;      </span><br><span class="line">$ npm install    &#x2F;&#x2F;安装依赖包</span><br></pre></td></tr></table></figure>

<p>这里的<folder>是你自己指定的文件夹，比如说我的就是这样：</folder></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init G:hexo</span><br><span class="line">$ cd G:hexo</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>这样说你应该更容易理解，这就相当于选择安装软件的位置。</p>
<h4 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h4><p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>在命令行执行如下命令，然后打开你的浏览器输入<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwL+WNs+WPr+afpeeci+OAgg==">http://localhost:4000/即可查看。<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g    #等同于hexo generate，生成静态文件到public文件夹</span><br><span class="line">hexo s    # 等同于hexo server，在本地服务器渲染运行</span><br></pre></td></tr></table></figure>

<p>到这一步，你的本地博客基本上就搭建起来了。我第一次搭建成功时，简直是兴奋的飞起了!</p>
<h4 id="注意事项详解"><a href="#注意事项详解" class="headerlink" title="注意事项详解"></a>注意事项详解</h4><ul>
<li>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</li>
<li>_config.yml是站点的配置文件，用来存放网站的配置信息，可以在此配置大部分的参数。路径为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;folder&gt;\_config.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>也就是你的站点的根目录下。</li>
<li>还有个叫_config.yml的，是你的主题配置文件，千万别弄混了。路径为：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;folder&gt;\themes\&lt;主题文件夹&gt;\_config.yml</span><br></pre></td></tr></table></figure>

<p>​    就存放在你的主题根目录下</p>
<ul>
<li>scaffolds是模板文件夹。当你新建文章的时候，Hexo 会根据 scaffold 来建立文件。</li>
<li>source是资源文件夹，是存放用户资源的地方。</li>
<li>themes，没错，就是存放主题的文件夹，今后你可能要无数次的打开它。</li>
</ul>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>将项目部署上去，你需要安装：<code>hexo-deployer-git</code>插件，不然会报错。在git运行如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="网站搭建实施方案"><a href="#网站搭建实施方案" class="headerlink" title="网站搭建实施方案"></a>网站搭建实施方案</h3><h4 id="GithubPages"><a href="#GithubPages" class="headerlink" title="GithubPages"></a>GithubPages</h4><ol>
<li><p>创建一个<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">GitHub<i class="fa fa-external-link-alt"></i></span>账号，如果你有一个更好。</p>
</li>
<li><p>创建一个仓库，名字必须为：&lt;Github账号名称&gt;.github.io</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo001.png" alt></p>
<p>图中报错的细节就不要在意了，这个仓库只能创建一个，当时我创建的时候没有截图。为了方便理解，专门去打开了这个页面截了一张图。</p>
</li>
<li><p>将本地Hexo博客推送到GithubPages</p>
<p>3.1.安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>3.2.添加SSH Key</p>
<p>3.2.1.创建一个SSH Key。在命令行输入一下命令，密码为空，敲击三下回车：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>

<p>3.2.2.把公钥添加到GitHub。复制密钥文件内容，路径形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator(也就是你的账户名)\.ssh\id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo002.png" alt></p>
<p>然后粘贴到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvZ2luP3JldHVybl90bz1odHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZzZXR0aW5ncyUyRmtleXM=">SSH keys<i class="fa fa-external-link-alt"></i></span>即可。</p>
<p>3.2.3.测试是否添加成功。在命令行输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure>

<p>返回“You’re successfully authenticated”,就说明你添加成功啦！</p>
<p>3.3.修改你的站点配置文件_config.yml(前面说过了在你的站点目录下)。文件末尾修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;&#x2F;&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>仓库地址填写ssh地址，比如我的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:besscroft&#x2F;besscroft.github.io.git</span><br><span class="line">  barnch: master</span><br></pre></td></tr></table></figure>

<p>3.4.然后我们要推送到GitHubPages。在命令行(即Git Bash)，输入以下命令，注意，这个命令请记下来。以后你会经常用到的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g	#等同于hexo generate，生成静态文件到public文件夹</span><br><span class="line">$ hexo d	# 等于hexo deploy 即，部署，可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>

<p>如果返回：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO Deploy done: git</span><br></pre></td></tr></table></figure>

<p>即推送成功啦！然后稍等片刻，浏览器访问地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;&lt;Github账号名称&gt;.github.io</span><br></pre></td></tr></table></figure>

<p>然后，嗯嗯~ o(<em>￣▽￣</em>)o，到这里就成功了啦，是不是很开心？</p>
</li>
</ol>
<h4 id="GithubPages-域名"><a href="#GithubPages-域名" class="headerlink" title="GithubPages + 域名"></a>GithubPages + 域名</h4><p>这一步最重要的就是买域名了，买个域名先！</p>
<ol>
<li><p>打开你的域名提供商的控制台，设置域名解析。</p>
<p>1.1.解析类型选择为CNAME；</p>
<p>1.2.主机记录，就是你的域名前缀，填写www即可；</p>
<p>1.3.记录值去复制你的&lt;Github账号名称&gt;.github.io填上去；</p>
<p>1.4.线路解析，就默认的就行了。</p>
</li>
<li><p>仓库设置</p>
<p>2.1.打开你的博客仓库设置，都到这一步了别告诉我你不知道在哪儿。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo003.png" alt></p>
<p>然后再该页面中往下滑，找到图中的位置！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo004.png" alt></p>
<p>我相信你看到页面上的提示，能够非常容易地添加自定义域名并开启 https 的！</p>
</li>
</ol>
<h4 id="GithubPages-CodingPages-域名"><a href="#GithubPages-CodingPages-域名" class="headerlink" title="GithubPages + CodingPages + 域名"></a>GithubPages + CodingPages + 域名</h4><p>你还可以在CodingPages上也搭建仓库，推送到仓库的时候2个仓库是同步推送的呢！</p>
<ol>
<li><p>创建你的<span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0Lw==">Coding<i class="fa fa-external-link-alt"></i></span>账号</p>
</li>
<li><p>一样要创建一个用来托管的仓库，而且仓库名为:&lt;Coding账号名称&gt;</p>
</li>
<li><p>将你的Hexo博客给推送到CodingPages</p>
<p>3.1.之前大家在创建GitHubPages时，我们是已经做过生成公钥这一步了。这时候找到它，复制内容，并粘贴到Coding的<span class="exturl" data-url="aHR0cHM6Ly9kZXYudGVuY2VudC5jb20vdXNlci9hY2NvdW50L3NldHRpbmcva2V5cw==">新增公钥<i class="fa fa-external-link-alt"></i></span>。</p>
<p>3.2.然后我们来测试以下成功了没有。在命令行依次输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure>

<p>返回了“You’ve successfully authenticated”，就表示已经成功了！</p>
<p>3.3.修改你的站点配置文件_config.yml(前面说过了在你的站点目录下)。文件末尾修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;&#x2F;&lt;Coding账号名称&gt;.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>按照之前的GitHub添加一样，在这里把coding的也添加上去，直接加到后面即可！</p>
<p>4.4.然后推送到你的Coding仓库，没错，又是这两条指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g	# 等于hexo generate # 生成静态文件</span><br><span class="line">$ hexo d	# 等于hexo deploy 即，部署，可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入刚才创建的Coding项目，进入代码页面，你会看到有一项叫Pages服务，然后点击“一键开启静态Pages”。稍等片刻，美味就快好。。。不对，稍等片刻CodingPages即可部署成功！</p>
</li>
<li><p>域名解析</p>
<p>5.1.解析类型选择为CNAME；</p>
<p>5.2.主机记录，就是你的域名前缀，填写www即可；</p>
<p>5.3.记录值去复制你的&lt;Coding账号名称&gt;.coding.me填上去；</p>
<p>5.4.线路解析，就默认的就行了。</p>
</li>
<li><p>在你刚才开启Pages服务的地方，点击设置，进入它的设置页绑定你的自定义域名。</p>
</li>
<li><p>最后，到这里基本上就大功告成啦！~ o(<em>￣▽￣</em>)o</p>
</li>
</ol>
<h4 id="配置解析注意事项"><a href="#配置解析注意事项" class="headerlink" title="配置解析注意事项"></a>配置解析注意事项</h4><p>嗯，为什么要在两个托管平台都搭建起来呢？原因很简单：要实现国内外访问不同的服务，所以要分别托管并且分别设置解析。无论是腾讯云还是阿里云，他们的解析服务都能够很好地区分国内外的节点。我们需要将国内的CNAME设置到pages.coding.me，将国外的CNAME设置到pages.github.io，然后，魔法就出现了！</p>
<p>如果你不会的话，请参考图片中的设置即可！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo005.png" alt></p>
<p>别跟我说这样不行，难道你平常逛的淘宝，就只有一台服务器嘛？🙃</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/hexo006.png" alt></p>
<p>可以去看看阿里的部分云解析的<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vZG9jdW1lbnRfZGV0YWlsLzI5NzMwLmh0bWw/c3BtPWEyYzRnLjExMTg2NjIzLjYuNTc1LjRlYTA1YjljbG5zMmh2">文档<i class="fa fa-external-link-alt"></i></span>。</p>
<h3 id="Hexo命令行常用指令"><a href="#Hexo命令行常用指令" class="headerlink" title="Hexo命令行常用指令"></a>Hexo命令行常用指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo help	#查看帮助</span><br><span class="line">hexo init	#初始化一个目录</span><br><span class="line">hexo new &quot;postName&quot;		#新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; 	#新建页面</span><br><span class="line">hexo generate 	#生成网页，可以在 public 目录查看整个网站的文件</span><br><span class="line">hexo server 	#本地预览，&#39;Ctrl+C&#39;关闭</span><br><span class="line">hexo deploy 	#部署.deploy目录</span><br><span class="line">hexo clean 		# 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br></pre></td></tr></table></figure>

<p><strong>简写：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure>

<p>如果你采用了静态资源压缩的话，每次同步到服务器就要多一条指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp     &#x2F;&#x2F;没有用静态资源压缩，同步时不需要中间这条指令</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署成功时会返回这个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[info] Deploy done: git</span><br></pre></td></tr></table></figure>

<p>执行<code>hexo clean &amp;&amp; hexo deploy</code>命令。前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。（如果你的Hexo是局部安装，则需要执行<code>./node_modules/.bin/hexo clean &amp;&amp; ./node_modules/.bin/hexo deploy</code>。）</p>
<p>登入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">Github<i class="fa fa-external-link-alt"></i></span>/<span class="exturl" data-url="aHR0cHM6Ly9iaXRidWNrZXQub3JnLw==">BitBucket<i class="fa fa-external-link-alt"></i></span>/<span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLw==">Gitlab<i class="fa fa-external-link-alt"></i></span>，请在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code>配置中的分支名称。稍等片刻，你的站点就会显示在你的Github Pages中啦！</p>
<p>如果你是才接触，那么我建议你熟悉之后，再将Hexo部署到其它托管平台！比如👉<span class="exturl" data-url="aHR0cHM6Ly9kYXNoYm9hcmQuaGVyb2t1LmNvbQ==">Heroku<i class="fa fa-external-link-alt"></i></span>（蛮好用的）、👉<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0bGlmeS5jb20v">Netlify<i class="fa fa-external-link-alt"></i></span>、👉<span class="exturl" data-url="aHR0cHM6Ly9yc3luYy5zYW1iYS5vcmcv">Rsync<i class="fa fa-external-link-alt"></i></span>、👉<span class="exturl" data-url="aHR0cHM6Ly93d3cub3BlbnNoaWZ0LmNvbS8=">OpenShift<i class="fa fa-external-link-alt"></i></span>、等等。具体的可以去阅读👉<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZGVwbG95bWVudA==">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy       #需要部署的文件</span><br><span class="line">├── node_modules  #Hexo插件</span><br><span class="line">├── public        #生成的静态网页文件</span><br><span class="line">├── scaffolds     #模板</span><br><span class="line">├── source        #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">|   ├── _drafts   #草稿</span><br><span class="line">|   └── _posts    #文章</span><br><span class="line">├── themes        #主题</span><br><span class="line">├── _config.yml   #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<h4 id="全局配置-config-yml"><a href="#全局配置-config-yml" class="headerlink" title="全局配置_config.yml"></a>全局配置_config.yml</h4><p>请看我的这篇👉<a href="http://blog.52bess.com/zhandian.html#more">文章</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>记得平时多做好备份，这是个好习惯。万一出现文件误删，丢失等，甚至GitHub你在某一天无法访问。</p>
<p>我的博客的评论系统是<span class="exturl" data-url="aHR0cHM6Ly92YWxpbmUuanMub3JnLw==">Valine<i class="fa fa-external-link-alt"></i></span>我觉得还可以吧，其它的如：来比利、哦不是<span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS8=">来必力<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL2NoYW5neWFuLmt1YWl6aGFuLmNvbS8=">畅言<i class="fa fa-external-link-alt"></i></span>等都是不错的。由于我只用了一个，优缺点就不说了，但是感觉Valine的UI更符合我的胃口。</p>
<p>博客右下角的被大家称为萌萌哒，也就是二次元看板娘，是使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2Jsb2IvbWFzdGVyL1JFQURNRS56aC1DTi5tZA==">live-2d<i class="fa fa-external-link-alt"></i></span>实现的。</p>
<p>如果你的Hexo搭建成功，不妨跟大家分享以下你的快乐呢！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>HP暗影精灵3黑苹果基本完工</title>
    <url>/posts/2019/hpomen3hackintosh.html</url>
    <content><![CDATA[<p>闲暇之余，又一次给暗影精灵3，装上了黑苹果(MacOS 10.14.6)。实现完美电源管理，以及不插电开机(暗影精灵系列的朋友，装过黑苹果的应该知道意味着什么)。并将efi以及补丁发布出来，以便相同的笔记本可以安装。</p>
<a id="more"></a>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hpomen3hackintosh/img01.jpg" alt></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>产品名称暗影精灵3</th>
<th>OMEN by HP Laptop 15-ce0xx</th>
</tr>
</thead>
<tbody><tr>
<td>BIOS</td>
<td>F.20 Rev.A</td>
</tr>
<tr>
<td>处理器</td>
<td>Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz</td>
</tr>
<tr>
<td>独立显卡</td>
<td>NVIDIA GeForce GTX 1050</td>
</tr>
<tr>
<td>显卡</td>
<td>Intel(R) HD Graphics 630</td>
</tr>
<tr>
<td>声卡</td>
<td>ALC295</td>
</tr>
<tr>
<td>硬盘</td>
<td>HP SSD EX950 512G、HGST 1T</td>
</tr>
</tbody></table>
<ul>
<li><h3 id="没问题的"><a href="#没问题的" class="headerlink" title="没问题的"></a>没问题的</h3><ul>
<li>声卡正常，键盘可以调声音</li>
<li>摄像头正常</li>
<li>触摸板正常</li>
<li>睡眠和唤醒正常，合上盖子再打开也正常，我不知道白苹果是怎样的，但是我试了很多次，没发现问题。</li>
<li>电池正常</li>
<li>有线网卡正常</li>
<li>亮度正常，但是不能用键盘调整，在设置里面可以调整（我得再去爪巴帖子了😓</li>
</ul>
<h3 id="无效功能"><a href="#无效功能" class="headerlink" title="无效功能"></a>无效功能</h3><ul>
<li>独显因为不能驱动，所以屏蔽</li>
<li>蓝牙</li>
<li>WiFi  :(</li>
</ul>
</li>
</ul>
<h3 id="一些参考教程"><a href="#一些参考教程" class="headerlink" title="一些参考教程"></a>一些参考教程</h3><p><a href="https://blog.52bess.com/clover.html">黑苹果教程</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvb1BBd3lSOVdhZkJjZzBOLXJhUFdZdw==">HP暗影精灵3安装 macOS 10.14.3 Mojave 记录<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvc3Q3ZmVOLXlIZkRjdkNFbmd2YklFdw==">macOS Mojave黑苹果教程！<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRhbGlhbnNreS5uZXQvbWFjT1MtTW9qYXZlLTEwLjE0LjYtMThHODctUmVsZWFzZS12ZXJzaW9uLXdpdGgtQ2xvdmVyLTUwMzMtb3JpZ2luYWwtaW1hZ2UuaHRtbA==">【黑果小兵】macOS Mojave 10.14.6 18G87 正式版 with Clover 5050原版镜像[双EFI双平台终极版]<i class="fa fa-external-link-alt"></i></span></p>
<p>远景论坛<span class="exturl" data-url="aHR0cDovL2Jicy5wY2JldGEuY29tL3ZpZXd0aHJlYWQtMTc3ODQ5OS0xLTEuaHRtbA==">修改dsdt实现电量显示方法（整理修改已有帖子）<i class="fa fa-external-link-alt"></i></span></p>
<p>tonymacx86<span class="exturl" data-url="aHR0cHM6Ly93d3cudG9ueW1hY3g4Ni5jb20vdGhyZWFkcy9zb2x2ZWQtaHAtb21lbi0xNS1kYy1iYXR0ZXJ5LWVycm9yLjI2MzgxNC8jcG9zdC0xODQxMDIz">HP OMEN 15-dc电池错误<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cudG9ueW1hY3g4Ni5jb20vdGhyZWFkcy9ndWlkZS1ob3ctdG8tcGF0Y2gtZHNkdC1mb3Itd29ya2luZy1iYXR0ZXJ5LXN0YXR1cy4xMTYxMDIv">[指南]如何修补DSDT的工作电池状态<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="下载链接-镜像同步上传中"><a href="#下载链接-镜像同步上传中" class="headerlink" title="下载链接 镜像同步上传中"></a>下载链接 镜像同步上传中</h3><p>👍<strong>镜像来自于@黑果小兵的博客找的链接，我自己用的也是这个镜像！</strong></p>
<p>迅雷离线下载：[<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmR0b3BzLmNjL2lzby9NYWNPUy8xMC4xNC9kYWxpYW5za3lfbWFjb3MvbWFjT1MlMjBNb2phdmUlMjAxMC4xNC42JTI4MThHODQlMjklMjBJbnN0YWxsZXIlMjB3aXRoJTIwQ2xvdmVyJTIwNTAyNy5kbWc=">请点击下载<i class="fa fa-external-link-alt"></i></span>] 感谢<code>@难忘情怀</code>提供下载资源</p>
<p>http下载链接:<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLmR0b3BzLmNjL2lzby9NYWNPUy9kYWxpYW5za3lfbWFjb3Mv">请点击下载<i class="fa fa-external-link-alt"></i></span> 感谢<code>@难忘情怀</code>提供下载资源</p>
<p>百毒云：链接: <span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXl4N0Ffd2xmZXBwNnliVENSY3o0Y2c=">https://pan.baidu.com/s/1yx7A_wlfepp6ybTCRcz4cg<i class="fa fa-external-link-alt"></i></span> 提取码: <code>qrwt</code></p>
<p>MD5 (macOS Mojave 10.14.6(18G84) Installer with Clover 5027.dmg) = af934738cd02c4cefacf527d23532289</p>
<h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><ul>
<li>感谢各位大佬的开源。</li>
<li>感谢远景论坛的各位大佬提供的教程，以及<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbGlhbnNreQ==">黑果小兵<i class="fa fa-external-link-alt"></i></span>的镜像。</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p><strong>Q:如何进入BIOS或者设置启动项？</strong></p>
<p>A:开机后按下ESC键，然后根据指引选择</p>
<p><strong>Q:抹盘时失败</strong></p>
<p>A:看看是不是EFI的分区给的太小了，一般建议200M以上。这里尤其注意，有的人抹盘失败会导致Windows10进不去，我不知道原因是什么，但是建议在安装之前，多去看看别人怎么操作的，避免一些误区，同时：<strong>记得提前备份！！！记得提前备份！！！记得提前备份！！！</strong></p>
<p><strong>Q:安装时提示这个“安装 macOS xxxx”应用程序副本已损坏，不能用来安装macOS</strong></p>
<p>A:原因是旧版macOS 安装镜像中的证书过期，并且苹果没有更新证书日期。你打开终端，改一下时间就好了：<code>date 0201010116</code></p>
<h3 id="🔊如果扬声器无法使用的解决方案"><a href="#🔊如果扬声器无法使用的解决方案" class="headerlink" title="🔊如果扬声器无法使用的解决方案"></a>🔊如果扬声器无法使用的解决方案</h3><p>暗影精灵3的声卡是ALC295，找到我在repo中提供的<code>VoodooHDA-295.pkg</code>，并安装它。我很懒，只提供了这一种方案，Google给您提供了更好的方案，只是看您怎么选了！</p>
<h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><p>Email：631908942#qq.com</p>
<p>QQ群：821557332</p>
<p>如果大家有一些建议，也欢迎反馈！</p>
<p>👉GitHub:<strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jlc3Njcm9mdC9IUC1PTUVOLTMtSGFja2ludG9zaA==">HP-OMEN-3-Hackintosh<i class="fa fa-external-link-alt"></i></span></strong></p>
]]></content>
      <categories>
        <category>黑苹果</category>
      </categories>
      <tags>
        <tag>黑苹果</tag>
        <tag>暗影精灵3</tag>
        <tag>HP</tag>
      </tags>
  </entry>
  <entry>
    <title>萌萌哒二次元看板娘</title>
    <url>/posts/2019/live2d.html</url>
    <content><![CDATA[<p>已弃用live2d插件，太长时间没更新了，且功能单一。现已改为开源项目<strong>live2d-widget</strong>，地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=">https://github.com/stevenjoezhang/live2d-widget<i class="fa fa-external-link-alt"></i></span></p>
<p>不少同学应该都发现了，许多人的博客都有类似萌萌哒、看板娘的东西。这个其实是一个名叫<code>hexo-helper-live2d</code>的插件，那么，我们一起来向Hexo里放上一只萌萌哒二次元看板娘吧！</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，在<code>Hexo</code>博客根目录下运行<code>git</code>,然后再命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>当然也可以以标签模式运行，但是不建议这样，容易带来不必要的麻烦。目前最新的插件版本应该是<code>+ hexo-helper-live2d@3.1.0</code></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>在安装好插件之后，我们可以向Hexo的或者主题的<code>_config.yml</code>文件中添加配置，但是我建议你添加到Hexo的<code>_config.yml</code>中，而不是主题的配置文件中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true		#默认开启</span><br><span class="line">  scriptFrom: local		# 默认</span><br><span class="line">  pluginRootPath: live2dw&#x2F;	# 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib&#x2F;       # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets&#x2F;	# 模型文件相对与插件根目录路径</span><br><span class="line">  tagMode: false		# 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false  		# 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-koharu	#当前使用的模型</span><br><span class="line">  display:</span><br><span class="line">    position: right		#显示位置：左或右</span><br><span class="line">    width: 150			#画布的宽度，显示模型画布的长度</span><br><span class="line">    height: 300			#画布高度显示模型画布的高度</span><br><span class="line">  mobile:</span><br><span class="line">    show: true		#是否在移动设备上显示，默认为true</span><br></pre></td></tr></table></figure>

<p>请注意，如果你不想手机端显示，请把<code>mobile</code>下的<code>show</code>的值改为<code>false</code>，大多数情况下会遮挡视线。我最开始没注意，但是好多人跟我说手机端影响阅读体验了，然后我发现是得取消。</p>
<h3 id="详细的设置"><a href="#详细的设置" class="headerlink" title="详细的设置"></a>详细的设置</h3><p>详细设置其实不愿意折腾的同学可以不用管，但是你想按照自己的意愿来，还是可以尝试的。按照官方文档的说法：<strong>设置分为<code>helper</code>特有的和公共的, 你需要把他们合并放到 <code>_config.yml</code> 中</strong>。以下是<code>helper</code>特有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https:&#x2F;&#x2F;github.com&#x2F;EYHN&#x2F;hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  # enable: false</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw&#x2F; # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib&#x2F; # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets&#x2F; # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget@3.x&#x2F;lib&#x2F;L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录&#x2F;live2d_models&#x2F; 下的目录名</span><br><span class="line">    # use: .&#x2F;wives&#x2F;wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget-model-wanko@1.0.5&#x2F;assets&#x2F;wanko.model.json # 你的自定义 url</span><br></pre></td></tr></table></figure>

<h3 id="General-Settings"><a href="#General-Settings" class="headerlink" title="General Settings"></a>General Settings</h3><p>这里具体的设置，以及你想要的更多，可以参考官方<span class="exturl" data-url="aHR0cHM6Ly9sMmR3aWRnZXQuanMub3JnL2RvY3MvY2xhc3Mvc3JjL2luZGV4LmpzfkwyRHdpZGdldC5odG1sI2luc3RhbmNlLW1ldGhvZC1pbml0">API文档<i class="fa fa-external-link-alt"></i></span></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https:&#x2F;&#x2F;github.com&#x2F;xiazeyu&#x2F;live2d-widget.js</span><br><span class="line">## https:&#x2F;&#x2F;l2dwidget.js.org&#x2F;docs&#x2F;class&#x2F;src&#x2F;index.js~L2Dwidget.html#instance-method-init</span><br><span class="line">live2d:</span><br><span class="line">  model:</span><br><span class="line">    scale: 1			#模型与canvas的缩放</span><br><span class="line">    hHeadPos: 0.5		#模型头部横坐标</span><br><span class="line">    vHeadPos: 0.618		#模型头部纵坐标</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2		#超采样等级</span><br><span class="line">    width: 150			#画布的宽度，显示模型画布的长度</span><br><span class="line">    height: 300			#画布高度显示模型画布的高度</span><br><span class="line">    position: right		#显示位置：左或右</span><br><span class="line">    hOffset: 0			#水平偏移</span><br><span class="line">    vOffset: -20		#垂直偏移</span><br><span class="line">  mobile:</span><br><span class="line">    show: true		#是否在移动设备上显示</span><br><span class="line">    scale: 0.5		#移动设备上的缩放</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7		#默认透明度</span><br><span class="line">    opacityOnHover: 0.2		#鼠标移上透明度</span><br></pre></td></tr></table></figure>

<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>有许多方法来使用不同的模型，这里来介绍我设置的方法：</p>
<ol>
<li>在Hexo跟目录下新建文件夹<code>live2d_models</code></li>
<li>然后在<code>live2d_models</code>下建文件夹<code>&lt;你要安装的模型的名字&gt;</code></li>
<li>然后在<code>&lt;你要安装的模型的名字&gt;</code>下新建json文件：&lt;你要安装的模型的名字&gt;.model.json</li>
</ol>
<p>可以参考我的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hexo</span><br><span class="line">│</span><br><span class="line">├──live2d_models</span><br><span class="line">│          └── koharu</span><br><span class="line">				└──koharu.model.json</span><br></pre></td></tr></table></figure>

<h4 id="安装模型"><a href="#安装模型" class="headerlink" title="安装模型"></a>安装模型</h4><p>在git的命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-&lt;你要安装的模型的名字&gt;</span><br></pre></td></tr></table></figure>

<p>比如我的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-koharu</span><br></pre></td></tr></table></figure>

<p>然后你就可以通过向 <code>model.use</code> 键入包名 (<code>live2d-widget-model-wanko</code>) 来使用了。当然，你也可以去官方发布寻找<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=">live2d小模型<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>嗯，如果你是没有CDN会死星人,直接将 <code>.model.json</code> 的url地址输入 <code>model.use</code>。祝你成功！</p>
<h2 id="我的配置参数"><a href="#我的配置参数" class="headerlink" title="我的配置参数"></a>我的配置参数</h2><p>这里贴上我的配置参数吧，希望能帮到大家！我是放在<code>Hexo</code>的<code>_config.yml</code>中的，而不是主题的<code>_config.yml</code>中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-koharu</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -20</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>萌萌哒</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown写作的艺术</title>
    <url>/posts/2019/markdown.html</url>
    <content><![CDATA[<p>先鸽🕊着…</p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈：强大的Hexo</title>
    <url>/posts/2019/my-first-post.html</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="hexo/h001.png" alt></p>
<h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<a id="more"></a>

<h3 id="为什么要使用Hexo？"><a href="#为什么要使用Hexo？" class="headerlink" title="为什么要使用Hexo？"></a>为什么要使用Hexo？</h3><ul>
<li><p>买个服务器太贵，目前的服务器在阿里云，这配置，学生价便宜，那么以后呢？</p>
</li>
<li><p>学习一下新东西，折腾折腾。主要还是学一学Git和GitHub的使用。</p>
</li>
</ul>
<h3 id="怎么搭建的？"><a href="#怎么搭建的？" class="headerlink" title="怎么搭建的？"></a>怎么搭建的？</h3><ol>
<li><p>GithubPages</p>
</li>
<li><p>GithubPages + 域名</p>
<p>这个方案当然更好，好的域名方便记忆，买个便宜点的域名第一年也就10来块钱，一年换一个经济便宜，如果想长期做，那就一次性来个5年。</p>
</li>
<li><p>CodingPages + 域名</p>
<p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国内外都比较快。</p>
</li>
<li><p>GithubPages + CodingPages + 域名</p>
<p>嗯。我采用的是方案四，这样可以保证更多的不同网络环境下都能访问，即使可能根本没人看。。。</p>
</li>
</ol>
<h3 id="难吗？"><a href="#难吗？" class="headerlink" title="难吗？"></a>难吗？</h3><p>这个我不好说，毕竟每一个人不一样。但是我可以保证的是，只要你愿意折腾，哪怕你没有代码基础，你也能搭建出来。我目前接触了2种搭建博客的方式，第一种是阿里云买服务器，基于CentOS搭建的WordPress，是动态的。第二种就是这个由Hexo驱动的静态了，但是省钱啊，每年只用出域名的钱，你说香不香，但是优化还是要花费一番功夫的。当然第二种更简单。。。</p>
<p>自己买服务器搭建你可能要接触到CentOS、Apache、PHP、MySql、WordPress等等。使用Pages的话，可能要接触Node.js、Git、GitHub、Hexo。最好还是有一点前端基础，并不是说没有就弄不出来了，有的话可以节省你很多时间，更多的时候可能不至于让你的心态爆炸。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Hexo 提供了快速方便的一键部署功能，让你只需要一条命令就能将网站部署到服务器上。如果有人愿意看的话，我会在后面的文章中详细讲述我是如何搭建的，从零到搭建完成的每一个详细步骤，争取让不懂的你，也能拥有一个自己的博客！还会总结一些我在使用过程中遇到的坑，以免大家掉进去。</p>
]]></content>
      <tags>
        <tag>Hello Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题个性定制与深度优化</title>
    <url>/posts/2019/next.html</url>
    <content><![CDATA[<blockquote><p>给岁月以文明，而不是给文明以岁月.</p>
<footer><strong>刘慈欣</strong><cite>三体</cite></footer></blockquote>

<p>“互联网精神”即：开放、平等、协作、快速、分享。感谢我的生命之中有互联网，让我脑海中的开源共享有了实现的可能。能拥有自己的博客，不仅记录自己，还能分享他人！</p>
<a id="more"></a>

<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="容我先bb几句"><a href="#容我先bb几句" class="headerlink" title="容我先bb几句"></a>容我先bb几句</h3><p>首先肯定是感谢各位大佬的文章，我一个小白，靠着Google搭建了自己的博客……如果你是一个和我一样的小白，而且对我的博客感觉还蛮满意的话，恭喜你！看完这篇文章，你自己也可以拥有一个<del>可能不太</del>漂亮<del>的</del>博客啦！</p>
<p>这篇文章主要是写给跟我一样的小白们看的，当然也方便自己以后忘记了来查阅。如果各位大佬不慎看到，如有不足之处还欢迎指出来哦，还请见谅！我在搭建博客的时候，看到很多博客，写了一些比较好的文章，但是有时候却忘记收藏了。别告诉我只有我一个人设置的关闭浏览器时自动清理的……许多时候还是挺后悔的，为什么当时没收藏。因为这种文章，肯定是比某度随便一搜索找到的教程要准确的多的，毕竟人家博主可能真的是有在认真的写。</p>
<h3 id="我的本地环境"><a href="#我的本地环境" class="headerlink" title="我的本地环境"></a>我的本地环境</h3><p>有时候出问题的原因可能会有很多，如果你决定用我的这篇文章来做参考的话，那么我就把我的环境给你参考。因为可能大家一样的操作的话，并不一定实现的结果都是相同的。嗯~ o(<em>￣▽￣</em>)o，没错，我有时候Google按照流程来，结果疯狂报错。。。</p>
<p>大家都知道，外星人阻断了我们与Google的链接，导致无法访问，不过估计能看到这篇文章的人，应该是具有了访问Google的能力了。如果你是在是无法访问，可以去全球最大的同性交友社区GitHub看看呢，附上大神的开源项目<span class="exturl" data-url="aHR0cHM6Ly9sYW9kLmNuL3dwLWNvbnRlbnQvdGhlbWVzL2JlZ2luL3RvLnBocD91cmw9YUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkdmIyZHNaV2h2YzNSekwyaHZjM1J6">入口<i class="fa fa-external-link-alt"></i></span>👉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 调试用的浏览器 *&#x2F;</span><br><span class="line">Google Chrome Version 73.0.3683.75（Official version）（64-bit）</span><br><span class="line">QQ Browser 10.4(3341) Chromium70.0.3538.25\IE11.379.17763.0</span><br><span class="line">Microsoft Edge 44.17763.1.0</span><br><span class="line">Internet Explorer 11.379.17763.0</span><br><span class="line">&#x2F;&#x2F;IE8及以下版本无法正常显示</span><br><span class="line"></span><br><span class="line">&#x2F;* 版本信息 *&#x2F;</span><br><span class="line">$ hexo version</span><br><span class="line">hexo: 3.8.0</span><br><span class="line">hexo-cli: 1.1.0</span><br><span class="line">os: Windows_NT 10.0.17763 win32 x64</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">node: 10.15.3</span><br><span class="line">v8: 6.8.275.32-node.51</span><br><span class="line">uv: 1.23.2</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 64</span><br><span class="line">nghttp2: 1.34.0</span><br><span class="line">napi: 3</span><br><span class="line">openssl: 1.1.0j</span><br><span class="line">icu: 62.1</span><br><span class="line">unicode: 11.0</span><br><span class="line">cldr: 33.1</span><br><span class="line">tz: 2018e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 依赖包 *&#x2F;</span><br><span class="line">$ cat package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;3.8.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-asset-image&quot;: &quot;0.0.3&quot;, &#x2F;* 图片显示 *&#x2F;</span><br><span class="line">    &quot;hexo-blog-encrypt&quot;: &quot;^2.1.1&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^1.0.0&quot;, &#x2F;* Git 部署工具 *&#x2F;</span><br><span class="line">    &quot;hexo-douban&quot;: &quot;^1.1.3&quot;, &#x2F;* 豆瓣页面生成 *&#x2F;</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.6&quot;, &#x2F;* 生成 sitemap.xml，利于 SEO *&#x2F;</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &#x2F;* 默认安装 *&#x2F;</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^1.2.2&quot;, &#x2F;* RSS *&#x2F;</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &#x2F;* 默认安装 *&#x2F;</span><br><span class="line">    &quot;hexo-generator-sitemap&quot;: &quot;^1.2.0&quot;, &#x2F;* 生成 sitemap.xml，利于 SEO *&#x2F;</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &#x2F;* 默认安装 *&#x2F;</span><br><span class="line">    &quot;hexo-helper-live2d&quot;: &quot;^3.1.1&quot;, &#x2F;* 看板娘 *&#x2F;</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;, &#x2F;* 默认安装 *&#x2F;</span><br><span class="line">    &quot;hexo-symbols-count-time&quot;: &quot;^0.4.4&quot;,</span><br><span class="line">    &quot;hexo-tag-aplayer&quot;: &quot;^3.0.4&quot;, &#x2F;* 音乐播放插件，支持歌词 *&#x2F;</span><br><span class="line">    &quot;hexo-tag-dplayer&quot;: &quot;^0.3.3&quot;, &#x2F;* 视频播放插件，支持弹幕 *&#x2F;</span><br><span class="line">    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;, &#x2F;* 字数统计 *&#x2F;</span><br><span class="line">    &quot;live2d-widget-model-koharu&quot;: &quot;^1.0.5&quot; &#x2F;* 看板娘 *&#x2F;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 主题NexT版本 *&#x2F;</span><br><span class="line">NexT.Muse v7.1.0</span><br><span class="line"></span><br><span class="line">&#x2F;* 优化主题NexT的设计版式 *&#x2F;</span><br><span class="line">Muse</span><br></pre></td></tr></table></figure>

<p>样式还是看自己选择吧，我觉得都能设计的挺好看的，主要是看你想呈现出一个怎样的界面出来！</p>
<h3 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h3><p>站点配置文件和主题配置文件，名字都叫<code>_config.yml</code>，容易乱，这一点我在其它文章也不止一次的提过了。</p>
<ul>
<li>站点配置文件，位于站点文件夹根目录内：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;blog&#x2F;_config.yml</span><br></pre></td></tr></table></figure>

<ul>
<li>主题配置文件，位于主题文件夹根目录内：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;blog&#x2F;themes&#x2F;&lt;你的主题&gt;&#x2F;_config.yml</span><br></pre></td></tr></table></figure>

<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>进入正题啦！由于我以及写过了，不知道为什么这时候有一种偷完懒之后的感觉，真香~😂</p>
<p>好吧，附上快速访问链接👉<a href="https://blog.52bess.com/hexo.html">Hexo博客搭建</a></p>
<p>建议大家一定要看一看官方文档哦，毕竟是👉<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv">官方文档<i class="fa fa-external-link-alt"></i></span></p>
<p>当然了，你如果对GitHub提供的Pages服务不太满意的话，也可以选择搭建在自己的(Linux)服务器上，只不过会增加些开销！！！</p>
<h3 id="What-is-GiyHub-Pages"><a href="#What-is-GiyHub-Pages" class="headerlink" title="What is GiyHub Pages?"></a>What is GiyHub Pages?</h3><p>GitHub Pages是一种静态站点托管服务，旨在直接从GitHub存储库托管您的个人，组织或项目页面。这里附上GitHub Pages的网址👉<span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==">你好，世界<i class="fa fa-external-link-alt"></i></span></p>
<table>
<thead>
<tr>
<th><strong>问题</strong></th>
<th>解答</th>
</tr>
</thead>
<tbody><tr>
<td>Why is GitHub Pages?</td>
<td>首先免费，其次省心，最后可以学习使用 GitHub。</td>
</tr>
<tr>
<td>GitHub Pages有使用限制吗？</td>
<td>GitHub Pages源存储库的建议限制为1GB，每月100G流量，每小时大约能更新10次版本。超出配额后，可能会收到礼貌的邮件</td>
</tr>
<tr>
<td>超出限制的容量、或者是流量怎么办？</td>
<td>建议平常就使用国内各大云服务提供商，如<span class="exturl" data-url="aHR0cHM6Ly93d3cucWluaXUuY29tL3Byb2R1Y3RzL2tvZG8=">七牛云KODO<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcm9kdWN0L29zcw==">阿里云OSS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2Nvcw==">腾讯云COS<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5iYWlkdS5jb20vcHJvZHVjdC9ib3MuaHRtbA==">百度云BOS<i class="fa fa-external-link-alt"></i></span>等提供的对象存储上。甚至还可以设置<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmFsaXl1bi5jb20vd29yZHBvd2VyLzQ1MjQ3Ni0xLmh0bWw=">镜像回源<i class="fa fa-external-link-alt"></i></span>。</td>
</tr>
<tr>
<td>国内访问速度不行，有必要同时部署在 <span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0Lw==">Coding<i class="fa fa-external-link-alt"></i></span>上吗？</td>
<td>可以，但没必要。我原来是同时部署的，但是经常502，说来也巧，放弃Coding后，再也不502了。但是，Coding是部署在香港的服务器的哦！但是Coding经常被上有服务上暂停服务。。。</td>
</tr>
<tr>
<td>我可以用自己的域名吗？</td>
<td>可以，并且支持https。</td>
</tr>
<tr>
<td>可以用作商业用途吗？</td>
<td>GitHub Pages不适用于或不允许用作免费的网络托管服务来运行您的在线业务，电子商务网站或任何其他主要针对促进商业交易或提供商业软件即服务的网站（SaaS）</td>
</tr>
</tbody></table>
<p>如果你要去七牛云使用对象存储服务的话，不妨使用我的👉<span class="exturl" data-url="aHR0cHM6Ly9wb3J0YWwucWluaXUuY29tL3NpZ251cD9jb2RlPTNsY3FweXJjNGR5NnE=">邀请链接<i class="fa fa-external-link-alt"></i></span>，那样我就会获得5 GB/月 CDN 免费下载流量等奖励👌</p>
<h3 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h3><p>强制执行GitHub Pages的https，可能会遇到一些混合内容的问题。</p>
<p>如果您为自己的网站启用了HTTPS，并且您网站的HTML仍然通过HTTP引用了图片，CSS或JavaScript，那么您的网站就会提供混合内容，并且您可能无法加载资源。提供混合内容也会降低您网站的安全性。</p>
<p>要删除网站的混合内容，提高网站的安全性，并解决与加载混合内容相关的问题，修改网站的HTML文件并进行更改<code>http://</code>，<code>https://</code>以便通过HTTPS提供所有资源。</p>
<p>更多详情👉<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vYXJ0aWNsZXMvc2VjdXJpbmcteW91ci1naXRodWItcGFnZXMtc2l0ZS13aXRoLWh0dHBzI3Jlc29sdmluZy1wcm9ibGVtcy13aXRoLW1peGVkLWNvbnRlbnQ=">入口<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>默认的主题感觉不是很好看的样子，但是别的主题就不一样啦！😁我选的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0">NexT主题<i class="fa fa-external-link-alt"></i></span>，简洁美观、功能也算完善。这里附上官方的👉<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=">主题库链接<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="站点文件配置"><a href="#站点文件配置" class="headerlink" title="站点文件配置"></a>站点文件配置</h3><p>可以先去看看👉<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1s">官方文档<i class="fa fa-external-link-alt"></i></span>是怎么介绍的，然后可以参考参考我的👉<span class="exturl" data-url="aHR0cHM6Ly93d3cuNTJiZXNzLmNvbS96aGFuZGlhbi5odG1s">站点文件基本配置<i class="fa fa-external-link-alt"></i></span>，需要更多的操作，可以自己去Google看看呢！</p>
<h3 id="主题文件配置"><a href="#主题文件配置" class="headerlink" title="主题文件配置"></a>主题文件配置</h3><p>没错，还是建议你先看NexT主题的👉<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lmlpc3NuYW4uY29tLw==">官方文档<i class="fa fa-external-link-alt"></i></span>，一定要养成这个好习惯！啥都不说了，把我的贴出来大家参考吧！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Theme Core Configuration Settings</span><br><span class="line"># See: https:&#x2F;&#x2F;theme-next.org&#x2F;docs&#x2F;theme-settings&#x2F;</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># 更新相关，参考：</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&#x2F;issues&#x2F;328</span><br><span class="line">override: false</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Site Information Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 站点图标直接去 https:&#x2F;&#x2F;realfavicongenerator.net 下载</span><br><span class="line"># 建议放在 hexo-site&#x2F;source&#x2F;images&#x2F; 里（没有自己建）</span><br><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon-16x16-dog.png</span><br><span class="line">  medium: &#x2F;images&#x2F;favicon-32x32-dog.png</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line"># 修改图片名字保持一致即可！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rss: &#x2F;atom.xml</span><br><span class="line"></span><br><span class="line">footer:		# 页脚配置</span><br><span class="line">  since: 2018   # 这里填入你的建站年份</span><br><span class="line"></span><br><span class="line">  icon:</span><br><span class="line">    # 年份后面的图标，为 Font Awesome 图标</span><br><span class="line">	# 去挑一个吧！ https:&#x2F;&#x2F;fontawesome.com&#x2F;v4.7.0&#x2F;</span><br><span class="line">    name: fas fa-heartbeat	  # 图标名字</span><br><span class="line">    animated: true		  # 让你的图标跳动起来！</span><br><span class="line">    color: &quot;#ff0000&quot;      #看到我博客页脚的跳动着的红色爱心了吗？</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  powered:</span><br><span class="line">    enable: true</span><br><span class="line">    version: true</span><br><span class="line">    # 你不想页脚显示 由 Hexo 强力驱动 v3.8.0，可以关闭！</span><br><span class="line">  theme:</span><br><span class="line">    enable: true</span><br><span class="line">    version: true</span><br><span class="line">    # 同理，你不想页脚显示 主题 – NexT.Muse v7.1.0，可以关闭！</span><br><span class="line">    </span><br><span class="line">    beian:</span><br><span class="line">    enable: false</span><br><span class="line">    icp: </span><br><span class="line">    # 同理，如果你有备案信息，也可以放在这里</span><br><span class="line">    </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># SEO Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">canonical: true</span><br><span class="line"></span><br><span class="line">seo: false</span><br><span class="line"></span><br><span class="line"># If true, will add site-subtitle to index page, added in main hexo config.</span><br><span class="line"># subtitle: Subtitle</span><br><span class="line">index_with_subtitle: false</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 菜单设置 || 菜单图标设置（图标上面说了，不重复）</span><br><span class="line"># 项目换行可以更改显示顺序</span><br><span class="line"># 如果这个项前会显示 .menu</span><br><span class="line"># 解决方法：编辑 ~&#x2F;blog&#x2F;themes&#x2F;next&#x2F;languages 下的相应文件</span><br><span class="line"># 比如添加一个「留言」菜单，站点配置文件的 language 是 zh-CN</span><br><span class="line"># 则编辑 zh-CN.yml，在 menu: 项内添加一行 留言: 留言</span><br><span class="line"># 注意空格，且符号 : 为英文字符！</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  books: &#x2F;books&#x2F; || book  </span><br><span class="line">  movies: &#x2F;movies&#x2F; || video-camera  </span><br><span class="line">  games: &#x2F;games&#x2F; || gamepad</span><br><span class="line"></span><br><span class="line"># Enable&#x2F;Disable menu icons.</span><br><span class="line"># 是否开启菜单图标</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: false</span><br><span class="line">  </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 设计板式，都长啥样，去 README 里面的链接里看看</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next#live-preview</span><br><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">site_state: true</span><br><span class="line"></span><br><span class="line"># 侧栏社交链接设置，与上面菜单差不多，要生效记得把前面的 # 去掉</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;besscroft || github</span><br><span class="line">  E-Mail: mailto:631908942@gmail.com || envelope</span><br><span class="line">  </span><br><span class="line"># 侧栏社交链接图标设置</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br><span class="line">  </span><br><span class="line"># 侧栏友链设置</span><br><span class="line">links_icon: globe</span><br><span class="line">links_title: 友♂链</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  关于此博客: https:&#x2F;&#x2F;blog.52bess.com&#x2F;about&#x2F;</span><br><span class="line">  </span><br><span class="line">avatar:</span><br><span class="line"> # 侧栏头像设置</span><br><span class="line">  url: https:&#x2F;&#x2F;*****.com&#x2F;avatar.png</span><br><span class="line">  rounded: false</span><br><span class="line">  opacity: 1</span><br><span class="line">  rotated: false</span><br><span class="line">  </span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  number: true</span><br><span class="line"></span><br><span class="line">  wrap: false</span><br><span class="line"># 开启后可能要在 custom.styl 里加代码</span><br><span class="line">  max_depth: 6</span><br><span class="line">  </span><br><span class="line">sidebar:</span><br><span class="line">  # 侧栏的位置，left或right</span><br><span class="line">  position: left</span><br><span class="line">  </span><br><span class="line">  display: post   # 样式我的是默认的post</span><br><span class="line">  # 只对 Pisces 和 Gemini 设计版式有效！</span><br><span class="line">  offset: 12</span><br><span class="line">  # 只对 Muse 和 Mist 设计版式有效！</span><br><span class="line">  onmobile: false</span><br><span class="line">  # 移动端显示侧栏，只对 Muse 和 Mist 设计版式有效！</span><br><span class="line">  dimmer: false</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Post Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 点击 [Read More]，页面自动滚动到 &lt;!-- more --&gt; 标记处</span><br><span class="line">scroll_to_more: false</span><br><span class="line"></span><br><span class="line"># 用 cookies 保存浏览的位置信息，意味着重新打开这个页面后</span><br><span class="line"># 页面就会自动滚动到上次的位置，除非读者清理浏览器 cookies</span><br><span class="line">save_scroll: false</span><br><span class="line"></span><br><span class="line"># 将每篇文章 Front-matter 里 description 的文字作为页面显示的文章摘要</span><br><span class="line">excerpt_description: false</span><br><span class="line"></span><br><span class="line"># 按字数自动加入 [Read More]，不建议！</span><br><span class="line"># 建议在文章中加入 &lt;!-- more --&gt;</span><br><span class="line"># 自定义 [Read More] 按钮之前要显示的内容！</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"># 文章顶部显示的文章元数据设置</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true # 显示文字说明</span><br><span class="line">  created_at: true # 显示文章创建时间</span><br><span class="line">  updated_at:</span><br><span class="line">    enable: true # 隐藏文章修改时间</span><br><span class="line">    another_day: true # 只有当修改时间和创建时间不是同一天的时候才显示</span><br><span class="line">  categories: true # 隐藏分类信息</span><br><span class="line"></span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcount</span><br><span class="line"># 显示统计字数和估计阅读时长</span><br><span class="line"># 注意：这个要安装插件，先进入站点文件夹根目录</span><br><span class="line"># 然后：npm install hexo-wordcount --save</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: false</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: false</span><br><span class="line"></span><br><span class="line"># Wechat Subscriber</span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enable: true</span><br><span class="line">  qcode: &#x2F;uploads&#x2F;wechat-qcode.jpg</span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br><span class="line">  </span><br><span class="line"># Reward</span><br><span class="line">reward:</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpg</span><br><span class="line">  </span><br><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  # enable: false</span><br><span class="line">  # license: CC BY-NC-SA 3.0</span><br><span class="line">  # license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br><span class="line">  # 版权信息</span><br><span class="line">  </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Misc Theme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 移动端把页面两边留白去除</span><br><span class="line"># Reduce padding &#x2F; margin indents on devices with narrow width.</span><br><span class="line">mobile_layout_economy: false</span><br><span class="line"></span><br><span class="line"># Android 上 Chrome 浏览器顶部颜色设置</span><br><span class="line">android_chrome_color: &quot;#222&quot;</span><br><span class="line"># Android 端 QQ浏览器，很多配置都无法显示出来。。。</span><br><span class="line"></span><br><span class="line"># Custom Logo</span><br><span class="line"># Do not support Scheme Mist currently.</span><br><span class="line">custom_logo:</span><br><span class="line">  enable: false</span><br><span class="line">  image: #&#x2F;uploads&#x2F;custom-logo.jpg</span><br><span class="line">  </span><br><span class="line"># Available value:</span><br><span class="line">#    normal | night | night eighties | night blue | night bright</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class="line"># 代码高亮主题设置</span><br><span class="line"># 都长啥样自己点开上面的链接查看</span><br><span class="line">highlight_theme: normal</span><br><span class="line"></span><br><span class="line"># 字体设置</span><br><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 &#x2F;&#x2F;fonts.googleapis.com (默认值)</span><br><span class="line">  host: https:&#x2F;&#x2F;fonts.loli.net</span><br><span class="line"></span><br><span class="line">  # Global font settings used for all elements in &lt;body&gt;.</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for Headlines (H1, H2, H3, H4, H5, H6).</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts.</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC</span><br><span class="line"></span><br><span class="line">  # Font settings for Logo.</span><br><span class="line">  # Fallback to &#96;global&#96; font settings.</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Noto Serif SC</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line">    </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Third Party Services Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Math Equations Render Support</span><br><span class="line">math:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  engine: mathjax</span><br><span class="line">  #engine: katex</span><br><span class="line"></span><br><span class="line">  mathjax:</span><br><span class="line">    cdn: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@2.7.1&#x2F;MathJax.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span><br><span class="line"> # 这一大串都是默认的，还有一些不列举了，感觉会水贴</span><br><span class="line"> </span><br><span class="line"># Han Support docs: https:&#x2F;&#x2F;hanzi.pro&#x2F;</span><br><span class="line"># 汉字标准格式，没用过暂时不了解</span><br><span class="line">han: false</span><br><span class="line"></span><br><span class="line"># 评论系统，当然id和key我就不提供了，这个可以自己去注册</span><br><span class="line"># leancloud网址：https:&#x2F;&#x2F;leancloud.cn&#x2F;dashboard&#x2F;login.html#&#x2F;signup</span><br><span class="line">valine:</span><br><span class="line">  enable: true # 是否开启</span><br><span class="line">  appid:  # 你的leancloud应用appid</span><br><span class="line">  appkey:  # 你的leancloud应用appkey</span><br><span class="line">  notify: false # mail notifier, See: https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki</span><br><span class="line">  verify: true </span><br><span class="line">  placeholder: 说点儿什么吧o(*￣▽￣*)o </span><br><span class="line">  avatar: mm </span><br><span class="line">  guest_info: nick,mail,link r</span><br><span class="line">  pageSize: 10 </span><br><span class="line">  visitor: false </span><br><span class="line">  comment_count: true </span><br><span class="line"></span><br><span class="line"># 不蒜子统计，用于在页脚显示总访客数和总浏览量，将 false 改为 true 就能直接使用</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br><span class="line"></span><br><span class="line"># 要安装插件才能使用，先进入站点文件夹根目录</span><br><span class="line"># 然后：npm install hexo-generator-searchdb --save</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: false</span><br><span class="line">  </span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Tags Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 主题的标签样式，有 simple、note、label、tabs 四种</span><br><span class="line">note:</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border_radius: 3</span><br><span class="line">  light_bg_offset: 0</span><br><span class="line">  </span><br><span class="line"># 标签</span><br><span class="line">tabs:</span><br><span class="line">  enable: true</span><br><span class="line">  transition:</span><br><span class="line">    tabs: false</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 0</span><br><span class="line">  </span><br><span class="line"># Use velocity to animate everything.</span><br><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: false</span><br><span class="line">  transition:</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: slideDownIn</span><br><span class="line">    post_body: slideDownIn</span><br><span class="line">    coll_header: slideLeftIn</span><br><span class="line">    sidebar: slideUpIn</span><br><span class="line"></span><br><span class="line"># 动态背景，但是我觉得放一张好看的图片更好</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: false</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &#39;0,0,255&#39; # RGB values, use &#39;,&#39; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br><span class="line"># JavaScript 3D library.</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-three</span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false</span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false</span><br><span class="line"></span><br><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line">  # 这个下面的东西就不贴出来了，建议大家按需使用，同时找一个好一点的CDN，不然速度感人啊！！！</span><br><span class="line">  </span><br><span class="line"># Assets</span><br><span class="line">css: css</span><br><span class="line">js: js</span><br><span class="line">images: images</span><br><span class="line"></span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: </span><br><span class="line"></span><br><span class="line">nav:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  categories: &#x2F;categories</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  enable: true</span><br><span class="line">  </span><br><span class="line">fireworks: true</span><br><span class="line"></span><br><span class="line"># window woblle</span><br><span class="line">wobble:</span><br><span class="line">  enable: true  # 是否开启边缘波动效果</span><br><span class="line">  radius: 50  # 波动半径</span><br><span class="line">  sidebar: true  # 开启侧边栏边缘摆动</span><br><span class="line">  header: true  # 开启头部边缘摆动</span><br><span class="line">  footer: true  # 开启脚部边缘摆动</span><br><span class="line">  </span><br><span class="line">fireworks: true</span><br><span class="line"></span><br><span class="line"># typing effect</span><br><span class="line">typing_effect:</span><br><span class="line">  colorful: true  # 礼花特效</span><br><span class="line">  shake: false  # 震动特效</span><br><span class="line">  </span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: false</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: false</span><br><span class="line">  </span><br><span class="line"># Theme version</span><br><span class="line">version: 7.1.0</span><br></pre></td></tr></table></figure>

<h2 id="自定义网页布局"><a href="#自定义网页布局" class="headerlink" title="自定义网页布局"></a>自定义网页布局</h2><p>我觉得这个对于学过前端三🗡客的同学们来说还是比较简单的，不做多解释。但是对于没学的同学，强烈建议去看看这篇大佬的文章👉<span class="exturl" data-url="aHR0cHM6Ly93d3cuY2R1eXpoLmNvbS9oZXhvLXNldHRpbmdzLTMv">这里<i class="fa fa-external-link-alt"></i></span>，看完之后，你基本就明白在哪个文件修改了，一些基本的步骤也能掌握！</p>
<p>主要是修改<code>/blog/themes/next/source/css/_custom/custom.styl</code>，那么数据去哪里找呢？当然是浏览器按F12进行调试啊。如果是计算机专业，期末做过作品的你，没少受过折磨吧？</p>
<p><code>hexo s</code>后可以直接本地调试，也就是更改文件保存后，Hexo 后台会自动重新渲染文件，所以只要稍等片刻，浏览器刷新一下就能看到效果。</p>
<p>我建议你使用Google浏览器进行调试，可以先看看，嗯~ o(<em>￣▽￣</em>)o，没错👉<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL2Nocm9tZS1kZXZ0b29scy8=">Google 开发者工具<i class="fa fa-external-link-alt"></i></span>，记得给文档5颗星星支持一下下！</p>
<h2 id="自定义鼠标点击效果"><a href="#自定义鼠标点击效果" class="headerlink" title="自定义鼠标点击效果"></a>自定义鼠标点击效果</h2><h3 id="爱心效果"><a href="#爱心效果" class="headerlink" title="爱心效果"></a>爱心效果</h3><p>在<code>/themes/next/source/js/src</code>新建文件<code>clicklove.js</code>，并添加如下代码</p>
<p><a id="download" href="https://cdn.jsdelivr.net/gh/besscroft/cdn@3.0/js/clicklove.js" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a>代码过长，在文章里面不太好排版，毕竟不是IDE，所以点击之后复制即可！</p>
<p>然后在<code>/themes/next/layout/_layout.swig</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小心心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;love.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体效果"><a href="#字体效果" class="headerlink" title="字体效果"></a>字体效果</h3><p>嗯，我们以社会主义核心价值观为例，当然，实际的使用场景，也可以改成别的。</p>
<p>在<code>/themes/next/source/js/src</code>新建文件<code>click_show_text.js</code>，并添加如下代码</p>
<p><a id="download" href="https://cdn.jsdelivr.net/gh/besscroft/cdn@3.0/js/click_show_text.js" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p>
<p>然后在<code>/themes/next/layout/_layout.swig</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;click_show_text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="烟花爆炸效果"><a href="#烟花爆炸效果" class="headerlink" title="烟花爆炸效果"></a>烟花爆炸效果</h3><p>在<code>/themes/next/source/js/src</code>新建文件<code>fireworks.js</code>，并添加如下代码</p>
<p><a id="download" href="https://cdn.jsdelivr.net/gh/besscroft/cdn@3.0/js/fireworks.js" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p>
<p>然后在<code>/themes/next/layout/_layout.swig</code>中添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">&lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed; left: 0; top: 0; z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加文章结束语"><a href="#添加文章结束语" class="headerlink" title="添加文章结束语"></a>添加文章结束语</h2><p>在<code>\themes\next\layout\_macro</code>中新建<code>passage-end-tag.swig</code>文件，添加代码至该文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>大小自己看着调整，毕竟每个人喜欢的不一样。</p>
<p>打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code>后，<code>post-footer</code>前，添加下面内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;passage-end-tag.swig&#39; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>

<h2 id="设置文章背景"><a href="#设置文章背景" class="headerlink" title="设置文章背景"></a>设置文章背景</h2><p>在\themes\next\source\css\_custom\custom.styl文件内增添如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*设置博文背景*&#x2F;</span><br><span class="line">.main-inner &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    opacity: 0.9;</span><br></pre></td></tr></table></figure>

<p>background后为rgb颜色代码，百度来一个rgb色值粘贴即可替换博文背景颜色（替换了也很丑）<br>opacity后数值为博文背景透明度，可设置0.0-1.0数值，值越小透明度越高。</p>
<h2 id="为主页文章添加阴影效果"><a href="#为主页文章添加阴影效果" class="headerlink" title="为主页文章添加阴影效果"></a>为主页文章添加阴影效果</h2><p>在\themes\next\source\css\_custom\custom.styl文件内增添如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 主页文章添加阴影效果</span><br><span class="line">.post &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">  margin-bottom: 60px;</span><br><span class="line">  padding: 25px;</span><br><span class="line">  webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">  moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>background和上面设置文章背景一样，为文章背景颜色；opacity透明度；margin-top上边距；margin-bottom下边距；padding框间距；webkit-box-shadow和moz-box-shadow为阴影长宽设置。</p>
<h2 id="后续更新中。。。"><a href="#后续更新中。。。" class="headerlink" title="后续更新中。。。"></a>后续更新中。。。</h2><h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p>感谢<code>reuixiy</code>大佬的👉<span class="exturl" data-url="aHR0cHM6Ly9yZXVpeGl5LmdpdGh1Yi5pby90ZWNobm9sb2d5L2NvbXB1dGVyL2NvbXB1dGVyLWFpZGVkLWFydC8yMDE3LzA2LzA5L2hleG8tbmV4dC1vcHRpbWl6YXRpb24uaHRtbA==">这篇文章<i class="fa fa-external-link-alt"></i></span>，在此基础上完善了一些，也删除了一些，毕竟版本也有些许区别了。学习到了很多，同时结合我自己的思路写了这篇文章！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>个性</tag>
      </tags>
  </entry>
  <entry>
    <title>神器Termux的使用记录</title>
    <url>/posts/2019/termux.html</url>
    <content><![CDATA[<p>Termux是一个Android终端模拟器和Linux环境应用程序，可以直接使用，无需root或设置。自动安装最小基本系统 - 使用APT包管理器可以使用其他软件包。</p>
<a id="more"></a>

<h2 id="Termux使用"><a href="#Termux使用" class="headerlink" title="Termux使用"></a>Termux使用</h2><p>我觉得吧，虽然我喜欢玩游戏，但是我不怎么玩手游，我觉得还是以前的手游(主要指单机)好玩些，现在的手游都提不起我的兴趣了。那么，在安卓手机上，就有这样一个替代品——<span class="exturl" data-url="aHR0cHM6Ly90ZXJtdXguY29tLw==">Termux<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="我的准备步骤"><a href="#我的准备步骤" class="headerlink" title="我的准备步骤"></a>我的准备步骤</h3><p>1.先下载安装，我是在Google play下的，或者可以去👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Rlcm11eC90ZXJtdXgtYXBw">GitHub<i class="fa fa-external-link-alt"></i></span>。</p>
<p>2.安装完之后，我们进入Termux</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="termux/termux01.png" alt></p>
<p>然后先更新源和升级软件包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt update	&#x2F;&#x2F;更新源</span><br><span class="line">apt upgrade  &#x2F;&#x2F;升级软件包</span><br></pre></td></tr></table></figure>

<p>3.安装一些基本的包，我推荐你安装一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install git  &#x2F;&#x2F;分布式管理工具</span><br><span class="line">apt install wget   &#x2F;&#x2F;下载工具</span><br><span class="line">apt install vim    &#x2F;&#x2F;vim编辑器</span><br><span class="line">apt install tar  &#x2F;&#x2F;解压缩工具</span><br><span class="line">apt install less  &#x2F;&#x2F;termux下vim支持触摸移动光标移动位置</span><br></pre></td></tr></table></figure>

<p>4.更换国内源，没错，这样网络速度会更快，更换Termux清华大学源,加快软件包下载速度.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export EDITOR&#x3D;vi  &#x2F;&#x2F;设置默认编辑器</span><br><span class="line">apt edit-sources  &#x2F;&#x2F;编辑源文件</span><br><span class="line">将原来的https:&#x2F;&#x2F;termux.net官方源替换为http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;termux stable main</span><br><span class="line">ESC，输入:wq保存并退出</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi  $PREFIX&#x2F;etc&#x2F;apt&#x2F;sources.list  &#x2F;&#x2F;直接编辑源文件</span><br><span class="line"># 安装基本工具</span><br><span class="line">	pkg update</span><br><span class="line">	pkg install vim curl wget git unzip unrar</span><br></pre></td></tr></table></figure>

<p>5.编辑启动问候语</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim $PREFIX&#x2F;etc&#x2F;motd  &#x2F;&#x2F;编辑问候语文件直接修改问候语</span><br></pre></td></tr></table></figure>

<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><code>Ctrl</code>键是终端用户常用的按键 - 但大多数触摸键盘都没有这个按键。为此，Termux使用<code>音量减小按钮</code>来模拟<code>Ctrl</code>键。<br>例如，在触摸键盘上按<code>音量减小</code>+ <code>L</code>发送与在硬件键盘上按<code>Ctrl + L</code>相同的输入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl+A -&gt; 将光标移动到行首</span><br><span class="line">Ctrl+C -&gt; 中止当前进程</span><br><span class="line">Ctrl+D -&gt; 注销终端会话</span><br><span class="line">Ctrl+E -&gt; 将光标移动到行尾</span><br><span class="line">Ctrl+K -&gt; 从光标删除到行尾</span><br><span class="line">Ctrl+L -&gt; 清除终端</span><br><span class="line">Ctrl+Z -&gt; 挂起（发送SIGTSTP到）当前进程</span><br></pre></td></tr></table></figure>

<p><code>音量加键</code>也可以作为产生特定输入的<code>特殊键</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">音量加+E -&gt; Esc键</span><br><span class="line">音量加+T -&gt; Tab键</span><br><span class="line">音量加+1 -&gt; F1（和音量增加+ 2→F2等）</span><br><span class="line">音量加+0 -&gt; F10</span><br><span class="line">音量加+B -&gt; Alt + B，使用readline时返回一个单词</span><br><span class="line">音量加+F -&gt; Alt + F，使用readline时转发一个单词</span><br><span class="line">音量加+X -&gt; Alt+X</span><br><span class="line">音量加+W -&gt; 向上箭头键</span><br><span class="line">音量加+A -&gt; 向左箭头键</span><br><span class="line">音量加+S -&gt; 向下箭头键</span><br><span class="line">音量加+D -&gt; 向右箭头键</span><br><span class="line">音量加+L -&gt; | （管道字符）</span><br><span class="line">音量加+H -&gt; 〜（波浪号字符）</span><br><span class="line">音量加+U -&gt; _ (下划线字符)</span><br><span class="line">音量加+P -&gt; 上一页</span><br><span class="line">音量加+N -&gt; 下一页</span><br><span class="line">音量加+. -&gt; Ctrl + \（SIGQUIT）</span><br><span class="line">音量加+V -&gt; 显示音量控制</span><br><span class="line">音量加+Q -&gt; 显示额外的按键视图</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p><code>Termux</code>除了支持<code>apt</code>命令外,还在此基础上封装了<code>pkg</code>命令,<code>pkg</code>命令向下兼容<code>apt</code>命令.<code>apt</code>命令大家应该都比较熟悉了,这里直接简单的介绍下<code>pkg</code>命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg search &lt;query&gt;              搜索包</span><br><span class="line">pkg install &lt;package&gt;           安装包</span><br><span class="line">pkg uninstall &lt;package&gt;         卸载包</span><br><span class="line">pkg reinstall &lt;package&gt;         重新安装包</span><br><span class="line">pkg update                      更新源</span><br><span class="line">pkg upgrade                     升级软件包</span><br><span class="line">pkg list-all                    列出可供安装的所有包</span><br><span class="line">pkg list-installed              列出已经安装的包</span><br><span class="line">pkg shoe &lt;package&gt;              显示某个包的详细信息</span><br><span class="line">pkg files &lt;package&gt;             显示某个包的相关文件夹路径</span><br></pre></td></tr></table></figure>

<h3 id="更换配色"><a href="#更换配色" class="headerlink" title="更换配色"></a>更换配色</h3><p>执行下面这个命令确保已经安装好了curl，没有的话根据它的提示安装，你没安装的话，执行了下面这条语句，它会给你一条安装curl的语句的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;github.com&#x2F;Cabbagec&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>Android6.0以上会弹框确认是否授权,<code>允许</code>授权后<code>Termux</code>可以方便的访问SD卡文件.<br>脚本允许后先后有如下两个选项:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter a number, leave blank to not to change:&lt;自己选一个自己喜欢的&gt;</span><br><span class="line">Enter a number, leave blank to not to change:&lt;自己选一个自己喜欢的&gt;</span><br></pre></td></tr></table></figure>

<p>分别选择<code>背景色</code>和<code>字体</code><br>想要继续更改挑选配色的话,继续运行脚本来再次筛选:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/termux-ohmyzsh/install.sh</span><br></pre></td></tr></table></figure>

<p><code>exit</code>重启<code>sessions</code>会话生效配置，如想深入使用，请访问👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NhYmJhZ2VjL3Rlcm11eC1vaG15enNo">GitHub<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="管理员身份"><a href="#管理员身份" class="headerlink" title="管理员身份"></a>管理员身份</h3><h4 id="手机没有root"><a href="#手机没有root" class="headerlink" title="手机没有root"></a>手机没有root</h4><p>利用<code>proot</code>工具来模拟某些需要root的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install proot</span><br></pre></td></tr></table></figure>

<p>然后终端下面输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">termux-chroot</span><br></pre></td></tr></table></figure>

<p>即可模拟<code>root</code>环境<br>在这个<code>proot</code>环境下面,相当于是进入了<code>home</code>目录,可以很方便地进行一些配置.</p>
<p>在管理员身份下，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>可回到普通用户身份。</p>
<h4 id="手机已经root"><a href="#手机已经root" class="headerlink" title="手机已经root"></a>手机已经root</h4><p>安装<code>tsu</code>,这是一个<code>su</code>的termux版本,用来在termux上替代<code>su</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install tsu</span><br></pre></td></tr></table></figure>

<p>然后终端下面输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsu</span><br></pre></td></tr></table></figure>

<p>即可切换<code>root</code>用户,这个时候会弹出<code>root</code>授权提示,给予其<code>root</code>权限,效果图如下:</p>
<p>在管理员身份下，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>可回到普通用户身份。</p>
<h2 id="人生苦短、我选Python"><a href="#人生苦短、我选Python" class="headerlink" title="人生苦短、我选Python"></a>人生苦短、我选Python</h2><h3 id="安装python2-7"><a href="#安装python2-7" class="headerlink" title="安装python2.7"></a>安装python2.7</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkg install python2</span><br></pre></td></tr></table></figure>

<p>安装完成后,使用<code>python2</code>命令启动<code>python 2.7.16</code>环境.</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="termux/termux02.jpg" alt></p>
<p>然后输入<code>exit()</code>退出。</p>
<h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkg install python</span><br></pre></td></tr></table></figure>

<p>安装完成后,使用<code>python</code>命令启动<code>python 3.7.3</code>环境.</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="termux/termux03.jpg" alt></p>
<p>然后输入<code>exit()</code>退出。</p>
<h3 id="升级pip版本"><a href="#升级pip版本" class="headerlink" title="升级pip版本"></a>升级pip版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip</span><br><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>这两条命令分别升级了<code>pip2</code>和<code>pip3</code>到最新版.</p>
<h3 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pkg install clang</span><br><span class="line">pip install ipython</span><br><span class="line">pip3.6 install ipython</span><br></pre></td></tr></table></figure>

<p>ipython是什么，怎么用，不需要过多的解释。在termux里，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipython</span><br><span class="line">ipython2</span><br></pre></td></tr></table></figure>

<p>即可进入py2和py3的终端了。</p>
<h2 id="什么？还有Nodejs？"><a href="#什么？还有Nodejs？" class="headerlink" title="什么？还有Nodejs？"></a>什么？还有Nodejs？</h2><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure>

<h2 id="MariaDB-MySQL-安装"><a href="#MariaDB-MySQL-安装" class="headerlink" title="MariaDB(MySQL)安装"></a>MariaDB(MySQL)安装</h2><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。</p>
<h3 id="安装mariadb"><a href="#安装mariadb" class="headerlink" title="安装mariadb"></a>安装mariadb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install mariadb</span><br></pre></td></tr></table></figure>

<h3 id="安装基本数据"><a href="#安装基本数据" class="headerlink" title="安装基本数据"></a>安装基本数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_install_db</span><br></pre></td></tr></table></figure>

<h3 id="启动mariadb服务"><a href="#启动mariadb服务" class="headerlink" title="启动mariadb服务"></a>启动mariadb服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld</span><br></pre></td></tr></table></figure>

<p>启动完成后,这个会话就一直存活,类似与debug调试一样,只有新建会话才可以操作.</p>
<h3 id="新建termux会话"><a href="#新建termux会话" class="headerlink" title="新建termux会话"></a>新建termux会话</h3><p>由于mariadb安装的时候没有设置密码,当前的<code>mariadb</code>密码为<code>空</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure>

<p>直接进入<code>mariadb</code>数据库.输入<code>exit</code>退出数据库.</p>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>输入一下命令,进行密码相关的安全设置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p><strong>输入当前输入密码</strong><br>因为是<code>空</code>密码,这里默认 <code>回车</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter current password <span class="keyword">for</span> root (enter <span class="keyword">for</span> none):</span><br></pre></td></tr></table></figure>

<p><strong>设置新密码</strong><br>这里设置新的root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br></pre></td></tr></table></figure>

<p><strong>其他设置</strong><br>下面根据个人偏好来进行设置,没有绝对的要求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Remove anonymous users? [Y/n] Y                <span class="comment">#是否移除匿名用户</span></span><br><span class="line">Disallow root login remotely? [Y/n] n          <span class="comment">#是否不允许root远程登录</span></span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? [Y/n] n <span class="comment">#是否移除test数据库</span></span><br><span class="line">Reload privilege tables now? [Y/n] y           <span class="comment">#是否重新加载表的权限</span></span><br></pre></td></tr></table></figure>

<h3 id="使用密码登录数据库"><a href="#使用密码登录数据库" class="headerlink" title="使用密码登录数据库"></a>使用密码登录数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password:****</span><br></pre></td></tr></table></figure>

<h2 id="听说PHP是世界上最好的语言？"><a href="#听说PHP是世界上最好的语言？" class="headerlink" title="听说PHP是世界上最好的语言？"></a>听说PHP是世界上最好的语言？</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install php</span><br></pre></td></tr></table></figure>

<h3 id="编写测试文件"><a href="#编写测试文件" class="headerlink" title="编写测试文件"></a>编写测试文件</h3><p>在家目录下建一个<code>www</code>文件夹:<code>mkdir www</code><br>在<code>www</code>文件夹下新建一个<code>index.php</code>文件,其内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>具体操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir www</span><br><span class="line">vim www&#x2F;index.php</span><br><span class="line">tree www&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="启动WebServer"><a href="#启动WebServer" class="headerlink" title="启动WebServer"></a>启动WebServer</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -S 127.0.0.1:8080 -t www&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="nginx？"><a href="#nginx？" class="headerlink" title="nginx？"></a>nginx？</h2><p>Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性.</p>
<h3 id="安装nginx包"><a href="#安装nginx包" class="headerlink" title="安装nginx包"></a>安装nginx包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pkg install nginx</span><br></pre></td></tr></table></figure>

<h3 id="切换root用户"><a href="#切换root用户" class="headerlink" title="切换root用户"></a>切换root用户</h3><p>尝试下能不能解析默认的<code>index.html</code>主页<br>这个文件在<code>termux</code>上的默认位置为<code>/data/data/com.termux/files/usr/share/nginx/html/index.html</code><br><strong>切换root用户</strong></p>
<p>默认的普通权限无法启动nginx,需要模拟<code>root</code>权限才可以</p>
<p>没有这个命令的话,手动安装<code>pkg install proot</code>包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">termux-chroot</span><br></pre></td></tr></table></figure>

<p>进入模拟的root环境</p>
<h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><p>在模拟的root环境下启动<code>nginx</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>

<p><code>termux</code>上<code>nginx</code>默认的端口是<code>8080</code><br>查看下<code>8080</code>端口是否在运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -an |grep 8080</span><br></pre></td></tr></table></figure>

<p>然后手机本地直接访问:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080</span><br></pre></td></tr></table></figure>

<p>查看下nginx是否正常启动。</p>
<h2 id="搭建WordPress"><a href="#搭建WordPress" class="headerlink" title="搭建WordPress"></a>搭建WordPress</h2><p>这里只是用<code>wordpress</code>做个典型安利来讲解,类似地可以安装<code>Discuz</code>,<code>DeDecms</code>等国内主流的PHP应用程序.</p>
<h3 id="方法一-使用PHP内置的Web-Server"><a href="#方法一-使用PHP内置的Web-Server" class="headerlink" title="方法一 使用PHP内置的Web Server"></a>方法一 使用PHP内置的Web Server</h3><p>确保安装并配置了<code>php</code>和<code>mariadb</code>,没有安装好的话,参考本文中具体细节部分来进行安装.<br><strong>新建数据库</strong></p>
<p><code>***</code> 这里是mysql的密码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p*** -e"create database wordpress;show databases;"</span><br></pre></td></tr></table></figure>

<p><strong>下载解压wordpress</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/wordpress-4.9.4-zh_CN.zip</span><br><span class="line">pkg install unzip</span><br><span class="line">unzip wordpress-4.9.4-zh_CN.zip</span><br></pre></td></tr></table></figure>

<p><strong>启动PHP Web Server</strong><br>到解压后的<code>wordpress</code>目录下,执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wordpress</span><br><span class="line">php -S 127.0.0.1:8080</span><br></pre></td></tr></table></figure>

<p>然后浏览器访问<code>127.0.0.1:8080</code>开始进行<code>wordperss</code>的安装.</p>
<h3 id="方法二-nginx-PHP-Mariadb"><a href="#方法二-nginx-PHP-Mariadb" class="headerlink" title="方法二 nginx+PHP+Mariadb"></a>方法二 nginx+PHP+Mariadb</h3><p>上面使用的方法一是直接使用PHP自带的<code>PHP Web Server</code>来运行的,看上去不够严谨~,所以这里用<code>nginx</code>来部署<code>wordpress</code>.<br>确保安装了<code>PHP</code>,<code>php-fpm</code>,<code>mariadb</code>,没有安装的话,参考本文中具体细节部分来进行安装和配置.<br><strong>新建数据</strong>和<strong>wordpress下载</strong>参考上面的<code>方法一</code>,这里主要介绍使用<code>nginx</code>去解析<code>wordpress</code>源文件.<br>当前解压后<code>wordpress</code>的绝对路径是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/data/data/com.termux/files/home/wordpress</span><br></pre></td></tr></table></figure>

<p><strong>编辑nginx.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改为如下几处:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root   &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home&#x2F;wordpress;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_FILENAME  &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;home&#x2F;wordpress$fastcgi_script_name;</span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="termux/termux04.png" alt></p>
<h4 id="启动php-fpm和nginx"><a href="#启动php-fpm和nginx" class="headerlink" title="启动php-fpm和nginx"></a>启动php-fpm和nginx</h4><p>在<code>proot</code>环境下面分别启动<code>php-fpm</code>和<code>nginx</code>,这里的<code>nginx</code>不在<code>proot</code>环境下启动后会出一些问题,感兴趣的可以自己去研究看看.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php-fpm</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<p><strong>安装wordpress</strong><br>浏览器访问:<code>http://127.0.0.1:8080/wp-admin/setup-config.php</code>进行安装.</p>
<p>同理安装其他博客也就轻而易举了,可玩性大大增加~</p>
<h2 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h2><p>没错还能搭建Hexo，但是我的hexo是用的电脑。但是这并不代表手机就不能玩了，你要是觉得不方便，还可以用电脑来控制。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="部署hexo博客环境"><a href="#部署hexo博客环境" class="headerlink" title="部署hexo博客环境"></a>部署hexo博客环境</h3><p>然后建立一个目录,然后到这个目录下初始化hexo环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir hexoblog  #手动创建一个目录</span><br><span class="line">cd hexoblog  </span><br><span class="line">hexo init   #初始化hexo环境</span><br><span class="line">hexo g      #生成静态文件</span><br><span class="line">hexo s      #启动hexo</span><br></pre></td></tr></table></figure>

<p>然后就跑起来一个最基本的hexo博客<br>关于hexo博客的详细教程,建议搭建去参考hexo官方文档,我这里重点在于 termux 其他的不作过多的叙述.</p>
<h2 id="什么？还能玩Linux？"><a href="#什么？还能玩Linux？" class="headerlink" title="什么？还能玩Linux？"></a>什么？还能玩Linux？</h2><p>是的，可以玩。</p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1.下载安装脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;funs.ml&#x2F;file&#x2F;atilo</span><br></pre></td></tr></table></figure>

<p>2.设置执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x  atilo</span><br></pre></td></tr></table></figure>

<p>3.运行atilo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;atilo</span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="termux/termux05.png" alt></p>
<p>通过它告诉我们的用法，我们就可以来安装了，注意流量哦，记得用WiFi，土豪随意。</p>
<p>4.比如安装Arch试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;atilo arch</span><br></pre></td></tr></table></figure>

<p>然后稍等一会儿，安装完成之后会提示你通过startarch指令启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startarch</span><br></pre></td></tr></table></figure>

<p>5.如果你不想要了，也可以删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;atilo -r arch</span><br></pre></td></tr></table></figure>

<h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>使用<code>ngrok</code>或者<code>frp</code>可以将<code>Termux</code>上面搭建的网站映射到外网上去,<code>手机建站</code>也不是不可能了.</p>
<h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p>感谢<code>国光</code>大佬的<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3Fsc2VjLmNvbS8yMDE4LzA1L3Rlcm11eC5odG1sI3RvYy1oZWFkaW5nLTQx">这篇文章<i class="fa fa-external-link-alt"></i></span>，虽然本文很多东西不是出自这篇文章，主要是我自己玩过的东西。但是呢，最开始接触<code>Termux</code>就是在国光大佬的文章下学会的，虽然也去<code>Google</code>爬了不少坑，但好歹会“用”了😂</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo之魔法操作</title>
    <url>/posts/2019/sao.html</url>
    <content><![CDATA[<p>这篇博文用来记录关于hexo的一些魔法操作，主要针对于NEXT主题。将会在未来很长一段时间内持续更新，希望对大家有所帮助。</p>
<a id="more"></a>

<h2 id="常规基本操作"><a href="#常规基本操作" class="headerlink" title="常规基本操作"></a>常规基本操作</h2><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>我们在搭建好了Hexo博客之后，肯定是需要写文章上去的。 那么，首先打开git，在命令行输入这些指令来创建文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;  &#x2F;&#x2F;[这里是文章布局]，&lt;这里是文章标题&gt;</span><br></pre></td></tr></table></figure>

<p>例如这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new post HelloHexo</span><br></pre></td></tr></table></figure>

<p>完成之后，会在 _posts 目录下会生成文件标题.md，一般的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: HelloHexo</span><br><span class="line">date: 201-03-17 16:10:00 #发表日期，一般不改动</span><br><span class="line">categories: hexo #文章文类</span><br><span class="line">tags: [hexo,github] #文章标签，多于一项时用这种格式</span><br><span class="line">---</span><br><span class="line">正文，使用Markdown语法书写</span><br></pre></td></tr></table></figure>

<p>写完文章后，可以先预览，或者直接推送到服务器上。</p>
<h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>路径</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>source/_posts</td>
<td>文章</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
<td>页面</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
<td>草稿</td>
</tr>
</tbody></table>
<p>在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> (根目录下的)中的 <code>default_layout</code> 参数来指定默认布局。如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p>
<h4 id="基本模板参数"><a href="#基本模板参数" class="headerlink" title="基本模板参数"></a>基本模板参数</h4><table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启文章的评论功能</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
</tr>
</tbody></table>
<h4 id="基本变量参数"><a href="#基本变量参数" class="headerlink" title="基本变量参数"></a>基本变量参数</h4><table>
<thead>
<tr>
<th><strong>变量</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>:title</td>
<td>标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份，比如， <code>2015</code></td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（有前导零），比如， <code>04</code></td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（无前导零），比如， <code>4</code></td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（有前导零），比如， <code>07</code></td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（无前导零），比如， <code>7</code></td>
</tr>
</tbody></table>
<h2 id="强大的标签插件"><a href="#强大的标签插件" class="headerlink" title="强大的标签插件"></a>强大的标签插件</h2><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<p>这个其实在Hexo的官方文档上都有比较完善的，大家想了解更多的话，还是建议去那里看，这里主要放一些我用到过的，以及我自己的一些理解。</p>
<h4 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<p>演示效果：</p>
<blockquote>
<p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<p><strong>David Levithan</strong>—Wide Awake</p>
</blockquote>
<p>解释一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote &lt;这里填作者&gt;, &lt;这里填书名等&gt; %&#125;</span><br><span class="line">中间这里存放引用正文</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>在文章中插入 iframe。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;  &#x2F;&#x2F;设定url，宽、高</span><br></pre></td></tr></table></figure>

<h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>在文章中插入指定大小的图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#x2F;&#x2F;实际上，只需要定义图片的路径即可，除非图片的大小不能使你满意。图片的路径可以是本地路径，也可以是网络路径，这取决于你的选择。</span><br></pre></td></tr></table></figure>

<h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;   &#x2F;&#x2F;这个不作过多的解释，都是常见属性</span><br></pre></td></tr></table></figure>

<p>/</p>
<h2 id="基于Next主题的优化与配置"><a href="#基于Next主题的优化与配置" class="headerlink" title="基于Next主题的优化与配置"></a>基于Next主题的优化与配置</h2><p>现在转到我的这篇文章👉<a href="http://blog.52bess.com/next.html">NexT主题个性定制与深度优化</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>魔法操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo多端同步</title>
    <url>/posts/2019/remote.html</url>
    <content><![CDATA[<p>假设你换了一台电脑，或者是把电脑重置了，那么，要怎样才能接着跟原来一样配置好Hexo，然后继续写文章呢？毕竟你不是从头、从零开始配置的，很多文件都已经有了，但是，怎么保证不出问题的继续运行呢?</p>
<a id="more"></a>

<p>多台电脑同步博客源码，首先要把最新的源码上传到git上，然后在其它电脑上搭建Hexo环境后同步博客源码。 前提是两台电脑都能连上git，主要是都配置了 <code>git ssh</code>密钥连接。这个方法同样适用与误删文件的你，但是我建议平时尽量多做好备份！！！</p>
<h2 id="同步博客源码到你的GitHub"><a href="#同步博客源码到你的GitHub" class="headerlink" title="同步博客源码到你的GitHub"></a>同步博客源码到你的GitHub</h2><p>在你打算上传的最新博客源码的基础上，按照下面的魔法操作：</p>
<h3 id="编辑-gitignore文件"><a href="#编辑-gitignore文件" class="headerlink" title="编辑.gitignore文件"></a>编辑.gitignore文件</h3><p><code>.gitignore</code>文件作用是声明不被git记录的文件，blog根目录下的 <code>.gitignore</code>是hexo初始化是创建的，可以直接编辑，建议.gitignore文件包括以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store      </span><br><span class="line">Thumbs.db      </span><br><span class="line">db.json      </span><br><span class="line">*.log      </span><br><span class="line">node_modules&#x2F;      </span><br><span class="line">public&#x2F;      </span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>

<p>说明：public内的文件可以根据source文件夹内容自动生成的，不需要备份。其他日志log、压缩、数据库Thumbs.db等文件也都是调试等使用，也不需要备份。</p>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init    </span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github账号名称&gt;.git # 将本地仓库映射到托管服务器的仓库</span><br></pre></td></tr></table></figure>

<p>server是仓库的在线目录地址，可以从git上直接复制过来，origin是本地分支，remote add会将本地仓库映射到托管服务器的仓库上。</p>
<h3 id="同步到git"><a href="#同步到git" class="headerlink" title="同步到git"></a>同步到git</h3><p>添加你的本地文件到仓库，并同步到GitHub上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . #添加blog目录下所有文件，注意有个&#39;.&#39;(.gitignore里面声明的文件不在此内)    </span><br><span class="line">git commit -m &quot;hexo source first add&quot; #添加更新说明    </span><br><span class="line">git push -u origin master  #推送更新到git上</span><br></pre></td></tr></table></figure>

<h2 id="将git的内容同步到另一台电脑"><a href="#将git的内容同步到另一台电脑" class="headerlink" title="将git的内容同步到另一台电脑"></a>将git的内容同步到另一台电脑</h2><p>之前的操作主要类似于备份，而这里开始，就基本上是你在新电脑、或者是重置电脑之后的操作啦！假设我们这时候已经将blog源码内容备份到了GitHub上，现在准备在新电脑上同步源码内容。</p>
<h3 id="搭建hexo的环境"><a href="#搭建hexo的环境" class="headerlink" title="搭建hexo的环境"></a>搭建hexo的环境</h3><p>这时候在你的新电脑上，肯定是必须要搭建环境的呢，没有环境，Hexo也无法运行呀不是。没错，又是熟悉的配方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli  # 安装hexo</span><br><span class="line"></span><br><span class="line">hexo init &lt;folder&gt;         #用hexo创建一个博客目录</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save # 部署安装 hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>&lt;folder&gt;还是一样地填上博客文件夹地名字，比如说我的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli  # 安装hexo</span><br><span class="line"></span><br><span class="line">hexo init hexo         #用hexo创建一个博客目录</span><br><span class="line">cd hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save # 部署安装 hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="拉取源代码"><a href="#拉取源代码" class="headerlink" title="拉取源代码"></a>拉取源代码</h3><p>在建好的环境的主目录运行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init       #将目录添加到版本控制系统中    </span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;&lt;Github账号名称&gt;&#x2F;&lt;Github账号名称&gt;.git </span><br><span class="line">#将本地仓库映射到托管服务器的仓库上    </span><br><span class="line">git fetch --all  #将git上所有文件拉取到本地    </span><br><span class="line">git reset --hard origin&#x2F;master  #强制将本地内容指向刚刚同步git云端内容,用远端文件覆盖本地相同文件</span><br></pre></td></tr></table></figure>

<p>reset对所拉取的文件不做任何处理，此处不用pull是因为本地尚有许多文件，使用pull会有一些版本冲突，解决起来也麻烦，而本地的文件都是初始化生成的文件，较拉取的库里面的文件而言基本无用，所以直接丢弃。</p>
<h4 id="发布内容到GitHub"><a href="#发布内容到GitHub" class="headerlink" title="发布内容到GitHub"></a>发布内容到GitHub</h4><p>要将新电脑上的最新的文章更新到git。在本地文件中运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status #查看本地文件的状态。</span><br><span class="line">git add . #将所有更新的本地文件添加到版本控制系统中</span><br><span class="line"></span><br><span class="line">git commit -m &#39;更新信息说明&#39; </span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h4 id="同步文章"><a href="#同步文章" class="headerlink" title="同步文章"></a>同步文章</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>获取的源码即为最新文件</p>
<hr>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装记录</title>
    <url>/posts/2019/ubuntu.html</url>
    <content><![CDATA[<p>一直以来，都是在虚拟机里面使用Linux系统，但随着使用需求的增加，于是直接在笔记本中安装Ubuntu。基本上就是Windows 10 + Ubuntu18.04LTS双系统共存模式！</p>
<a id="more"></a>

<h2 id="浅谈"><a href="#浅谈" class="headerlink" title="浅谈"></a>浅谈</h2><p>很多同学在虚拟机中安装Linux(实际上不仅限于Ubuntu)，都会觉得安装很简单，基本上就是一直点下一步之类的，当然了，ArchLinux之流除外哈。不是说ArchLinux不好用(我觉得过渡动画还比较流畅，速度也很快)，而是它的安装过程，感觉就是个过滤用户的阴谋😂</p>
<p>既然要直接在笔记本上安装，那么，肯定会有不少坑的，而且还是双系统共存。最常见的就是分区和假死了吧(卡死在某一界面)。其它的诸如制作镜像，装驱动出现问题，点击现在重启卡死等。我在刚买我的暗影精灵3的时候，就尝试过双系统，然后，你懂的。我直接就留下了心里阴影，因为那时候没做备份，后来我备份的好习惯就是这么被逼出来的🙃</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h3><p>先介绍下我的电脑配置吧。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品名称 : OMEN by HP Laptop 15-ce0xx</span><br><span class="line">BIOS : F.18-11&#x2F;09&#x2F;2018</span><br><span class="line">内存总量 : 16 GB</span><br><span class="line">处理器名称 : Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz</span><br><span class="line">BIOS模式 : UEFI</span><br><span class="line">当前系统 : Windows 10 家庭中文版 1903 版本18632</span><br><span class="line">显卡 : NVIDIA GeForce GTX 1050</span><br></pre></td></tr></table></figure>

<h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><p>在哪里下，应该就不用我废话了，我个人更喜欢👍<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==">清华大学开源软件镜像站<i class="fa fa-external-link-alt"></i></span>，大家没下载的可以在这里下。如果是要像我一样，想当作主力系统来用的，就下Ubuntu 18.04.02LTS版本，LTS是官方长期维护的版本，更稳定，一直维护到2023年4月。如果你跟我一样，喜欢最新的事务，那么，Ubuntu 19.04是你不错的选择，自带的UI变漂亮了许多，但遗憾的是，它的支持生命周期只到2020年1月😥</p>
<p>镜像制作工具，推荐<span class="exturl" data-url="aHR0cDovL3J1ZnVzLmllLw==">Rufus<i class="fa fa-external-link-alt"></i></span>吧，简单制作个镜像而已，必须要花里胡哨的功能，而且差不多就1M大小，免安装！！！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu01.png" alt></p>
<p>选项基本跟我保持一致即可，尤其是簇大小，大家都习惯默认的，但是部分奇葩的U盘，默认分配单元大小是16K或者32K，可能会导致安装系统过程中，出现一些不必要的问题。</p>
<p><strong>然后，在Windows下分一个给Ubuntu用的分区出来，确保为为分配状态！！！</strong></p>
<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><h4 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h4><p>开机进入BIOS，hp暗影精灵是开机按F10，其它品牌请自行Google！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu02.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu03.png" alt></p>
<p>如图，你需要将传统模式和安全启动模式(Secure Boot)都设置为禁用，然后把U盘的启动顺序调整到操作系统管理员的前面。如果你不禁用Secure Boot的话，Ubuntu系统将无法运行，不明白为什么的同学，自行Google！</p>
<h4 id="禁用N卡"><a href="#禁用N卡" class="headerlink" title="禁用N卡"></a>禁用N卡</h4><p>然后重点来了！！！你这时候应该进入引导界面了，但是不要着急！！！把光标移到<code>Install Ubuntu</code>，先别着急敲下回车键。先按下键盘上的字母键E，然后将<code>quiet splash ---</code>更改为 <code>quiet splash nouveau.modeset=0</code>，如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu04.png" alt="ubuntu04"></p>
<p>改为：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu05.png" alt="ubuntu05"></p>
<p>我在安装时忘记拍照了，这是在虚拟机中截的图，不过影响不大，只是用来参考的。改完之后，按下Ctrl+X或者F10，具体的那个界面下面会有显示的。</p>
<div class="note warning"><p>为什么要大家这么做呢？因为自己安装过的朋友，遇到过最头疼的问题应该就是安装过程中卡死了，我曾经也遇到过！没错，就是从你开始安装，直到安装完毕进入Ubuntu的桌面为止，随时都有可能卡死。但是在虚拟机中并不会这样，我去Google查了一下，很多解释差不多是这个意思：Ubuntu是开源系统，但是Nvidia并没有将显卡驱动开源，所以Ubuntu内核中自带的Nvidia显卡驱动版本就没有特别新，就导致安装过程中会卡死。所以进行上面的设置后，禁止Ubuntu加载自带的N卡驱动，问题就解决了。玩过黑苹果的朋友门，应该也碰到过相同的问题吧。</p></div>

<h4 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h4><p>只强调2件事，如果禁用N卡驱动之后，窗口变大的话，部分窗口被挤出屏幕，导致鼠标点不到按钮，可以按住Alt键然后用鼠标拖动窗口。其次，建议不要选择最小安装，这样以后你使用是，会少部分依赖库，给你造成麻烦(精通Linux的大神当我没说！)😋</p>
<h4 id="分区挂载"><a href="#分区挂载" class="headerlink" title="分区挂载"></a>分区挂载</h4><p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu06.png" alt></p>
<p>千万不要偷懒，一定要选择其它选项。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu07.png" alt="ubuntu07"></p>
<p>挂载分区，因为是UEFI启动模式，所以只少要4个分区，以我的为例，我分了100个G给Ubuntu，且我的运行内存为16G。</p>
<table>
<thead>
<tr>
<th>分区类型</th>
<th>挂载点</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>efi</td>
<td>efi</td>
<td>2046MB</td>
<td>用于安装efi</td>
</tr>
<tr>
<td>swap</td>
<td>swap</td>
<td>16386MB</td>
<td>交换分区</td>
</tr>
<tr>
<td>ext4</td>
<td>/home</td>
<td>42859MB</td>
<td>主目录</td>
</tr>
<tr>
<td>ext4</td>
<td>/</td>
<td>46080MB</td>
<td>根目录</td>
</tr>
</tbody></table>
<p>传统的Boot为主分区，UEFI模式就选择逻辑分区，efi分区用来存储引导器，系统的启动文件等。我分配了2G，硬盘不大的400M左右也可以。</p>
<p>swap分区选择主分区，这个交换分区就相当于是虚拟内存，一般设置为你的内存大小的同等大小，或者内存的2倍。</p>
<p><code>/home</code>即主目录，也叫用户的宿主目录。用户登录系统后，所处的位置就是/home，通常用来保存用户文件。没错，什么图片啊、视频啊、你下载的东西啊，都是存在这里的，给多少自己看着办吧。</p>
<p><code>/</code>即根目录，不要给太小，如果一共就四五十个G，至少也得给15G左右。</p>
<p>最后，在下面的<code>安装启动引导器的设备</code>那里，<strong>选择你刚才分出来的那个efi分区</strong>(划重点，要考)，然后再点击<code>现在安装</code>。然后后面的一堆设置可以按需求设置，然后，慢慢等。</p>
<h4 id="重点来了"><a href="#重点来了" class="headerlink" title="重点来了"></a>重点来了</h4><p>这一步很重要，因为实际上整个安装过程并没有结束，你还是得提防Ubuntu有没有搞你。在安装完成之后，系统会提示<code>已安装完成，是否重启</code>，这不废话吗，当然得选择<code>现在重启</code>了(逃)。。。😐</p>
<p>点击重启之后，拔掉U盘，然后<strong>在开机的品牌logo出现后，按一下、按一下、只按一下键盘左上角的ESC键</strong>。开机的时候，都会出现品牌logo的吧？你看到它之后，按一下就行了。为了防止某些同学说他电脑开机不显示品牌logo，那好，你插上鼠标，等重启后屏幕亮了之后(屏幕是黑色时也有亮的情况，别跟我杠这些)，然后看着你的鼠标，鼠标等亮了之后，按一下ESC键。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu08.png" alt="ubuntu08"></p>
<p><center>(图片来源于互联网，我没拍照，不过都差不多)</center></p>

<p>这时候出现的画面，就是<code>GRUB</code>引导器，键盘选中<code>Ubuntu</code>这一项，然后按下键盘字母<code>E</code>键，是不是觉得刚才做过这步？是的，按下E之后，一样的操作。</p>
<p>把光标移到<code>Install Ubuntu</code>，先别着急敲下回车键。先按下键盘上的字母键E，然后将<code>quiet splash ---</code>更改为 <code>quiet splash nouveau.modeset=0</code>，如图：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu04.png" alt="ubuntu04"></p>
<p>改为：(只要让那一串代码变成下图这样，这串代码前面和后面不变，你不用管它是什么)</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="ubuntu/ubuntu05.png" alt="ubuntu05"></p>
<p>到这里，应该就可以正常地进入系统了。</p>
<h2 id="安装之后"><a href="#安装之后" class="headerlink" title="安装之后"></a>安装之后</h2><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><p>由于一系列总所周知的原因，我们需要更换镜像源为国内的源，我推荐使用<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvdWJ1bnR1Lw==">清华大学的镜像源<i class="fa fa-external-link-alt"></i></span>，其它源也可以用类似的方法添加。</p>
<p><strong>先备份好习惯！</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>

<p>打开编辑源列表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>

<p>将文件内所有文件清空，然后将下列清华源全部copy进去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>然后用清华源更新一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>如果你不知道这两条命令干嘛的，请自行Google，按理说应该知道的！</p>
<h3 id="安装nVidia驱动"><a href="#安装nVidia驱动" class="headerlink" title="安装nVidia驱动"></a>安装nVidia驱动</h3><h4 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h4><p>推荐使用标准的Ubuntu仓库进行自动化安装，虽然版本不是最新的，但是<strong>更稳定</strong>！！！又不打游戏，用Linux一大原因不就是图个稳定嘛！</p>
<p>删除现有的系统自带N卡驱动以及相关的所有配置文件等：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nvidia*</span><br></pre></td></tr></table></figure>

<p>查看显卡设备，并显示系统推荐的驱动版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>

<p>安装系统推荐的驱动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure>

<h4 id="其它方案"><a href="#其它方案" class="headerlink" title="其它方案"></a>其它方案</h4><p>自行Google好嘛，只让你看最稳定的方式，要追求刺激，可以自己去追求，我怕出了问题要来怪我！</p>
<p>安装完之后，开机就不用再去设置了(重启后生效！)</p>
<h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><p>到这里基本上就结束了，其它的使用，我可以给一些建议！</p>
<ul>
<li><p>安装中文输入法，如：<code>搜狗</code>。</p>
</li>
<li><p>安装浏览器，如：<code>chrome</code>。</p>
</li>
<li><p>彻底卸载办公软件Libreoffice，改用WPS等。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt remove libreoffice-calc	&#x2F;&#x2F;卸载libreoffice表格</span><br><span class="line">sudo apt remove libreoffice-draw	&#x2F;&#x2F;卸载libreoffice绘图</span><br><span class="line">sudo apt remove libreoffice-impress &#x2F;&#x2F;卸载libreoffice幻灯片</span><br><span class="line">sudo apt remove libreoffice-writer  &#x2F;&#x2F;卸载libreoffice文档</span><br><span class="line">sudo apt remove libreoffice*		&#x2F;&#x2F;清理所有libreoffice相关</span><br><span class="line">sudo apt purge libreoffice*			&#x2F;&#x2F;清理libreoffice配置文件</span><br><span class="line">sudo apt autoremove					&#x2F;&#x2F;清理libreoffice配置文件</span><br></pre></td></tr></table></figure>

<ul>
<li>安装思源宋体等好看的字体</li>
<li>UI透明化，配置终端(这个很重要)等。</li>
<li>安装Steam，开始白给。</li>
<li>安装一个好看的主题。</li>
<li>安装网易云音乐等。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底关闭Windows10系统更新！</title>
    <url>/posts/2019/win10kill.html</url>
    <content><![CDATA[<p>对于很多Windows10家庭版的朋友们来说，如何彻底关闭系统更新，是一件让人很头痛的问题。今天就来给大家介绍一个<strong>开源程序</strong>，来帮助你关闭系统更新，当然，任何事情都是有两面性的！</p>
<a id="more"></a>

<div class="note warning"><p>注意：我在实机和虚拟机都测试过，可正常使用，且用火热杀毒检测无毒。毕竟是开源软件，还是可以放心的，没有哪个笨蛋会把自己的病毒暴露在阳光之下的！</p></div>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="win10kill/win10kill001.png" alt></p>
<h3 id="你需要权衡什么？"><a href="#你需要权衡什么？" class="headerlink" title="你需要权衡什么？"></a>你需要权衡什么？</h3><p>如果您需要SKYPE，MARKET，XBOX APP，WMR或任何其他具有互联网功能的MICROSOFT应用程序，请不要安装DWS！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="win10kill/win10kill002.png" alt></p>
<h3 id="它能干什么？"><a href="#它能干什么？" class="headerlink" title="它能干什么？"></a>它能干什么？</h3><ul>
<li>删除所有间谍软件模块</li>
<li>删除间谍应用程序</li>
<li>将间谍域添加到主机文件！</li>
<li>删除间谍服务</li>
<li>删除Windows 10 Metro Apps</li>
<li>支持Windows 7/8 / 8.1 / 10和Server 2008-2012 R2 （对于这些平台，请使用2.2.2.2版）</li>
<li>删除Office 2016遥测</li>
<li>开源！</li>
</ul>
<p>有了它，你甚至可以删除Windows的监控模块(这个程序本身就是为了这个才产生的)。</p>
<p><strong>由于是开源软件，在这里贴出作者的GitHub：</strong></p>
<ul>
<li>原作者：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL051bW1lci9EZXN0cm95LVdpbmRvd3MtMTAtU3B5aW5n">https://github.com/Nummer/Destroy-Windows-10-Spying<i class="fa fa-external-link-alt"></i></span></li>
<li>现作者：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dvaGxzdGFuZC9EZXN0cm95LVdpbmRvd3MtMTAtU3B5aW5n">https://github.com/Wohlstand/Destroy-Windows-10-Spying<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>截至目前，最新的发行版本的下载链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dvaGxzdGFuZC9EZXN0cm95LVdpbmRvd3MtMTAtU3B5aW5nL3JlbGVhc2VzL2Rvd25sb2FkLzIuMi4yLjIuMjcvRFdTLWJ1aWxkLVdpbjc4ODEtMi4yLjIuMi4yNy56aXA=">https://github.com/Wohlstand/Destroy-Windows-10-Spying/releases/download/2.2.2.2.27/DWS-build-Win7881-2.2.2.2.27.zip<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Windows10</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>愉快的五一假期</title>
    <url>/posts/2019/wuyi.html</url>
    <content><![CDATA[<h2 id="浅谈"><a href="#浅谈" class="headerlink" title="浅谈"></a>浅谈</h2><p>这篇文章，是在五一假期结束之后写的，毕竟五一还是有点忙的！抽了2天时间来重构Hexo的代码，解决了很多未知的问题，每天都忙到凌晨，相信有过共同经历的人会明白的🤣总会有些花里胡哨的瑕疵，反正我是忍不了。😅</p>
<a id="more"></a>

<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>我原先是采取的<code>GitHub</code>+<code>coding</code>方案，后来删掉了<code>coding</code>的仓库，只保留了<code>GitHub Pages</code>。最主要的还是用不习惯，虽然在某些地区访问的话，速度会更快。但是想必大多数用<code>Hexo</code>搭建博客，而且托管在<code>GitHub</code>的同学，是不在意只有少部分人来访博客的。因为需要大量的人访问，或者有这种需求的人，都会买云服务器。</p>
<p>正好<code>coding</code>的仓库空出来了，我就把<code>GitHub</code>的先放着，在<code>coding</code>上从头开始搭建、调试。等一切准备好了之后，在推送到<code>GitHub</code>上来，这样也不容易出问题。</p>
<h3 id="煎熬的过程"><a href="#煎熬的过程" class="headerlink" title="煎熬的过程"></a>煎熬的过程</h3><p>环境在电脑上已经有了，于是到<code>G</code>盘创建了一个新文件夹，用于<del>安装</del>初始化<code>Hexo</code>，然后安装推送插件之后直接推送到coding上。确定搭建完成了最基本的之后，就在本地慢慢调试。主题依旧用<code>NexT</code>主题，只不过换成了<code>NexT.Muse</code>，然后照着几个不同的、比较知名的博客的样式，做出了一些修改，也就是你们现在看到的样子。虽然不是很漂亮，但是也够看了😁都说程序猿的审美不行，我觉得程序猿们要大胆的说：不！给他们看看，我们不只有格子衫😎</p>
<div class="note warning"><p>注意一定要按时备份！</p></div>

<p>设计整个页面的过程，是基于chrome的，一般来说现在的新浏览器都算是支持比较好的。虽然个人比较喜欢后端，但至少前端知识好歹是知道一点的，也不至于无从上手🤣许多CSS样式，都是放在了<code>custom.styl</code>文件中。经过了这次折磨之后，现在可算是知道了以前期末的时候，都是老师留情了的。没有个几百上千行的CSS代码，怎么好意思及格呢。。。</p>
<p>在快完成的时候，也是遇到了一些小挫折的。。。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="wuyi/wuyi001.png" alt></p>
<p>嗯~ o(<em>￣▽￣</em>)o，控制台不报错，压根都不知道问题出在哪儿了。去Google查了查，重新安装了所有的相关依赖包也依旧没有解决问题。没错，绝望的我，又重新开始了一遍，但是因为相关文件都已经配置好了，基本上就是复制粘贴了一遍。最后熬了2天夜，终于还是弄完了。</p>
<p>对于想直接要博客的整份源码的同学，我只能说，没有人会给的啦，原因很简单！这不应该是一个索取和给予的过程，而应该是一个讨论交流的过程。也就是说，你问我博客的任何东西是怎么实现的，我都会告诉你(后面也会抽时间写相关的文章)，但是你直接要我当然不会给啊，毕竟也是自己的心血！</p>
<p>博客重构前后，源码从原先的200多M变成了40多M(包含了public文件夹)，但是东西一样不少，博客反而更美观，功能更强大。。。这个问题一直没想通，这多出来的100多M到底是啥！</p>
<h2 id="爱你三千遍"><a href="#爱你三千遍" class="headerlink" title="爱你三千遍"></a>爱你三千遍</h2><p>五一去影院看了<span class="exturl" data-url="aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3N1YmplY3QvMjYxMDA5NTgvP2Zyb209c2hvd2luZw==">《复仇者联盟4》<i class="fa fa-external-link-alt"></i></span>，不知道为啥，竟然有点心疼灭霸😥最好笑的镜头</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="wuyi/wuyi002.jpg" alt></p>
<h2 id="♂friend"><a href="#♂friend" class="headerlink" title="♂friend"></a>♂friend</h2><p>五一还去了同学家吃饭，来了一些初中同学，大家都在聊以前初中时的沙雕欢乐的事情（。＾▽＾）</p>
<p>嗯~ o(<em>￣▽￣</em>)o至于这个菜嘛，虽然我没参与，但是是大家一起努力弄出来的：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="wuyi/wuyi003.png" alt></p>
<p>哈哈，卖相不好，味道倒是还凑合！越长越大，就越是让人怀恋以前读书时的美(sha)好(diao)日子呢！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>站点文件基本配置</title>
    <url>/posts/2019/zhandian.html</url>
    <content><![CDATA[<p>刚接触Hexo的你，是不是对站点配置文件<code>_config.yml</code>一脸的问号呢？没事，这篇文章可以帮助你轻松阅览站点配置文件，让你快速上手！</p>
<a id="more"></a>

<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>总所周知，在Hexo静态博客本地配置中，有两个重要的配置文件，分别是：</p>
<ul>
<li><p>位于根目录下的<code>站点配置文件</code>：<code>_config.yml</code></p>
</li>
<li><p>位于根目录/theme/你的主题下的<code>主题配置文件</code>：<code>/theme/&lt;你的主题名称&gt;/_config.yml</code></p>
</li>
</ul>
<p>当然，基本熟悉的小伙伴是不会弄混的，刚开始的时候可能会弄错。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>下面简单列举了一些站点配置文件的源码，方便快速上手：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hexo 站点配置文件</span><br><span class="line">## 官方说明文档: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html</span><br><span class="line">## GitHub源码: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;</span><br><span class="line"></span><br><span class="line"># 网站基础设定</span><br><span class="line">title: 生如夏花               # 网站标题</span><br><span class="line">subtitle: www.zhuimeng.online         # 网站副标题</span><br><span class="line">description: 追逐梦想！                 # 网站描述：建议描述：网站介绍或者座右铭</span><br><span class="line">keywords: 博客,Hexo,黑苹果,Linux        # 关键词</span><br><span class="line">author: Bess Croft                    # 站长信息</span><br><span class="line">language: zh-CN      # 网站语言：查询主题文件下的language文件夹查阅支持语言列表再进行更改   </span><br><span class="line">timezone: Asia&#x2F;Shanghai              # 网站时区</span><br><span class="line"></span><br><span class="line"># 头像</span><br><span class="line">avatar: &#x2F;uploads&#x2F;avatar.jpg</span><br><span class="line"></span><br><span class="line"># 网址信息</span><br><span class="line">## 如果您的网站存放在子目录中，例如 http:&#x2F;&#x2F;yoursite.com&#x2F;blog，则请将您的 url 设为 http:&#x2F;&#x2F;yoursite.com&#x2F;blog 并把 root 设为 &#x2F;blog&#x2F;。</span><br><span class="line">url: https:&#x2F;&#x2F;blog.52bess.com                # 网址</span><br><span class="line">root: &#x2F;                                 # 网站根目录	</span><br><span class="line">permalink: :title.html    # 文章的 永久链接 格式	</span><br><span class="line">permalink_defaults:                     # 永久链接中各部分的默认值	</span><br><span class="line"></span><br><span class="line"># 目录：如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</span><br><span class="line">source_dir: source              # 资源文件夹，这个文件夹用来存放内容。</span><br><span class="line">public_dir: public              # 公共文件夹，这个文件夹用于存放生成的站点文件。</span><br><span class="line">tag_dir: tags                   # 标签文件夹	</span><br><span class="line">archive_dir: archives           # 归档文件夹</span><br><span class="line">category_dir: categories        # 分类文件夹	</span><br><span class="line">code_dir: downloads&#x2F;code        # Include code 文件夹	</span><br><span class="line">i18n_dir: :lang                 # 国际化（i18n）文件夹	</span><br><span class="line">skip_render: README.md          # 跳过指定文件的渲染，您可使用 [glob 表达式](https:&#x2F;&#x2F;github.com&#x2F;isaacs&#x2F;node-glob)来匹配路径。	</span><br><span class="line"></span><br><span class="line"># 文章</span><br><span class="line">new_post_name: :title.md        # 新文章的文件名称</span><br><span class="line">default_layout: post            # 预设布局	</span><br><span class="line">titlecase: false                # 把标题转换为 title case</span><br><span class="line">external_link: true             # 在新标签中打开链接</span><br><span class="line">filename_case: 0                # 把文件名称转换为 (1) 小写或 (2) 大写</span><br><span class="line">render_drafts: false            # 显示草稿</span><br><span class="line">post_asset_folder: true        # 启动 [Asset](https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;asset-folders) 文件夹</span><br><span class="line">relative_link: false            # 把链接改为与根目录的相对位址</span><br><span class="line">future: true                    # 显示未来的文章</span><br><span class="line">highlight:                      # 代码块的设置</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace:</span><br><span class="line">  </span><br><span class="line"># 主页设置</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#39;&#39;              # 博客索引页面的根路径。</span><br><span class="line">  per_page: 10          # 每页显示的帖子。（0 &#x3D;禁用分页）</span><br><span class="line">  order_by: -date       # 排序。（默认情况下按日期降序排序）</span><br><span class="line">  </span><br><span class="line"># 分类 &amp; 标签</span><br><span class="line">default_category: uncategorized     # 默认分类</span><br><span class="line">category_map:                       # 分类别名	</span><br><span class="line">tag_map:                            # 标签别名</span><br><span class="line"></span><br><span class="line"># 日期 &#x2F; 时间格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># 分页</span><br><span class="line">per_page: 10                # 每页显示的文章量（0 &#x3D; 关闭分页功能）</span><br><span class="line">pagination_dir: page        # 分页目录</span><br><span class="line"></span><br><span class="line"># 扩展</span><br><span class="line">## 插件: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## 主题: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next                     #主题选择</span><br><span class="line"></span><br><span class="line"># 部署部分的设置</span><br><span class="line">## 文档: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:&lt;Github账号名称&gt;&#x2F;&lt;Github账号名称&gt;.github.io.git # 仓库ssh</span><br><span class="line">  branch: master #分支选择</span><br><span class="line">  </span><br><span class="line">post_end_tag:</span><br><span class="line">  enabled: true  # 是否开启文末的本文结束标记</span><br><span class="line">  icon: paw # 结束标记之间的图标</span><br><span class="line"></span><br><span class="line"># 看板娘</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-koharu</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -20</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br><span class="line"></span><br><span class="line"># 豆瓣页面</span><br><span class="line">douban:</span><br><span class="line">  user: 195767035</span><br><span class="line">  builtin: true</span><br><span class="line">  book:</span><br><span class="line">    title: &#39;我的书单&#39;</span><br><span class="line">    quote: &#39;看书很慢，但都是值得的&#39;</span><br><span class="line">  movie:</span><br><span class="line">    title: &#39;我的电影&#39;</span><br><span class="line">    quote: &#39;最佳的娱乐方式&#39;</span><br><span class="line">  game:</span><br><span class="line">    title: &#39;我的游戏&#39;</span><br><span class="line">    quote: &#39;最佳的娱乐方式&#39;</span><br><span class="line">  timeout: 10000</span><br><span class="line">  </span><br><span class="line"># </span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line">  yearly: true</span><br><span class="line">  monthly: true</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 10</span><br><span class="line">  </span><br><span class="line"># Extensions</span><br><span class="line">plugins:</span><br><span class="line">    hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br><span class="line">    </span><br><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p>这是目前位置我的博客的一些配置，截至至2019/05/08(一直在更新)</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>站点文件配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统手动更换内核</title>
    <url>/posts/2020/centoskernrlup.html</url>
    <content><![CDATA[<center><b>从所有人的角度来看，当今的Internet并未如其所愿地移动数据。</b></center>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>一般而言，在云计算商那里“租”了一台服务器之后，我一般会选择<code>CentOS 7</code> 系统，所以这篇文章，就以CentOS为例(似乎有一点标题党的嫌疑？</p>
</blockquote>
<a id="more"></a>

<p><strong>基本不会介绍BBR的原理，需要详细了解，<span class="exturl" data-url="aHR0cHM6Ly9yZXNlYXJjaC5nb29nbGUvcHVicy9wdWI0NTY0Ni8=">可以访问research<i class="fa fa-external-link-alt"></i></span>，我技术并不够优秀，很难解释清楚，还请见谅！</strong></p>
<p>先讲讲BBR吧！<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVENQX2Nvbmdlc3Rpb25fY29udHJvbCNUQ1BfQkJS">Wiki百科<i class="fa fa-external-link-alt"></i></span>给出的解释是<code>Bottleneck Bandwidth and Round-trip propagation time (BBR)</code> ，是Google在2016年开发的TCP拥塞控制算法(开源了)。TCP拥塞控制算法有很多，BBR是其中一种，但是由于它出色的效果，被很多人采用。至于linux内核什么时候开始原生支持的，网上的说法真的是五花八门，很多人文章感觉就是互相抄，连<code>2.6.*</code> 的说法都能蹦出来(我怀疑是一些采集站)。相对而言，很多大佬的博客文章，就比较严谨一些，基本上都是<code>4.9</code>。抱着不懂就差的态度，我去Google稍微搜了一下，不敢确定是不是一定是对的。<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTGludXglRTUlODYlODUlRTYlQTAlQjgjNC54LnklRTclODklODglRTYlOUMlQUMlRTclQjMlQkIlRTUlODglOTc=">Wiki百科<i class="fa fa-external-link-alt"></i></span>的详细说明，可以找到如下一条说明：</p>
<table>
<thead>
<tr>
<th>内核</th>
<th>初始发行日期</th>
<th>最新版本</th>
<th>维护者</th>
<th>支持状态</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>4.9</td>
<td>2016年12月11日</td>
<td>4.9.148</td>
<td>葛雷格·克罗哈曼</td>
<td>长期支持版本，从2016年12月至2023年1月</td>
<td>开始支持 BBR congestion control。</td>
</tr>
</tbody></table>
<h3 id="更换-更新内核"><a href="#更换-更新内核" class="headerlink" title="更换/更新内核"></a>更换/更新内核</h3><p>这时候我们来更换内核吧，这里我的测试机器是阿里云国际香港ECS。</p>
<ul>
<li>当前的 Kernel 版本</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup01.png" alt></p>
<ul>
<li>更新软件包</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum update -y</span><br></pre></td></tr></table></figure>
<h4 id="ELRepo项目"><a href="#ELRepo项目" class="headerlink" title="ELRepo项目"></a>ELRepo项目</h4><p>这里我们需要用到<span class="exturl" data-url="aHR0cHM6Ly9lbHJlcG8ub3JnL3Rpa2kvdGlraS1pbmRleC5waHA=">Repo项目<i class="fa fa-external-link-alt"></i></span>Enterprise Linux软件包的RPM存储库。</p>
<ul>
<li>导入ELRepo公钥</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure>
<ul>
<li>安装ELRepo的 yum 源到系统</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>
<h4 id="安装新内核啦"><a href="#安装新内核啦" class="headerlink" title="安装新内核啦"></a>安装新内核啦</h4><ul>
<li>查看ELRepo仓库下，在当前系统支持的内核包<br>ELRepo会提供<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZy8=">he Linux Kernel Archives<i class="fa fa-external-link-alt"></i></span>用资源。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"elrepo-kernel"</span> list available</span><br></pre></td></tr></table></figure>
<ul>
<li>安装最新的主线稳定内核</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml</span><br></pre></td></tr></table></figure>
<h4 id="更改grub配置"><a href="#更改grub配置" class="headerlink" title="更改grub配置"></a>更改grub配置</h4><p>在安装完新的 Kernrl 之后，系统是不会帮你切换到新内核的，重启也不行，需要我们自己设置，将新内核设置为默认启动选项。</p>
<ul>
<li>查看所有的 Kernel</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup02.png" alt></p>
<ul>
<li>查看当前正在使用的 Kernrl</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup03.png" alt></p>
<ul>
<li>查看 Kernel 启动顺序</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ awk -F\<span class="string">' '</span><span class="variable">$1</span>==<span class="string">"menuentry "</span> &#123;<span class="built_in">print</span> i++ <span class="string">" : "</span> <span class="variable">$2</span>&#125;<span class="string">' /etc/grub2.cfg</span></span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup04.png" alt></p>
<p>我们可以看到，安装完之后，内核没有切换过去，通过查看得知，新安装的内核位于第一个位置，标记为 <code>0</code>。这是我们需要修改<code>/etc/default/grub</code>文件，以便于让系统在启动时让新内核成为默认选项。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/default/grub</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup05.png" alt></p>
<p>需要把图中的<code>GRUB_DEFAULT=saved</code> 改成 <code>GRUB_DEFAULT=0</code> ，然后保存。当然，你也可以在安装其它版本的Kernel之后，更改<code>GRUB_DEFAULT</code>的值。</p>
<ul>
<li>重新生成 Kernrl 配置</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<ul>
<li>然后重启机器</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>
<ul>
<li>重启完毕后，检查是否成功</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ uname -r</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup06.png" alt></p>
<p>可以看到，已经成功啦！</p>
<h3 id="删除多余内核"><a href="#删除多余内核" class="headerlink" title="删除多余内核"></a>删除多余内核</h3><p>你可以在安装新内核之后，选择把其它内核删掉，但是请注意<strong>千万不要删除正在运行的那个内核！！！</strong></p>
<ul>
<li>查看所有的 Kernel</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br></pre></td></tr></table></figure>
<ul>
<li>删除你想删除的内核</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum remove kernel-[old_kernel_version]</span><br><span class="line"><span class="comment"># 举个例子</span></span><br><span class="line">$ yum remove kernel-3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure>
<ul>
<li>重新生成 Kernrl 配置</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>整了这么半天，除了更新下内核，另一个重要的事情就是需要开启BBR了。</p>
<ul>
<li>编辑<code>/tec/sysctl.conf</code>文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>添加如下内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.core.default_qdisc&#x3D;fq</span><br><span class="line">net.ipv4.tcp_congestion_control&#x3D;bbr</span><br></pre></td></tr></table></figure>
<ul>
<li>或者使用tee命令重定向追加到<code>/tec/sysctl.conf</code>文件中：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'net.core.default_qdisc=fq'</span> | sudo tee -a /etc/sysctl.conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'net.ipv4.tcp_congestion_control=bbr'</span> | sudo tee -a /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>从配置文件“/etc/sysctl.conf”加载内核参数设置</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure>
<ul>
<li>验证是否成功(是否开启了BBR</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl net.ipv4.tcp_congestion_control</span><br><span class="line"><span class="comment"># 显示如下内容即可：</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_congestion_control = bbr</span></span><br><span class="line">$ sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"><span class="comment"># 显示如下内容即可：</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_available_congestion_control = reno cubic bbr</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看内核模块是否加载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ lsmod | grep bbr</span><br></pre></td></tr></table></figure>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="centoskernrlup/centoskernrlup07.png" alt></p>
<p>到这里，基本上就成功了！</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>其实大家觉得这样很麻烦，也可以去网上找一键脚本。但是我觉得这并不是很好的习惯，不能对脚本产生过度依赖，除非你是买一台vps小鸡当玩具玩，否则千万不要用脚本，更不要在生产环境用这种一键脚本。很多人连一键脚本的内容都没瞟一眼，在搜索引擎找到后，直接就运行，造成重启后开不了机的，也大有人在！<br><strong>我不是说不能用所谓的一键脚本，我也经常用。我的观点是，不应该对一键脚本产生过度依赖，同时尽量不要在生产环境用！</strong><br>如果可以，也可以看一看哪些写的比较好的脚本，多研究研究也是不错的，“先懂后懒”嘛！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>BBR</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG与在GitHub上使用GPG</title>
    <url>/posts/2020/gpg.html</url>
    <content><![CDATA[<h2 id="GPG与在GitHub上使用GPG"><a href="#GPG与在GitHub上使用GPG" class="headerlink" title="GPG与在GitHub上使用GPG"></a>GPG与在GitHub上使用GPG</h2><h3 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h3><ul>
<li>生成自己的<code>GPG</code>密钥</li>
<li>关联<code>GPG</code>公钥与<code>Github</code>账户</li>
<li>设置利用<code>GPG</code>私钥对<code>commit</code>进行签名</li>
<li>可选步骤：信任<code>Github</code>的<code>GPG</code>密钥</li>
</ul>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用<code>GitHub</code>的话，当然得用<code>Git</code>了。我主要<code>在Windows10</code>系统中使用<code>GitHub</code>，而在<code>openSUSE</code>中，很少使用。而在<code>Windows</code>平台的<code>Git</code>发行版中，自带了<code>GPG</code>。打开<code>Git Bash</code>，在终端输入<code>pgp --version</code>，就可以看到一些版本信息了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --version</span></span><br><span class="line"></span><br><span class="line">gpg (GnuPG) 2.2.19-unknown</span><br><span class="line">libgcrypt 1.8.5</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br></pre></td></tr></table></figure>
<p><strong>但是！！！GPG是有多个版本的，你可以去查询相关的<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFuX3BhZ2U=">Wiki<i class="fa fa-external-link-alt"></i></span>，不同版本的GPG，可能密钥生成命令是不同的！</strong></p>
<h3 id="生成GPG密钥密钥对"><a href="#生成GPG密钥密钥对" class="headerlink" title="生成GPG密钥密钥对"></a>生成GPG密钥密钥对</h3><ul>
<li><p>如果使用的是 2.1.17 或更高版本，复制以下命令粘贴到Git终端以生成 GPG 密钥对。(我的是2.2.19版本)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --full-generate-key</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果你的版本没有达到2.1.17或更高版本，那么这个命令可能是无效的。请参考<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vY24vZ2l0aHViL2F1dGhlbnRpY2F0aW5nLXRvLWdpdGh1Yi9nZW5lcmF0aW5nLWEtbmV3LWdwZy1rZXk=">官方文档<i class="fa fa-external-link-alt"></i></span>！</p>
</li>
<li><p>在看到提示时，你可以指定要生成的密钥类型，或按 Enter 键接受默认的 RSA and RSA。</p>
</li>
</ul>
<blockquote>
<p>GitHub有支持的GPG密钥算法如下：</p>
<ul>
<li>RSA</li>
<li>ElGamal</li>
<li>DSA数字签名算法</li>
<li>ECDH</li>
<li>ECDSA</li>
<li>EdDSA</li>
</ul>
</blockquote>
<ul>
<li><p>然后输入所需的密钥长度。 Your key must be at least 4096 bits.</p>
</li>
<li><p>输入密钥的有效时长。 按 Enter 键将指定默认选择，表示该密钥不会过期。</p>
<blockquote>
<p>这一步的Enter和数字0都表示不会过期。输入其它数字表示天数，字母w表示星期，m表示月份，y表示年份。如3m表示有效期3个月，依此类推，我英语不太好，希望我没说错！</p>
</blockquote>
</li>
<li><p>输完之后，会让你确认一遍。</p>
</li>
<li><p>然后会让你输入三项东西</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Real name: 这里填个人信息(随便填</span><br><span class="line">Email address: 这里必须填 GitHub 帐户的经过验证的电子邮件地址</span><br><span class="line">Comment: 随便填，如：mygpg</span><br></pre></td></tr></table></figure>
<ul>
<li><p>按下回车之后，就会让你设置GPG的安全密码了，先别说密码复不复杂，自己先给记住了哈！</p>
</li>
<li><p>最后会输出一些信息，记得保存，不过，你也可以使用如下命令来查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-secret-keys --keyid-format LONG</span></span><br></pre></td></tr></table></figure></li>
<li><p>为了方便，这里引用官方的案例，GPG密钥ID <code>3AA5C34371567BD2</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-secret-keys --keyid-format LONG</span></span><br><span class="line">/Users/hubot/.gnupg/secring.gpg</span><br><span class="line">------------------------------------</span><br><span class="line">sec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]</span><br><span class="line">uid                          Hubot </span><br><span class="line">ssb   4096R/42B317FD4BA89E7A 2016-03-10</span><br></pre></td></tr></table></figure></li>
<li><p>粘贴下面的文本（替换为您要使用的 GPG 密钥 ID）。 在此例中，GPG 密钥 ID 是 <code>3AA5C34371567BD2</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --armor --<span class="built_in">export</span> 3AA5C34371567BD2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以 ASCII 封装格式打印 GPG 密钥 ID</span></span><br></pre></td></tr></table></figure></li>
<li><p>复制 GPG 密钥，从 <code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code> 开始，到 <code>-----END PGP PUBLIC KEY BLOCK-----</code> 结束。</p>
</li>
<li><p>最后，将GPG密钥添加到GitHub账户。</p>
<h3 id="将GPG密钥添加到GitHub账户"><a href="#将GPG密钥添加到GitHub账户" class="headerlink" title="将GPG密钥添加到GitHub账户"></a>将GPG密钥添加到GitHub账户</h3><p>打开GitHub的设置，找到SSH and GPG keys这一项，添加一个新的GPG密钥，并将你刚才复制的密钥粘贴进去。</p>
</li>
</ul>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="gpg/gpg01.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="gpg/gpg02.png" alt></p>
<p>然后就大功告成啦！</p>
<h3 id="利用GPG私钥对Git-commit进行签名"><a href="#利用GPG私钥对Git-commit进行签名" class="headerlink" title="利用GPG私钥对Git commit进行签名"></a>利用GPG私钥对Git commit进行签名</h3><p>首先，需要让Git知道签名所用的GPG密钥ID：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.signingkey &#123;key_id&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在每次commit的时候，加上-S参数，表示这次提交需要用GPG密钥进行签名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -S -m &quot;...&quot;</span><br></pre></td></tr></table></figure>
<p>如果你觉得每次都需要手动加上-S有些麻烦，可以设置Git为每次commit自动要求签名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>
<p>但不论是否需要手动加上-S，commit时都会弹出对话框，需要你输入该密钥的密码，以判断是否为本人操作。<br>至于其它的进阶玩法，自行Google去吧！</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>GPG</tag>
      </tags>
  </entry>
  <entry>
    <title>在虚拟机中安装ArchLinux(UEFI)</title>
    <url>/posts/2020/helloarchlinux.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于操作系统的选择，我还是喜欢把Windows 10作为<strong>Host OS</strong>，把其它的作为<strong>Guest OS</strong>，比如一些Linux发行版openSUSE、Ubuntu等，以及用作其它用途的系统。比如我喜欢把迅雷等软件放在虚拟机的Windows系统里面(迅雷之类的软件感觉就是毒瘤，但有时候又需要用，别跟我说还有很多替代软件，我用的也不只是迅雷哦😅)。至于为什么要写这篇文章，因为我身边用ArchLinux的人慢慢地变多了起来，不过相对于ArchLinux，我还是比较喜欢openSUSE啊😄</p>
<a id="more"></a>

<p>ArchLinux有一个与众不同的地方，初始安装的Arch只是一个基本系统，随后用户可以根据自己的喜好安装需要的软件并配置成符合自己理想的系统。很多用户喜欢ArchLinux的原因就是，“以用户为中心”等的<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0FyY2hfTGludXhfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Arch之道<i class="fa fa-external-link-alt"></i></span>。如果您觉得安装ArchLinux之流已经满足不了你的折腾需求了，可以尝试<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGludXhfRnJvbV9TY3JhdGNo">LFS<i class="fa fa-external-link-alt"></i></span>哦！</p>
<center><b>如果你是初次尝试Linux或者ArchLinux，我建议你从“业余环境”慢慢迁移到“工作环境”！</b></center>


<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在安装的过程中，无论遇到什么困难，我们都不要怕，解决问题本身就是一种乐趣。此时，你可以围绕着Google等搜索引擎来寻找解决方案，<span class="exturl" data-url="aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Lm9yZy8=">Arch官方论坛<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cDovL2ZvcnVtLnVidW50dS5vcmcuY24vdmlld2ZvcnVtLnBocD9mPTE1NQ==">Ubuntu中文论坛Arch专区<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aXJjOi8vaXJjLmZyZWVub2RlLm5ldC8jYXJjaGxpbnV4LWNu">IRC频道:archlinux-cn<i class="fa fa-external-link-alt"></i></span>等，都是不错的地方。好在，ArchLinux官方提供了非常详细的Wiki👍</p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>你可以去<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJjaGxpbnV4Lm9yZy9kb3dubG9hZC8=">官网下载<i class="fa fa-external-link-alt"></i></span>，或者使用国内外的镜像源进行下载。不管从哪里下载，我都建议你<strong>验证GnuPG签名！！！</strong></p>
<h3 id="虚拟机准备"><a href="#虚拟机准备" class="headerlink" title="虚拟机准备"></a>虚拟机准备</h3><p>新建虚拟机</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux01.png" alt></p>
<p>选择<code>典型</code>，然后下一步</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux02.png" alt></p>
<p>选择<code>稍后安装操作系统</code>，然后下一步</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux03.png" alt></p>
<p>然后客户机操作系统选择<code>Linux</code>，版本为<code>其他 Linux 5.x 或更高版本内核 64 位</code>。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux04.png" alt></p>
<p>虚拟机名称和位置请自定义吧，<strong>最好别用中文</strong>(我没试过中文能不能成功，但最好别用)。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux05.png" alt></p>
<p>磁盘大小我选择60GB，这个根据实际需求来就好啦！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux06.png" alt></p>
<p>到这一步，我们选择<code>自定义硬件</code></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux07.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux08.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux09.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux10.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux11.png" alt></p>
<p>然后，选择完成即可！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux12.png" alt></p>
<p>选择<code>编辑虚拟机设置</code></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux13.png" alt></p>
<p>选择<code>选项</code>–&gt;<code>高级</code>，然后选择<code>固件类型</code>为<code>UEFI</code>，然后点击确定。这一步非常重要，不能忽略！</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>启动虚拟机之后，会看到如下画面：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux14.png" alt></p>
<p>选择第一个 <code>Arch Linux archiso x86_64 UEFI CD</code>，按下回车键。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux15.png" alt></p>
<p>过一会儿，就能进入U盘中的系统啦，也就是Live CD(据说有些Linux发行版，就只是在Live CD中运行的哦)。这一步可以输入<code>ls</code>查看到当前目录下，有一个叫做<code>install.txt</code>文件，它就是安装教程啦！可以输入命令 <code>cat i</code> + tab 键自动补全后回车查看（<code>shift + pgup/pgdn</code> 可上下翻页），也可用 <code>vim</code> 或 <code>nano</code> 查看。</p>
<h3 id="验证启动模式"><a href="#验证启动模式" class="headerlink" title="验证启动模式"></a>验证启动模式</h3><p>刚才我们不是设置的UEFI启动嘛？这时候来验证一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /sys/firmware/efi/efivars</span></span><br></pre></td></tr></table></figure>

<p>如果有输出，确认启动模式为UEFI，就没问题啦。</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>确保系统启用了网络接口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip link</span></span><br></pre></td></tr></table></figure>

<p>使用<code>dhcpcd</code>联网：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dhcpcd</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p>-c 参数：用于指定 ping 的次数</p></div>


<h3 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl set-ntp true</span></span><br></pre></td></tr></table></figure>

<p>检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl status</span></span><br></pre></td></tr></table></figure>

<h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><p>到了重要的一步了，硬盘分区。先说说我的分区方案：</p>
<table>
<thead>
<tr>
<th>分区</th>
<th>分区类型</th>
<th>大小</th>
<th>描述</th>
<th>挂载点</th>
</tr>
</thead>
<tbody><tr>
<td>/dev/sda1</td>
<td>EFI system partition</td>
<td>512M</td>
<td>EFI引导分区</td>
<td>/mnt/boot</td>
</tr>
<tr>
<td>/dev/sda2</td>
<td>Linux swap</td>
<td>4G</td>
<td>交换分区</td>
<td>swap</td>
</tr>
<tr>
<td>/dev/sda3</td>
<td>/</td>
<td>剩下所有的</td>
<td>系统根分区</td>
<td>/mnt</td>
</tr>
</tbody></table>
<p>查看硬盘的信息，核对无误后再上手操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fdisk -l</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux16.png" alt></p>
<h4 id="开始分区"><a href="#开始分区" class="headerlink" title="开始分区"></a>开始分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fdisk /dev/sda</span></span><br></pre></td></tr></table></figure>

<p>进入分区程序。输入 <strong>m</strong> 可以查看 fdisk 的帮助。<strong>在决定写入之前，所有的更改都不会被保存。</strong></p>
<blockquote>
<ul>
<li>创建分区表，输入 <code>g</code> 创建一个全新的 GPT (GUID Partition Table) 分区表。</li>
<li>输入 <strong>n</strong> 建立第一个分区，这里我们创建的是sda1分区</li>
<li>分区类型默认回车，分区序号默认回车，起始扇区默认回车，结束扇区输入 <code>+512M</code> 回车。</li>
</ul>
</blockquote>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux17.png" alt></p>
<p>依此类推，我们还需要创建交换分区和根分区：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux18.png" alt></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux19.png" alt></p>
<h4 id="修改分区类型"><a href="#修改分区类型" class="headerlink" title="修改分区类型"></a>修改分区类型</h4><p>按 <strong>t</strong> ，会询问需要修改的分区号，然后则是询问你要修改的类型（按 L 会列出各个分区类型的编号），编号 <strong>1</strong> 是 <strong>EFI System Partition</strong> ，编号 <strong>19</strong> 是 <strong>swap</strong> ，分区3的类型不做修改（默认的分区类型是 Linux Filesystem）。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux20.png" alt></p>
<p>最后，我们输入w，将改动输入到硬盘：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux21.png" alt></p>
<p>此时，我们来确认下有没有生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fdisk -l /dev/sda</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux22.png" alt></p>
<h4 id="格式化，并设置swap分区"><a href="#格式化，并设置swap分区" class="headerlink" title="格式化，并设置swap分区"></a>格式化，并设置swap分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkfs.fat -F32 /dev/sda1</span></span><br><span class="line"><span class="comment"># mkswap /dev/sda2</span></span><br><span class="line"><span class="comment"># mkfs.ext4 /dev/sda3</span></span><br></pre></td></tr></table></figure>

<h4 id="启用交换分区"><a href="#启用交换分区" class="headerlink" title="启用交换分区"></a>启用交换分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swapon /dev/sda2</span></span><br></pre></td></tr></table></figure>

<p>查看是否启用成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swapon --show</span></span><br></pre></td></tr></table></figure>

<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount /dev/sda3 /mnt</span></span><br><span class="line"><span class="comment"># mkdir /mnt/boot</span></span><br><span class="line"><span class="comment"># mount /dev/sda1 /mnt/boot</span></span><br></pre></td></tr></table></figure>

<p>然后查看是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsblk</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux23.png" alt></p>
<h3 id="选择镜像源"><a href="#选择镜像源" class="headerlink" title="选择镜像源"></a>选择镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/pacman.d/mirrorlist</span></span><br></pre></td></tr></table></figure>

<p>然后输入<code>:set nu</code>，按下回车键后，让vim显示行号。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux24.png" alt></p>
<p>然后找到第19行的China。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux25.png" alt></p>
<p>输入大写字母<code>V</code>，然后按<code>d</code>进行剪切，然后把光标移到第6行，按<code>p</code>进行粘贴。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux26.png" alt></p>
<p>然后输入<code>:wq</code>，回车，保存并退出。</p>
<h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>使用 <code>pacstrap</code> 脚本，安装 <em>base</em> 软件包和 Linux 内核以及常规硬件的固件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pacstrap /mnt base linux linux-firmware</span></span><br></pre></td></tr></table></figure>

<p>注意，这里的<code>fiemware</code>，不要输成<code>fireware</code>了😂</p>
<p>安装网络管理器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pacstrap /mnt networkmanager</span></span><br></pre></td></tr></table></figure>

<h3 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h3><h4 id="生成挂载表"><a href="#生成挂载表" class="headerlink" title="生成挂载表"></a>生成挂载表</h4><p><strong>fstab</strong> 文件可用于定义磁盘分区，包括各种块设备或者远程文件系统应该如何装入到文件系统。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</span></span><br></pre></td></tr></table></figure>

<p>检查一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /mnt/etc/fstab</span></span><br></pre></td></tr></table></figure>

<p>确认无误。</p>
<h3 id="arch-chroot"><a href="#arch-chroot" class="headerlink" title="arch-chroot"></a>arch-chroot</h3><p>切换到安装的新系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># arch-chroot /mnt</span></span><br></pre></td></tr></table></figure>

<p>这意味着在 <code>exit</code> 之前，下面所有的操作都是在硬盘中的系统中运行，而非 U 盘。</p>
<h4 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br></pre></td></tr></table></figure>

<p>将硬件时钟设置为当前系统时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># hwclock --systohc --utc</span></span><br></pre></td></tr></table></figure>

<p>安装vim：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S vim</span><br></pre></td></tr></table></figure>

<h4 id="配置系统语言环境："><a href="#配置系统语言环境：" class="headerlink" title="配置系统语言环境："></a>配置系统语言环境：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># vim /etc/locale.gen</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux27.png" alt></p>
<p>找到 <code>#en_US.UTF-8 UTF-8</code> 这一行，光标移动到开头的 <code>#</code> ，然后输入 <code>x</code> ，再键入 <code>:wq</code> 保存并退出即可。同样的操作，把<code>zh_CN.UTF-8 UTF-8</code>也整一个。</p>
<p>接着执行 <code>locale-gen</code> 以生成 <code>locale</code> 信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># locale-gen</span></span><br></pre></td></tr></table></figure>

<p>创建 <code>locale.conf</code> 文件，并相应地设置 <code>LANG</code> 变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span></span><br></pre></td></tr></table></figure>

<div class="note warning"><p>在<b>/etc/locale.conf</b>中设置的locale是全局有效的，所以只建议设置<b>LANG=en_US.UTF-8</b>，也就是上门这条指令所设置的内容。因为在这里设置了<b>中文locale</b>的话，会导致<b>tty</b>乱码。但是你可以在图形界面中单独启用<b>中文locale</b>。具体可以参考<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0xvY2FsaXphdGlvbi9TaW1wbGlmaWVkX0NoaW5lc2VfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">官方Wiki<i class="fa fa-external-link-alt"></i></span></p></div>



<h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># echo arch &gt; /etc/hostname</span></span><br></pre></td></tr></table></figure>

<p>你可以把<code>arch</code>设置成自己的自定义主机名。</p>
<p>添加信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># vim /etc/hosts</span></span><br></pre></td></tr></table></figure>

<p>按<code>i</code>编辑内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Static table lookup for hostnames.</span></span><br><span class="line"><span class="comment"># See hosts(5) for details.</span></span><br><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   arch.localdomain arch</span><br></pre></td></tr></table></figure>

<p>如果你上面修改了<code>arch</code>，这里的也得改哦，主机名可以自定义，但要保持一致！</p>
<p>填写完成后就键入 <code>Esc</code> 键，退回命令模式，再键入 <code>:wq</code> 保存并退出。</p>
<p>将 <em>NetworkManager</em> 服务设为开机自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># systemctl enable NetworkManager</span></span><br></pre></td></tr></table></figure>

<h4 id="设置-root-的密码"><a href="#设置-root-的密码" class="headerlink" title="设置 root 的密码"></a>设置 root 的密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># passwd</span></span><br></pre></td></tr></table></figure>

<p>输入后回车即可，输入时无显示，需输入两次。</p>
<h4 id="安装引导程序"><a href="#安装引导程序" class="headerlink" title="安装引导程序"></a>安装引导程序</h4><blockquote>
<ul>
<li>default – 默认加载的配置文件 (不含 .conf 后缀)。</li>
<li>timeout – 启动选单的超时时间,如果不设置的话,启动选单只有在按键时才显示。</li>
<li>editor - 是否允许用户编辑内核参数。 yes 是允许, no 是阻止。</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># bootctl --path=/boot install</span></span><br></pre></td></tr></table></figure>

<p>用 vim 编辑 <code>/boot/loader/loader.conf</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># vim /boot/loader/loader.conf</span></span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default  arch</span><br><span class="line">timeout  5</span><br><span class="line">console-mode max</span><br><span class="line">editor   no</span><br></pre></td></tr></table></figure>

<h4 id="添加启动选项："><a href="#添加启动选项：" class="headerlink" title="添加启动选项："></a>添加启动选项：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># vim /boot/loader/entries/arch.conf</span></span><br></pre></td></tr></table></figure>

<p>编辑如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title   Arch Linux</span><br><span class="line">linux   /vmlinuz-linux</span><br><span class="line">initrd  /initramfs-linux.img</span><br><span class="line">options root=PARTUUID=</span><br></pre></td></tr></table></figure>

<p>保存并退出编辑后，我们执行一下这么一行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># blkid -s PARTUUID -o value /dev/sda3 &gt;&gt; /boot/loader/entries/arch.conf</span></span><br></pre></td></tr></table></figure>

<p>上面的命令将会把根分区的UUID的值追加到 <code>/boot/loader/entries/arch.conf</code> 的最后一行。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux28.png" alt></p>
<p>此时，可能是这样的，你需要用 vim 编辑 <code>/boot/loader/entries/arch.conf</code> ，将文件改成这样：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux29.png" alt></p>
<h4 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h4><p>回退到Live CD环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso /]<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<p>执行重启命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl reboot</span></span><br></pre></td></tr></table></figure>

<p>重启后会出现如图所示：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux30.png" alt></p>
<p>选择第一个，<code>Arch Linux</code>，进入系统，然后输入用户名和密码。</p>
<h4 id="新建普通用户"><a href="#新建普通用户" class="headerlink" title="新建普通用户"></a>新建普通用户</h4><p>先安装sudo软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># pacman -S sudo</span></span><br></pre></td></tr></table></figure>

<p>配置 <code>sudoers</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># EDITOR=vim visudo</span></span><br></pre></td></tr></table></figure>

<p>找到这一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># %wheel ALL=(ALL) ALL</span></span><br></pre></td></tr></table></figure>

<p>去掉找到的那一行开头的注释，即 <strong>#</strong> 和 <strong>空格</strong> ，不要误删掉 <strong>%</strong> 哦。弄完之后保存即可:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>

<div class="note info"><p>去掉注释的作用：取消注释以允许 wheel 组成员执行任何命令</p></div>
添加一个 wheel 组普通用户:

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># useradd -m -g users -G wheel -s /bin/bash 你想要取的用户名</span></span><br></pre></td></tr></table></figure>

<p>设置普通用户的密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># passwd archie</span></span><br></pre></td></tr></table></figure>

<h4 id="VMware-相关软件包和服务"><a href="#VMware-相关软件包和服务" class="headerlink" title="VMware 相关软件包和服务"></a>VMware 相关软件包和服务</h4><p>安装 <code>open-vm-tools</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S open-vm-tools</span></span><br></pre></td></tr></table></figure>

<p>将 <code>vmtoolsd</code> 和 <code>vmware-vmblock-fuse</code> 两个服务设为开机自启:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># systemctl enable vmtoolsd vmware-vmblock-fuse</span></span><br></pre></td></tr></table></figure>

<p>安装 <code>gtkmm3</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S gtkmm3</span></span><br></pre></td></tr></table></figure>

<p>安装相关驱动:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S xf86-input-vmmouse xf86-video-vmware mesa</span></span><br></pre></td></tr></table></figure>

<p>如果你不明白这几步干嘛的，可以查阅<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1ZNd2FyZS9JbnN0YWxsaW5nX0FyY2hfYXNfYV9ndWVzdF8oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KSNPcGVuLVZNLVRvb2xz">官方Wiki<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装桌面环境"><a href="#安装桌面环境" class="headerlink" title="安装桌面环境"></a>安装桌面环境</h3><p>到了这一步，很多人都会卡在KDE和GNOME之间怎么选择了。2个我都用过，也不好说谁更好用。单纯从使用习惯和风格来考虑。GNOME更像macos的那种风格，而KDE更像Windows的风格。</p>
<h4 id="1-GNOME桌面"><a href="#1-GNOME桌面" class="headerlink" title="1.GNOME桌面"></a>1.GNOME桌面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S xorg xorg-server xorg-xinit gnome gnome-extra</span></span><br><span class="line">[root@arch ~]<span class="comment"># systemctl enable gdm</span></span><br></pre></td></tr></table></figure>

<h4 id="2-KDE桌面"><a href="#2-KDE桌面" class="headerlink" title="2.KDE桌面"></a>2.KDE桌面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S xorg plasma-meta</span></span><br></pre></td></tr></table></figure>

<h4 id="3-LightDM"><a href="#3-LightDM" class="headerlink" title="3.LightDM"></a>3.LightDM</h4><p>可以选择用LightDM替换GNOME</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S lightdm lightdm-gtk-greeter</span></span><br><span class="line">[root@arch ~]<span class="comment"># systemctl disable gdm</span></span><br><span class="line">[root@arch ~]<span class="comment"># systemctl enable lightdm</span></span><br></pre></td></tr></table></figure>

<p>重启系统，选择 Gnome on Xorg 启动。</p>
<p>同时，发现启动界面有两个重复的 Gnome 选项，解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo mv /usr/share/wayland-sessions/gnome.desktop /usr/share/wayland-sessions/gnome.desktop.bak</span></span><br></pre></td></tr></table></figure>

<h4 id="完善显卡驱动-可选"><a href="#完善显卡驱动-可选" class="headerlink" title="完善显卡驱动(可选)"></a>完善显卡驱动(可选)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@arch ~]<span class="comment"># sudo pacman -S xf86-video-intel intel-media-driver vulkan-intel xf86-video-amdgpu xf86-video-ati mesa-vdpau vulkan-radeon</span></span><br></pre></td></tr></table></figure>

<h3 id="显示管理器"><a href="#显示管理器" class="headerlink" title="显示管理器"></a>显示管理器</h3><p>安装 <code>sddm</code> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@arch ~]<span class="comment"># sudo pacman -S sddm</span></span><br></pre></td></tr></table></figure>

<p>将 <code>sddm</code>服务设为开机自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@arch ~]<span class="comment"># systemctl enable sddm</span></span><br></pre></td></tr></table></figure>

<p>重启虚拟机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@arch ~]<span class="comment"># systemctl reboot</span></span><br></pre></td></tr></table></figure>

<p>重启后，即可进入图形系统。</p>
<h2 id="安装完之后"><a href="#安装完之后" class="headerlink" title="安装完之后"></a>安装完之后</h2><h3 id="安装终端"><a href="#安装终端" class="headerlink" title="安装终端"></a>安装终端</h3><p>按下 <code>Ctrl + Alt + F2</code> 切换至 <code>tty2</code> ，登录，然后输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@arch ~]<span class="comment"># sudo pacman -S deepin-terminal</span></span><br></pre></td></tr></table></figure>

<p>然后按下 <code>Ctrl + Alt + F1</code> 切换至桌面环境。</p>
<h3 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h3><p>对于 Arch Linux，最具特色也是最强大的莫过于它丰富的 AUR (Arch User Repository)，而 yay 就是一个安装这个仓库的软件的便捷工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line">$ <span class="built_in">cd</span> yay</span><br><span class="line">$ makepkg -si</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ rm -rf yay</span><br></pre></td></tr></table></figure>

<h3 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S git vim wget curl ntfs-3g exfat-utils p7zip unzip unrar</span><br></pre></td></tr></table></figure>

<h3 id="安装chromium"><a href="#安装chromium" class="headerlink" title="安装chromium"></a>安装chromium</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S chromium</span><br></pre></td></tr></table></figure>

<h3 id="安装中文字体"><a href="#安装中文字体" class="headerlink" title="安装中文字体"></a>安装中文字体</h3><p>打开终端，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S base-devel git</span><br><span class="line">$ git <span class="built_in">clone</span> https://aur.archlinux.org/noto-fonts-sc.git</span><br><span class="line">$ <span class="built_in">cd</span> noto-fonts-sc</span><br><span class="line">$ makepkg -si</span><br><span class="line">$ sudo pacman -S noto-fonts-emoji</span><br></pre></td></tr></table></figure>

<p>上面的命令可能需要代理。。。</p>
<h3 id="安装-shadowsocks-qt5"><a href="#安装-shadowsocks-qt5" class="headerlink" title="安装 shadowsocks-qt5"></a>安装 shadowsocks-qt5</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S shadowsocks-qt5</span><br></pre></td></tr></table></figure>

<h3 id="安装文件管理器"><a href="#安装文件管理器" class="headerlink" title="安装文件管理器"></a>安装文件管理器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S dolphin</span><br></pre></td></tr></table></figure>

<h3 id="安装归档管理器"><a href="#安装归档管理器" class="headerlink" title="安装归档管理器"></a>安装归档管理器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S p7zip unrar zip unzip engrampa</span><br></pre></td></tr></table></figure>

<p>然后，其它的自己去diy吧😀</p>
<h2 id="Arch信仰"><a href="#Arch信仰" class="headerlink" title="Arch信仰"></a>Arch信仰</h2><p>安装<code>neofetch</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S neofetch</span><br></pre></td></tr></table></figure>

<p>然后在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ neofetch</span><br></pre></td></tr></table></figure>

<p>呐：</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="helloarchlinux/helloarchlinux31.jpg" alt></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>虚拟机</tag>
        <tag>ArchLinux</tag>
        <tag>UEFI启动</tag>
      </tags>
  </entry>
  <entry>
    <title>【玩转腾讯云】用轻量应用服务器搭建网站</title>
    <url>/posts/2020/lighthouse.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不少小伙伴应该知道，腾讯云正在内测轻量应用服务器，而且马上就要公测了！我提前申请到了一台内测机器，那就来告诉大家，在公测后购买腾讯云轻量应用服务器之后如何玩转它吧，比如搭建静态或者动态网站！</p>
<a id="more"></a>

<h2 id="什么是轻量应用服务器-Lighthouse"><a href="#什么是轻量应用服务器-Lighthouse" class="headerlink" title="什么是轻量应用服务器 Lighthouse"></a>什么是轻量应用服务器 Lighthouse</h2><ul>
<li>这里是文档上的介绍，让我们先了解下！</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2xpZ2h0aG91c2U=">轻量应用服务器<i class="fa fa-external-link-alt"></i></span>（Lighthouse）是一种易于使用和管理、适合承载轻量级业务负载的云服务器，能帮助个人和企业在云端快速构建网站、博客、电商、论坛等各类应用以及开发测试环境，并提供应用部署、配置和管理的全流程一站式服务，极大提升构建应用的体验，是您使用腾讯云的最佳入门途径。</p>
<h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p>先去<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLmNsb3VkLnRlbmNlbnQuY29tL2xpZ2h0aG91c2UvaW5zdGFuY2UvaW5kZXg=">控制台<i class="fa fa-external-link-alt"></i></span>找到轻量应用服务器，然后按需求购买。可以选择不同的地域、镜像、套餐、时长和数量等。这里我申请到的内测机型是【上海区域、1核2G、系统盘40G，峰值5Mbps、1000G流量的套餐】。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse001.png" alt></p>
<p>我们购买成功后，来到轻量应用服务器控制台，打开详情页面后，需要先【重置密码】或者【绑定密钥】。由于是作演示用，所以我就选择了【重置密码】。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse002.png" alt></p>
<p>然后打开XShell 6，新建会话，自定义名称，然后在【主机】里面输入【IP地址】。然后进行连接，并输入用户名和密码，连上去之后如图所示。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse003.png" alt></p>
<h2 id="搭建网站"><a href="#搭建网站" class="headerlink" title="搭建网站"></a>搭建网站</h2><p>这里我推荐使用BT面板，因为我这台轻量服务器的系统是CentOS，所以就需要自己安装了，当然，你也可以在控制台直接更换成BT面板的应用镜像，非常方便有木有！！！</p>
<ul>
<li>更新系统和软件包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure>

<ul>
<li>安装一些软件包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y curl vim wget unzip git nano</span><br></pre></td></tr></table></figure>

<ul>
<li>安装BT面板</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse004.png" alt></p>
<p>中间会弹出一个提示，输入y，并回车，之后等待一会儿就好啦！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse005.png" alt></p>
<p>我们可以看到，安装速度真的是很快啊，上面的Bt-Panel、username和password分别对应公网访问地址、用户名和密码。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse006.png" alt></p>
<p>然后我们需要去控制台的防火墙，开放8888端口。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse007.png" alt></p>
<p>进入到BT面板之后，就安装推荐的LNMP即可，具体的版本其实可以根据自己的实际情况来看。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse008.png" alt></p>
<p>然后等待安装就行了。</p>
<h3 id="搭建静态网站"><a href="#搭建静态网站" class="headerlink" title="搭建静态网站"></a>搭建静态网站</h3><p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse009.png" alt></p>
<p>安装好之后，选择左边的【网站】，然后点击【添加站点】，如上图，在域名这一栏，填上你的域名。当然，得先去把域名解析到当前的ip地址，而且还得先备案哦，在腾讯云备案，还是比较方便的。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse010.png" alt></p>
<p>然后在最右边，选择刚创建好的网站的【设置】。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse011.png" alt></p>
<p>然后可以一键申请SSL证书，还是比较方便的，其它的就按照自己的需求来。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse012.png" alt></p>
<p>在【文件】里面，可以管理和上传你自己的代码和静态文件资源。</p>
<p>到这里，没啥问题的话，网站就已经可以访问了！</p>
<h3 id="搭建动态网站"><a href="#搭建动态网站" class="headerlink" title="搭建动态网站"></a>搭建动态网站</h3><p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse013.png" alt></p>
<p>BT面板也可以搭建动态网站，你可以按照刚才搭建静态网站的方法，上传自己的安装包，或者去【软件商店】安装【宝塔一键部署源码1.1】。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse014.png" alt></p>
<p>安装好之后，可以用这个插件一键部署源码，比如说我们要安装wordpress博客系统，找到之后，选择一键部署就行了。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse015.png" alt></p>
<p>然后在相应的空里面填就好了，域名还是一样，要提前解析好，其他的一般默认即可。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse016.png" alt></p>
<p>部署好之后，访问站点，上面的数据库账号资料后面会用的到。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse017.png" alt></p>
<p>点击【现在就开始】，进入下一步！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse018.png" alt></p>
<p>在这一步，需要填好刚才准备的信息，然后点击提交！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse019.png" alt></p>
<p>进行安装！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse020.png" alt></p>
<p>然后根据自己的情况，填上相应的信息，注意密码不要用弱密码，我这里只是为了演示！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse021.png" alt></p>
<p>成功之后，登录就能进到后台啦！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse022.png" alt></p>
<p>然后就自己去探索功能吧！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="lighthouse/lighthouse023.png" alt></p>
<p>至此，动态网站已经搭建完成！</p>
<h2 id="轻量服务器的应用场景"><a href="#轻量服务器的应用场景" class="headerlink" title="轻量服务器的应用场景"></a>轻量服务器的应用场景</h2><p>腾讯云轻量应用服务器，除了可以搭建网站，还可以干很多事情哦！</p>
<p>主要的应用场景：</p>
<ul>
<li>网站搭建</li>
<li>Web 应用服务</li>
<li>快速搭建开发测试环境</li>
<li>云端学习环境</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>玩转腾讯云</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>我和我的博客的过去、现在与未来</title>
    <url>/posts/2020/newblog.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客原来的样式，是去年五一晚上熬夜搞出来的，当时觉得蛮漂亮，但是看久了，就觉得乏了！但这还不是我要重构的原因，博客代码冗余、加载速度慢、载入资源多等等，迫使我对整个博客进行了重构和魔改！</p>
<a id="more"></a>

<h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>在我第一次使用hexo时，尝试过很多主题，但最终还是回到了<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lmlpc3NuYW4uY29tLw==">NexT<i class="fa fa-external-link-alt"></i></span>主题。并且一用就是2年多了，期间经历了多次重大的更新和改进，从此也开始了自己的魔改之路。NexT主题，自带的样式虽然在很多人看来并不好看，但是它的功能非常强大，只要你想(不懒)，你几乎可以用它实现静态博客能实现的所有功能，不是说别的主题不行，而是NexT魔改起来对我而言更舒服！</p>
<p>第一次自己建站写博客，是用的<span class="exturl" data-url="aHR0cHM6Ly93b3JkcHJlc3Mub3JnLw==">WordPress<i class="fa fa-external-link-alt"></i></span>，确实很强大，但是在国内用起来也不是特别舒服。尤其是现在，国内用户的体验大不如以前了，并且已经打不开了。我知道，这些都不是事儿，我放弃wordpress的原因是，它太吃性能了！！！不是所有人都能承担的起这个费用的，因为没有必要。后来上网寻找替代方案，改用静态博客，最后选择了<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==">Hexo<i class="fa fa-external-link-alt"></i></span>。搭建的方式也逐步变得多样化，从单一的部署，变成多线部署、多解析，从原生加载到CDN加速和对象存储，从第三方服务到自建再到第三方等等。在去年，我也尝试了新的动态博客方案——<span class="exturl" data-url="aHR0cHM6Ly90eXBlY2hvLm9yZy8=">Typecho<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9oYWxvLnJ1bi8=">Halo<i class="fa fa-external-link-alt"></i></span>，而且Halo可是用Java写的呢，这跟我的专业也就一样啦！</p>
<p>早些年，写日记这种东西，都是日记本。后来就慢慢的尝试在网上写日记，尝试了很多第三方的平台来写日记。然后慢慢的熟知了博客这个东西，也就想有一个自己的博客，也就有了以上一些经历。现在静态博客用的还是Hexo，动态博客用的是Typecho，第三方服务正在用<span class="exturl" data-url="aHR0cHM6Ly93d3cueXVxdWUuY29tL2xvZ2luP3BsYXRmb3JtPXdlY2hhdCZpbnZpdGVUb2tlbj0zNTdkZjY1ZTMwNjE2NzNlM2IwM2EwODBmYWRlMmU0OTlkMDFhYjY1YzAxZGUxY2Q0ZTBmMTFjYzZiOWM5Mzhi">语雀<i class="fa fa-external-link-alt"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly93d3cueWlueGlhbmcuY29tLw==">印象笔记<i class="fa fa-external-link-alt"></i></span>，这里我强烈推荐一波语雀，是真的好用，目前正在逐步从印象笔记迁移到语雀！</p>
<h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>我一直都有写日记的习惯(别问我为什么没看到，我想没有多少人会把日记放网上给人看的)，偶尔也会写写学习笔记、一些感想等，但是很少放到网上。我觉得，经常用文字记录下自己的学习、成长与生活，其实是非常好的一个习惯。而且用电脑写作，能够有很多手写所没有的好处，比如说用Markdown书写不仅美观、而且排版也更好看，能够在文章中插入流媒体、表格等，分类页更加方便。但最大的缺点就是，原本写字就不好看。。。长时间不握笔，就。。。</p>
<p>来聊聊这次重构博客吧，我并不是在原来的基础上更改的，而是去下了最新的Hexo和NexT主题，在本地从零开始边预览边魔改的，目前用的是7.8.0版本。用<code>chrome</code> + <code>git bash</code> + <code>VS Code</code>，慢慢的修改，经历了无数次的报错之后，终于搞定，chrome起到的最大的作用还不是预览网页，而是用搜索引擎排错🤣。我基本上删除了主题中所有我很难用的上的代码和插件，最大程度的减少多余的代码带来的文件大小过大的问题。NexT主题长时间不更新的话，它的源码也会改动特别大，需要重新看一遍才行。新版本中，会删掉一些模块，但是其中一些东西自己很喜欢怎么办？直接去GitHub上面的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">NexT的repo<i class="fa fa-external-link-alt"></i></span>，查看commits的提交记录，并对照着自己修改代码即可！因为像这样的开源主题，是需要照顾到很多人的，如果只是自己单一的需求，自己添加代码就好啦！😅然后把博客内的颜色、样式等，全部改成了自己比较喜欢的风格。修改了部分模块的逻辑，以及修改了部分页面的布局等。</p>
<p>可以简单看下前后的区别，我只截图了首页的头部的一小块部分，如果之前来访过的小伙伴，应该是能看到整站的大改的，后期考虑下做个以前的镜像。如果还留着我发的软件的小伙伴，直接在电脑上打开软件，就能第一时间看到啦！</p>
<div class="tabs" id="选项卡-1"><ul class="nav-tabs"><li class="tab active"><a href="#选项卡-1-1">重构前</a></li><li class="tab"><a href="#选项卡-1-2">重构后</a></li></ul><div class="tab-content"><div class="tab-pane active" id="选项卡-1-1"><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="newblog/newblog01.png"></div><div class="tab-pane" id="选项卡-1-2"><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="newblog/newblog02.png"></div></div></div>

<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p><strong>我为什么要写博客？</strong></p>
<p>其实也不仅仅只是博客，可以有学习笔记、日记等更多的东西，这里用博客统称。</p>
<p>说的笼统一点：<strong>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处</strong>。这就跟学习时做笔记和思维导图一样，自己总结记录下来，才能够有收获和成长。我平常就是在做笔记和思维导图的时候，能够发现自己还有哪些知识点没有掌握好，这也是一种查漏补缺的方式。试想一下，我们为什么不少刷一下抖音、少看一集电视剧、少打一把游戏，然后去写作呢？它能给你带来的提升是巨大的！每次在写学习笔记的时候，自己总结不出来、或者发现的没学好的地方，我都会去查阅相关资料，久而久之，养成了习惯，所以说：<strong>书写是为了更好的思考</strong>。</p>
<p>现在我的写作内容，以学习笔记偏多，没办法，这不是快毕业了嘛😝我写博客最开始就是希望，记录自己的成长与生活，提升自己的能力，能够交到一群志同道合的朋♂友。当然，我也有看过 <code>A Declaration of the Independence of Cyberspace</code>，即《赛博空间独立宣言》。</p>
<p>以后我也会坚持写博客，谁也无法预料以后博客的形态会发生什么样的变化，但是我觉得，博客的中心，永远都是创作者的内容输出，这一点应该是不会变化的，至少很难改变。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>世纪互联OneDrive搭建OneIndex</title>
    <url>/posts/2020/onedrivecn.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，国际版OneDrive在国内的访问速度并不理想(多线程下载除外)，所以我们就需要相对而言速度更快的世纪互联版OneDrive来体验体验了。</p>
<a id="more"></a>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，得有一个世纪互联版的OneDrive，其次一个域名和一台vps。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="登录Azure-Active-Directory"><a href="#登录Azure-Active-Directory" class="headerlink" title="登录Azure Active Directory"></a>登录Azure Active Directory</h3><p>登录<span class="exturl" data-url="aHR0cHM6Ly9wb3J0YWwuYXp1cmUuY24v">Azure Active Directory<i class="fa fa-external-link-alt"></i></span>注册应用。选择<code>应用注册</code></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn01.png" alt></p>
<p>然后我们点击<code>新注册</code></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn02.png" alt></p>
<p>这里的名称可以随便取，然后选择受支持的账户类型为<code>任何组织目录(任何Azure AD 目录- 多租户)中的账户</code>，回调地址填你的网站的地址，然后单击注册。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn03.png" alt></p>
<p>然后我们能看到<code>应用程序(客户端)ID</code>，这个就是你的应用ID。然后接下来要进行<code>应用机密配置</code>和<code>API权限配置</code>。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn04.png" alt></p>
<p>先进行<code>应用机密配置</code>，选择<code>新客户端密码</code>，然后自己随意即可！</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn05.png" alt></p>
<p>然后复制你的<code>应用机密</code>并保存，注意，<strong>只能复制一次！！！</strong></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn06.png" alt></p>
<p>然后配置<code>API权限</code>，勾选<code>Files.ReadWrite</code>和<code>Files.ReadWrite.All</code>即可。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn07.png" alt></p>
<h3 id="安装OneIndex"><a href="#安装OneIndex" class="headerlink" title="安装OneIndex"></a>安装OneIndex</h3><p>这一步需要到vps上进行，项目是这个👉<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x6eDg1ODk1NjEvb25laW5kZXgyLWlu">oneindex2-in<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://ae01.alicdn.com/kf/Hbeac22ce6e5840728e7c1875ddd3bfeea.jpg" data-original="onedrivecn/onedrivecn08.png" alt></p>
<blockquote>
<p>设置config/、config/base.php 、 cache/ 可读写</p>
<p>复制刚才的<code>应用程序(客户端) ID</code>到<code>应用ID</code>栏中</p>
<p>复制刚才的<code>应用机密到oneindex</code>的<code>应用机密</code>栏中</p>
<p>其中配置参数为世纪互联前缀<code>https://**xxx-my**.sharepoint.cn</code>填写加粗部分<code>xxx-my</code></p>
<p>回调地址填写你的网址，例如<code>https://cdn.baidu.com</code></p>
</blockquote>
<h3 id="特殊文件实现功能"><a href="#特殊文件实现功能" class="headerlink" title="特殊文件实现功能"></a>特殊文件实现功能</h3><p><code>README.md</code>、<code>HEAD.md</code> 、 <code>.password</code>特殊文件使用</p>
<p>可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvbndhL29uZWluZGV4L3RyZWUvZmlsZXM=">https://github.com/donwa/oneindex/tree/files<i class="fa fa-external-link-alt"></i></span></p>
<p><strong>在文件夹底部添加说明:</strong></p>
<blockquote>
<p>在 OneDrive 的文件夹中添加<code>README.md</code>文件，使用 Markdown 语法。</p>
</blockquote>
<p><strong>在文件夹头部添加说明:</strong> </p>
<blockquote>
<p>在 OneDrive 的文件夹中添加<code>HEAD.md</code> 文件，使用 Markdown 语法。</p>
</blockquote>
<p><strong>加密文件夹:</strong> </p>
<blockquote>
<p>在 OneDrive 的文件夹中添加<code>.password</code>文件，填入密码，密码不能为空。  </p>
</blockquote>
<p><strong>直接输出网页:</strong></p>
<blockquote>
<p>在 OneDrive 的文件夹中添加<code>index.html</code> 文件，程序会直接输出网页而不列目录。<br>配合 文件展示设置-直接输出 效果更佳。</p>
</blockquote>
<h3 id="Nginx伪静态设置"><a href="#Nginx伪静态设置" class="headerlink" title="Nginx伪静态设置"></a>Nginx伪静态设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    set $rule_0 1$rule_0;</span><br><span class="line">&#125;</span><br><span class="line">if (!-d $request_filename)&#123;</span><br><span class="line">    set $rule_0 2$rule_0;</span><br><span class="line">&#125;</span><br><span class="line">if ($rule_0 = "21")&#123;</span><br><span class="line">	rewrite ^/(.*)$ /index.php?/$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命令行功能"><a href="#命令行功能" class="headerlink" title="命令行功能"></a>命令行功能</h3><p>仅能在<code>php cli</code>模式下运行</p>
<p><strong>清除缓存:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php one.php cache:clear</span><br></pre></td></tr></table></figure>

<p><strong>刷新缓存:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php one.php cache:refresh</span><br></pre></td></tr></table></figure>

<p><strong>刷新令牌:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php one.php token:refresh</span><br></pre></td></tr></table></figure>

<p><strong>上传文件:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php one.php upload:file 本地文件 [onedrive文件]</span><br></pre></td></tr></table></figure>

<p><strong>上传文件夹:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php one.php upload:folder 本地文件夹 [OneDrive文件夹]</span><br></pre></td></tr></table></figure>

<p><strong>例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;上传demo.zip 到OneDrive 根目录  </span><br><span class="line">php one.php upload:file demo.zip  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传demo.zip 到OneDrive &#x2F;test&#x2F;目录  </span><br><span class="line">php one.php upload:file demo.zip &#x2F;test&#x2F;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传demo.zip 到OneDrive &#x2F;test&#x2F;目录并将其命名为 d.zip  </span><br><span class="line">php one.php upload:file demo.zip &#x2F;test&#x2F;d.zip  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上传up&#x2F; 到OneDrive &#x2F;test&#x2F; 目录  </span><br><span class="line">php one.php upload:file up&#x2F; &#x2F;test&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="Shell计划任务"><a href="#Shell计划任务" class="headerlink" title="Shell计划任务"></a>Shell计划任务</h3><p>设置每小时刷新一次Token ，任务周期选择每小时，0分钟，脚本内容为：<code>php /程序具体路径/one.php token:refresh</code> </p>
<p>设置每十分钟后台刷新一遍缓存,任务周期改为N分钟-10分钟，脚本内容为：<code>php /程序具体路径/one.php cache:refresh</code></p>
<blockquote>
<p>具体路径为你网站根目录路径,PHP后有空格请注意。</p>
</blockquote>
<h3 id="其它玩法："><a href="#其它玩法：" class="headerlink" title="其它玩法："></a>其它玩法：</h3><p>推荐看看大佬们怎么玩的吧。</p>
<p>我习惯用服务器下载电视剧或者电影，然后同步到OneDrive，然后在线观看，非常清晰的呢！！！</p>
<p>可以访问我的由国际版OneDrive和Google Drive搭建的<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLjUyYmVzcy5jb20=">站点<i class="fa fa-external-link-alt"></i></span>哦！！！</p>
]]></content>
      <categories>
        <category>OneDrive</category>
        <category>Linux</category>
        <category>OneIndex</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>OneDrive</tag>
        <tag>OneIndex</tag>
      </tags>
  </entry>
</search>
